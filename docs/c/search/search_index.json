{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"SoftNeuro Ver.5.2.0 API Document Rev.1.0.0 1. About This document is the SoftNeuro API reference, and provides some sample codes and supported layer names. 1.1. Target readers This document is supposed to be read by software engineers with basic C and deep learning knowledge. 1.2. Related documents Refer to \"CLI Tool Reference Guide\" for command line tool, and to \"Python API document\" for Python API details. 1.3. Quick links morapi_Dnn morapi_DnnProf morapi_DnnOptimiser morapi_DnnRecipe morapi_DnnNetPartition Dnn example Dnn profiling example Dnn decomposing example 2. Technical overview SoftNeuro is a high-performance deep learning inference engine with multiple backend support. The SoftNeuro SDK is constituted by a Python module, an unified command line tool and this runtime library. Fig.1 SoftNeuro Overview The softneuro unified command line tool imports trained models from popular deep learning frameworks and converts them into SoftNeuro's dnn format. The currently supported frameworks are TensorFlow and ONNX , which in turn supports Caffe2 , Chainer , Microsoft Cognitive Toolkit , MXNet , PyTorch and PaddlePaddle . Using the layer fusion technique the computational graph is optimized during the conversion process. The command line tool can also be utilized in several other ways, such as: tuning a dnn model for the best performance on the target device; getting run time statistics; and encrypting files to diminish the possibility of leaking models. Please refer to the \"CLI Tool Reference Guide\" for further information. By supporting multiple backends such as Intel CPUs, ARM CPUs, Qualcomm DSPs (HNN), NVIDIA GPUs (CUDA) and other GPUs (OpenCL), SoftNeuro enables high-performance inference on any platform, any OS, and any hardware device. There are plans to support even more backends in the future. Fig.2 Model Deploy Flow 3. Specifications 3.1. System structure The following figure illustrates a structural example of a deep learning inference system that employs SoftNeuro. Fig.3 Structural Example 3.2. Library process flow The following figure illustrates the process flow of communications between SoftNeuro and an application program. More information on library processes can be viewed in this sample program . Function return values are explained in morapi_Dnn reference . Fig.4 Library Process Flow 4. Memory usage The memory usage varies upon model parameters. For further information, contact our support team. 5. Model parameters Trained model parameters are preserved in a binary file, which then can be used for the task the model was trained for, such as object detection and classification. This feature is implemented with deep learning technology, one of many machine learning methods. For further information, contact our support team.","title":"Top"},{"location":"index.html#softneuro-ver520-api-document-rev100","text":"","title":"SoftNeuro Ver.5.2.0 API Document Rev.1.0.0"},{"location":"index.html#1-about","text":"This document is the SoftNeuro API reference, and provides some sample codes and supported layer names.","title":"1. About"},{"location":"index.html#11-target-readers","text":"This document is supposed to be read by software engineers with basic C and deep learning knowledge.","title":"1.1. Target readers"},{"location":"index.html#12-related-documents","text":"Refer to \"CLI Tool Reference Guide\" for command line tool, and to \"Python API document\" for Python API details.","title":"1.2. Related documents"},{"location":"index.html#13-quick-links","text":"morapi_Dnn morapi_DnnProf morapi_DnnOptimiser morapi_DnnRecipe morapi_DnnNetPartition Dnn example Dnn profiling example Dnn decomposing example","title":"1.3. Quick links"},{"location":"index.html#2-technical-overview","text":"SoftNeuro is a high-performance deep learning inference engine with multiple backend support. The SoftNeuro SDK is constituted by a Python module, an unified command line tool and this runtime library. Fig.1 SoftNeuro Overview The softneuro unified command line tool imports trained models from popular deep learning frameworks and converts them into SoftNeuro's dnn format. The currently supported frameworks are TensorFlow and ONNX , which in turn supports Caffe2 , Chainer , Microsoft Cognitive Toolkit , MXNet , PyTorch and PaddlePaddle . Using the layer fusion technique the computational graph is optimized during the conversion process. The command line tool can also be utilized in several other ways, such as: tuning a dnn model for the best performance on the target device; getting run time statistics; and encrypting files to diminish the possibility of leaking models. Please refer to the \"CLI Tool Reference Guide\" for further information. By supporting multiple backends such as Intel CPUs, ARM CPUs, Qualcomm DSPs (HNN), NVIDIA GPUs (CUDA) and other GPUs (OpenCL), SoftNeuro enables high-performance inference on any platform, any OS, and any hardware device. There are plans to support even more backends in the future. Fig.2 Model Deploy Flow","title":"2. Technical overview"},{"location":"index.html#3-specifications","text":"","title":"3. Specifications"},{"location":"index.html#31-system-structure","text":"The following figure illustrates a structural example of a deep learning inference system that employs SoftNeuro. Fig.3 Structural Example","title":"3.1. System structure"},{"location":"index.html#32-library-process-flow","text":"The following figure illustrates the process flow of communications between SoftNeuro and an application program. More information on library processes can be viewed in this sample program . Function return values are explained in morapi_Dnn reference . Fig.4 Library Process Flow","title":"3.2. Library process flow"},{"location":"index.html#4-memory-usage","text":"The memory usage varies upon model parameters. For further information, contact our support team.","title":"4. Memory usage"},{"location":"index.html#5-model-parameters","text":"Trained model parameters are preserved in a binary file, which then can be used for the task the model was trained for, such as object detection and classification. This feature is implemented with deep learning technology, one of many machine learning methods. For further information, contact our support team.","title":"5. Model parameters"},{"location":"abs.html","text":"abs Abs function. This layer applies abs function to an input, element-wise.","title":"abs"},{"location":"abs.html#abs","text":"Abs function. This layer applies abs function to an input, element-wise.","title":"abs"},{"location":"acos.html","text":"acos Acos function. This layer applies acos function to an input, element-wise.","title":"acos"},{"location":"acos.html#acos","text":"Acos function. This layer applies acos function to an input, element-wise.","title":"acos"},{"location":"acosh.html","text":"acosh Acosh function. This layer applies acosh function to an input, element-wise.","title":"acosh"},{"location":"acosh.html#acosh","text":"Acosh function. This layer applies acosh function to an input, element-wise.","title":"acosh"},{"location":"adapt.html","text":"Blob adaptation. This layer adapts the data type and channel position and transfers the blobs between devices. Parameters from : the tensor descriptor for input blob, e.g. \"cpu\". to : the tensor descriptor for output blob, e.g. \"opencl:float16:chf\".","title":"adapt"},{"location":"adapt.html#parameters","text":"from : the tensor descriptor for input blob, e.g. \"cpu\". to : the tensor descriptor for output blob, e.g. \"opencl:float16:chf\".","title":"Parameters"},{"location":"adaptive_unit_scale.html","text":"Adaptive unit scaling for Morpho Deep Recognizer. This layer applies a normalization by given weight parameter.","title":"adaptive_unit_scale"},{"location":"add.html","text":"add Element-wise addition. This layer adds inputs in the same shape or broadcastable shapes. The number of inputs must be <= 8. Parameter has_relu : Boolean, whether the layer applies a ReLU function to the output. relu_max_value : Number, the max value of output if relu_max_value > 0.f.","title":"add"},{"location":"add.html#add","text":"Element-wise addition. This layer adds inputs in the same shape or broadcastable shapes. The number of inputs must be <= 8.","title":"add"},{"location":"add.html#parameter","text":"has_relu : Boolean, whether the layer applies a ReLU function to the output. relu_max_value : Number, the max value of output if relu_max_value > 0.f.","title":"Parameter"},{"location":"and.html","text":"and Element-wise and. This layer takes and of inputs in the same shape or broadcastable shapes. The number of inputs must be <= 8.","title":"and"},{"location":"and.html#and","text":"Element-wise and. This layer takes and of inputs in the same shape or broadcastable shapes. The number of inputs must be <= 8.","title":"and"},{"location":"arg_max.html","text":"arg_max Computes the indices of the max elements of the input tensor's element along the provided axis. Parameters axis : [int] The axis to reduce. keepdims : [bool] Keep the reduced dimension or not. select_last_index : [bool] Whether to select the last or the first index if the max value apears in multiple indices. 0: First, 1: Last.","title":"arg_max"},{"location":"arg_max.html#arg_max","text":"Computes the indices of the max elements of the input tensor's element along the provided axis.","title":"arg_max"},{"location":"arg_max.html#parameters","text":"axis : [int] The axis to reduce. keepdims : [bool] Keep the reduced dimension or not. select_last_index : [bool] Whether to select the last or the first index if the max value apears in multiple indices. 0: First, 1: Last.","title":"Parameters"},{"location":"asin.html","text":"asin Asin function. This layer applies asin function to an input, element-wise.","title":"asin"},{"location":"asin.html#asin","text":"Asin function. This layer applies asin function to an input, element-wise.","title":"asin"},{"location":"asinh.html","text":"asinh Asinh function. This layer applies asinh function to an input, element-wise.","title":"asinh"},{"location":"asinh.html#asinh","text":"Asinh function. This layer applies asinh function to an input, element-wise.","title":"asinh"},{"location":"atan.html","text":"atan Atan function. This layer applies atan function to an input, element-wise.","title":"atan"},{"location":"atan.html#atan","text":"Atan function. This layer applies atan function to an input, element-wise.","title":"atan"},{"location":"atanh.html","text":"atanh Atanh function. This layer applies atanh function to an input, element-wise.","title":"atanh"},{"location":"atanh.html#atanh","text":"Atanh function. This layer applies atanh function to an input, element-wise.","title":"atanh"},{"location":"ave_pool2.html","text":"ave_pool2 2D average pooling. Average pooling operation for spatial data. Parameters pool_size : Integer or 2 integers, factors by witch to downscale (vertical, horizontal). If only one integer is specified, the same window length will be used for boths dimensions. Default value is 2. strides : Integer or array of 2 integers, stride values. If only one integer is specified, the smae window lenghth will be used for both dimensions. Default is 2. padding : String, padding mode. 'same_upper' and 'valid' are compatible with 'same' and 'valid' on Keras (TensorFlow). 'general' is compatible with Caffe. The default is 'valid'. pads : Integer(s), pad values to the input. Four integers mean [pad_top, pad_left, pad_bottom, pad_right]. Two integers mean [pad_top, pad_left] where pad_bottom and pad_right are same as pad_top and pad_left respectively. One integer means that pad_top, pad_left, pad_bottom and pad_right have the same value. The default is 0.","title":"ave_pool2"},{"location":"ave_pool2.html#ave_pool2","text":"2D average pooling. Average pooling operation for spatial data.","title":"ave_pool2"},{"location":"ave_pool2.html#parameters","text":"pool_size : Integer or 2 integers, factors by witch to downscale (vertical, horizontal). If only one integer is specified, the same window length will be used for boths dimensions. Default value is 2. strides : Integer or array of 2 integers, stride values. If only one integer is specified, the smae window lenghth will be used for both dimensions. Default is 2. padding : String, padding mode. 'same_upper' and 'valid' are compatible with 'same' and 'valid' on Keras (TensorFlow). 'general' is compatible with Caffe. The default is 'valid'. pads : Integer(s), pad values to the input. Four integers mean [pad_top, pad_left, pad_bottom, pad_right]. Two integers mean [pad_top, pad_left] where pad_bottom and pad_right are same as pad_top and pad_left respectively. One integer means that pad_top, pad_left, pad_bottom and pad_right have the same value. The default is 0.","title":"Parameters"},{"location":"batch_norm.html","text":"Batch normalization. Normalize the activations of the previous layer by following equation i.e. applies a transformation that maintains the mean activation close to 0 and the activation standard deviation close to 1. Parameter epsilon : Number > 0.f, the default is 0.001.","title":"batch_norm"},{"location":"batch_norm.html#parameter","text":"epsilon : Number > 0.f, the default is 0.001.","title":"Parameter"},{"location":"box_filter.html","text":"Box filter. This layer performs box filter to an input. Parameter radius : Number, the layer averges the input within [2 raidus+1, 2 radius+1] window.","title":"box_filter"},{"location":"box_filter.html#parameter","text":"radius : Number, the layer averges the input within [2 raidus+1, 2 radius+1] window.","title":"Parameter"},{"location":"broadcast.html","text":"Broadcast This layer broadcasts an input tensor. The number of inputs must 1. Parameter shape : Integers, target shape.","title":"broadcast"},{"location":"broadcast.html#parameter","text":"shape : Integers, target shape.","title":"Parameter"},{"location":"cast.html","text":"Data type conversion. This layer converts an input to an output in different data type. Parameter dtype : String, data type of the output e.g. float16.","title":"cast"},{"location":"cast.html#parameter","text":"dtype : String, data type of the output e.g. float16.","title":"Parameter"},{"location":"ccc.html","text":"ccc Circular Cross Correlataion layer Parameters skip_wfft : Boolean. use_channelwise : Boolean.","title":"ccc"},{"location":"ccc.html#ccc","text":"Circular Cross Correlataion layer","title":"ccc"},{"location":"ccc.html#parameters","text":"skip_wfft : Boolean. use_channelwise : Boolean.","title":"Parameters"},{"location":"ceil.html","text":"ceil Ceil function. This layer applies ceil function to an input, element-wise.","title":"ceil"},{"location":"ceil.html#ceil","text":"Ceil function. This layer applies ceil function to an input, element-wise.","title":"ceil"},{"location":"clip.html","text":"clip Clipping. This layer clips an input into the [min_value, max_value] interval. If either min_value or max_value aren't set the interval will be open on that side. Parameter max_value : Number, maximum clip value min_value : Number, minimum clip value","title":"clip"},{"location":"clip.html#clip","text":"Clipping. This layer clips an input into the [min_value, max_value] interval. If either min_value or max_value aren't set the interval will be open on that side.","title":"clip"},{"location":"clip.html#parameter","text":"max_value : Number, maximum clip value min_value : Number, minimum clip value","title":"Parameter"},{"location":"complex.html","text":"complex Complex of layers. This layer treates multiple layers as a single layer such as morapi_DnnNet . Parameters input_num : Number output_num : Number net : String network_text : String inputs : Dict__input_dtype#d _input shape#d outputs : Dict__output_dtype#d _output shape#d","title":"complex"},{"location":"complex.html#complex","text":"Complex of layers. This layer treates multiple layers as a single layer such as morapi_DnnNet .","title":"complex"},{"location":"complex.html#parameters","text":"input_num : Number output_num : Number net : String network_text : String inputs : Dict__input_dtype#d _input shape#d outputs : Dict__output_dtype#d _output shape#d","title":"Parameters"},{"location":"concat.html","text":"concat Concatenation Layer. It takes tensors as inputs, all of the same shape except for the concatenation axis, and returns a single tensor, the concatenation of all inputs. The maximum size of input array is 8. Parameter axis : Integer, axis along which to concatenate.","title":"concat"},{"location":"concat.html#concat","text":"Concatenation Layer. It takes tensors as inputs, all of the same shape except for the concatenation axis, and returns a single tensor, the concatenation of all inputs. The maximum size of input array is 8.","title":"concat"},{"location":"concat.html#parameter","text":"axis : Integer, axis along which to concatenate.","title":"Parameter"},{"location":"const.html","text":"Constant tensor This layer just outputs a constant tensor Weight value : Float, constant tensor Parameter with_batch : Boolean, whether the value containes batch (default is false).","title":"const"},{"location":"const.html#weight","text":"value : Float, constant tensor","title":"Weight"},{"location":"const.html#parameter","text":"with_batch : Boolean, whether the value containes batch (default is false).","title":"Parameter"},{"location":"conv1.html","text":"1D convolution. This layer performs 1D convolution operations on an input. The padding rule is compatible with Keras (TensorFlow). Note that the padding rules for Conv1D differ from padding rules for Conv2D. Parameter stride : Integer dilation : Integer padding : String, \"same\", \"valid\" or \"casual\". They are compatible with Keras (TensorFlow). has_relu : Boolean, whether the layer applies a ReLU function to the output. relu_max_value : Number, the layer takes the upper bound if max_value > 0.f.","title":"conv1"},{"location":"conv1.html#parameter","text":"stride : Integer dilation : Integer padding : String, \"same\", \"valid\" or \"casual\". They are compatible with Keras (TensorFlow). has_relu : Boolean, whether the layer applies a ReLU function to the output. relu_max_value : Number, the layer takes the upper bound if max_value > 0.f.","title":"Parameter"},{"location":"conv2.html","text":"conv2 2D convolution. This layer performs 2D convolution operations on an input. Parameters strides : Integer(s), stride values. Two integers mean [stride_y, stride_x]. One integer means stride_y and stride_x have the same value. The default is 1. dilations : Integer(s), dilation ratios. Two integers mean [dilation_y, dilation_x]. One integer means dilation_y and dilation_x have the same value. The default is 1. padding : String, padding mode. \"same_upper\" and \"valid\" are compatible with \"same\" and \"valid\"on Keras (TensorFlow). \"general\" is compatible with Caffe. The default is \"valid\". pads : Integer(s), pad values to the input. Four integers mean [pad_top, pad_left, pad_bottom, pad_right]. Two integers mean [pad_top, pad_left] where pad_bottom and pad_right are same as pad_top and pad_left respectively. One integer means that pad_top, pad_left, pad_bottom and pad_right have the same value. The default is 0. has_relu : Boolean, whether the layer applies a ReLU function to the output. The default is false. relu_max_value : Number, the max value of ReLU output. Valid only when has_relu is true and relu_max_value > 0.0f. The default is -1.0f, i.e. there is no max value. Weights kernel : 4D tensor [height, width, channels, filters], kernel (mandatory). bias : 1D tensor [filters], bias (optinal).","title":"conv2"},{"location":"conv2.html#conv2","text":"2D convolution. This layer performs 2D convolution operations on an input.","title":"conv2"},{"location":"conv2.html#parameters","text":"strides : Integer(s), stride values. Two integers mean [stride_y, stride_x]. One integer means stride_y and stride_x have the same value. The default is 1. dilations : Integer(s), dilation ratios. Two integers mean [dilation_y, dilation_x]. One integer means dilation_y and dilation_x have the same value. The default is 1. padding : String, padding mode. \"same_upper\" and \"valid\" are compatible with \"same\" and \"valid\"on Keras (TensorFlow). \"general\" is compatible with Caffe. The default is \"valid\". pads : Integer(s), pad values to the input. Four integers mean [pad_top, pad_left, pad_bottom, pad_right]. Two integers mean [pad_top, pad_left] where pad_bottom and pad_right are same as pad_top and pad_left respectively. One integer means that pad_top, pad_left, pad_bottom and pad_right have the same value. The default is 0. has_relu : Boolean, whether the layer applies a ReLU function to the output. The default is false. relu_max_value : Number, the max value of ReLU output. Valid only when has_relu is true and relu_max_value > 0.0f. The default is -1.0f, i.e. there is no max value.","title":"Parameters"},{"location":"conv2.html#weights","text":"kernel : 4D tensor [height, width, channels, filters], kernel (mandatory). bias : 1D tensor [filters], bias (optinal).","title":"Weights"},{"location":"conv2t.html","text":"conv2t 2D transposed convolution. This layer performs transposed convolution operations on an input. Parameters strides : Integer(s), stride values. Two integers mean [stride_y, stride_x]. One integer means stride_y and stride_x have the same value. The default is 1. padding : String, padding mode. \"same\" and \"valid\" are compatible with Keras (TensorFlow). \"general\" is compatible with Caffe. pads : Integer(s), pad values to the input. Four integers mean [pad_top, pad_left, pad_bottom, pad_right]. Two integers mean [pad_top, pad_left] where pad_bottom and pad_right are same as pad_top and pad_left respectively. One integer means that pad_top, pad_left, pad_bottom and pad_right have the same value. The default is 0. has_relu : Boolean, whether the layer applies a ReLU function to the output. The default is false. relu_max_value : Number, the max value of ReLU output. Valid only when has_relu is true and relu_max_value > 0.0f. The default is -1.0f, i.e. there is no max value. Weights kernel : 4D tensor [height, width, filters, channels], kernel (mandatory). bias : 1D tensor [filters], bias (optinal).","title":"conv2t"},{"location":"conv2t.html#conv2t","text":"2D transposed convolution. This layer performs transposed convolution operations on an input.","title":"conv2t"},{"location":"conv2t.html#parameters","text":"strides : Integer(s), stride values. Two integers mean [stride_y, stride_x]. One integer means stride_y and stride_x have the same value. The default is 1. padding : String, padding mode. \"same\" and \"valid\" are compatible with Keras (TensorFlow). \"general\" is compatible with Caffe. pads : Integer(s), pad values to the input. Four integers mean [pad_top, pad_left, pad_bottom, pad_right]. Two integers mean [pad_top, pad_left] where pad_bottom and pad_right are same as pad_top and pad_left respectively. One integer means that pad_top, pad_left, pad_bottom and pad_right have the same value. The default is 0. has_relu : Boolean, whether the layer applies a ReLU function to the output. The default is false. relu_max_value : Number, the max value of ReLU output. Valid only when has_relu is true and relu_max_value > 0.0f. The default is -1.0f, i.e. there is no max value.","title":"Parameters"},{"location":"conv2t.html#weights","text":"kernel : 4D tensor [height, width, filters, channels], kernel (mandatory). bias : 1D tensor [filters], bias (optinal).","title":"Weights"},{"location":"cos.html","text":"cos Cos function. This layer applies cos function to an input, element-wise.","title":"cos"},{"location":"cos.html#cos","text":"Cos function. This layer applies cos function to an input, element-wise.","title":"cos"},{"location":"cosh.html","text":"cosh Cosh function. This layer applies cosh function to an input, element-wise.","title":"cosh"},{"location":"cosh.html#cosh","text":"Cosh function. This layer applies cosh function to an input, element-wise.","title":"cosh"},{"location":"crop2.html","text":"2D Cropping. This layer crops spatial dimensions (height and width). Parameter crops : Scalar or tuple of numbers. If scalar, the height and width are symmetrically cropped with the same value. If tuple has 2 numbers, the height and width are symetrically cropped with [crop_y, crop_x]. If tuple has 4 numbers, the height and width are cropped with [crop_top, crop_bottom, crop_left, crop_right].","title":"crop2"},{"location":"crop2.html#parameter","text":"crops : Scalar or tuple of numbers. If scalar, the height and width are symmetrically cropped with the same value. If tuple has 2 numbers, the height and width are symetrically cropped with [crop_y, crop_x]. If tuple has 4 numbers, the height and width are cropped with [crop_top, crop_bottom, crop_left, crop_right].","title":"Parameter"},{"location":"dcf.html","text":"dcf Discriminative Correlation Filter Layer Parameters lambda : Float32. skip_wfft : Boolean. sigma : Int32.","title":"dcf"},{"location":"dcf.html#dcf","text":"Discriminative Correlation Filter Layer","title":"dcf"},{"location":"dcf.html#parameters","text":"lambda : Float32. skip_wfft : Boolean. sigma : Int32.","title":"Parameters"},{"location":"decode_centernet.html","text":"CenterNet decoder. This layer decodes the CenterNet output into bounding boxes. Parameters keep_top_k : Integer, how many of the top-score bounding boxes to output (The default is 300) do_nms : Boolean, whether run or not to run NMS on the detected bounding boxes (The default is true) nms_thresh : Float, threshold of jaccard overlap for NMS (The default is 0.5) conf_thresh : Float, minimum confidence score to be detected (The default is 0.3) clips : Boolean, if set true, clips the detected box into the image.","title":"decode_centernet"},{"location":"decode_centernet.html#parameters","text":"keep_top_k : Integer, how many of the top-score bounding boxes to output (The default is 300) do_nms : Boolean, whether run or not to run NMS on the detected bounding boxes (The default is true) nms_thresh : Float, threshold of jaccard overlap for NMS (The default is 0.5) conf_thresh : Float, minimum confidence score to be detected (The default is 0.3) clips : Boolean, if set true, clips the detected box into the image.","title":"Parameters"},{"location":"decode_pelee.html","text":"Pelee decoder. This layer decodes pelee into bounding boxes. Parameter keep_top_k : Integer, maximum num of detected boxes (The default is 300) background_label_id : Integer, label number of background (The default is 0) do_nms : Boolean, whether run or not to run NMS (The default is true). nms_thresh : Float, threshold of jaccard overlap for NMS (The default is 0.45) conf_thresh : Float, threshold of confidence score to be detected (The default is 0.01) clips : Boolean, if set true, clips the detected box into the image.","title":"decode_pelee"},{"location":"decode_pelee.html#parameter","text":"keep_top_k : Integer, maximum num of detected boxes (The default is 300) background_label_id : Integer, label number of background (The default is 0) do_nms : Boolean, whether run or not to run NMS (The default is true). nms_thresh : Float, threshold of jaccard overlap for NMS (The default is 0.45) conf_thresh : Float, threshold of confidence score to be detected (The default is 0.01) clips : Boolean, if set true, clips the detected box into the image.","title":"Parameter"},{"location":"decode_ssd.html","text":"SSD decoder. This layer decodes SSD into bounding boxes Parameter keep_top_k : Integer, maximum num of detected boxes (The default is 300). background_label_id : Integer, label number of background (The default is 0). do_nms : Boolean, whether run or not to run NMS (The default is true). nms_thresh : Float, threshold of jaccard for NMS (The default is 0.45) onf_thresh : Float, threshold of confidence score to be detected (The default is 0.01) clips : Boolean, if set true, clips the detected box into the image.","title":"decode_ssd"},{"location":"decode_ssd.html#parameter","text":"keep_top_k : Integer, maximum num of detected boxes (The default is 300). background_label_id : Integer, label number of background (The default is 0). do_nms : Boolean, whether run or not to run NMS (The default is true). nms_thresh : Float, threshold of jaccard for NMS (The default is 0.45) onf_thresh : Float, threshold of confidence score to be detected (The default is 0.01) clips : Boolean, if set true, clips the detected box into the image.","title":"Parameter"},{"location":"decode_ulffd.html","text":"A decode layer for ULFFD keep_top_k : Integer, maximum num of detected boxes (The default is 300) background_label_id : Integer, label number of background (The default is 0) nms_thresh : Float, threshold of jaccard overlap (Non-Maximum Suppression) (The default is 0.45) conf_thresh : Float, threshold of confidence score to be detected (The default is 0.01) do_nms : Boolean, whether or not to run non-maximum suppression","title":"decode_ulffd"},{"location":"decode_yolov3.html","text":"YOLOv3 decoder. This layer decodes YOLOv3 into bounding boxes Parameter img_width : Integer, image width (The default is 416). img_height : Integer, image height (The default is 416). keep_top_k : Integer, maximum num of detected boxes (The default is 300). num_anchors_per_out : Integer, number of anchors per cell (The default is 3). do_nms : Boolean, whether run or not to run NMS (The default is true). nms_thresh : Float, threshold of jaccard overlap for NMS (The default is 0.5). conf_thresh : Float, minimum confidence score to be detected (The default is 0.3). anchors : Float array, sizes of anchors [w1,h1, w2,h2, ...] (default is [10,13, 16,30, 33,23, 30,61, 62,45, 59,119, 116,90, 156,198, 373,326]). clips : Boolean, if set true, clips the detected box into the image.","title":"decode_yolov3"},{"location":"decode_yolov3.html#parameter","text":"img_width : Integer, image width (The default is 416). img_height : Integer, image height (The default is 416). keep_top_k : Integer, maximum num of detected boxes (The default is 300). num_anchors_per_out : Integer, number of anchors per cell (The default is 3). do_nms : Boolean, whether run or not to run NMS (The default is true). nms_thresh : Float, threshold of jaccard overlap for NMS (The default is 0.5). conf_thresh : Float, minimum confidence score to be detected (The default is 0.3). anchors : Float array, sizes of anchors [w1,h1, w2,h2, ...] (default is [10,13, 16,30, 33,23, 30,61, 62,45, 59,119, 116,90, 156,198, 373,326]). clips : Boolean, if set true, clips the detected box into the image.","title":"Parameter"},{"location":"decode_yolov4.html","text":"YOLOv4 decoder. This layer decodes the Yolov4 output into bounding boxes Parameters keep_top_k : Integer, how many of the top-score bounding boxes to output (The default is 300). do_nms : Boolean, whether or not to run NMS on the detected bounding boxes (The default is true). nms_thresh : Float, threshold of jaccard overlap (Non-Maximum Suppression) (The default is 0.5). conf_thresh : Float, minimum confidence score to be detected (The default is 0.3). clips : Boolean, if set true, clips the detected box into the image.","title":"decode_yolov4"},{"location":"decode_yolov4.html#parameters","text":"keep_top_k : Integer, how many of the top-score bounding boxes to output (The default is 300). do_nms : Boolean, whether or not to run NMS on the detected bounding boxes (The default is true). nms_thresh : Float, threshold of jaccard overlap (Non-Maximum Suppression) (The default is 0.5). conf_thresh : Float, minimum confidence score to be detected (The default is 0.3). clips : Boolean, if set true, clips the detected box into the image.","title":"Parameters"},{"location":"dense.html","text":"dense Fully-connected multiplier. This layer computes a matrix product of input and kernel. Parameters has_relu : Boolean, whether the layer applies a ReLU function to the output. The default is false. relu_max_value : Number, the max value of ReLU output. Valid only when has_relu is true and relu_max_value > 0.0f. The default is -1.0f, i.e. there is no max value. Weights kernel : 2D tensor [channels, filters], kernel (mandatory). bias : 1D tensor [filters], bias (optional).","title":"dense"},{"location":"dense.html#dense","text":"Fully-connected multiplier. This layer computes a matrix product of input and kernel.","title":"dense"},{"location":"dense.html#parameters","text":"has_relu : Boolean, whether the layer applies a ReLU function to the output. The default is false. relu_max_value : Number, the max value of ReLU output. Valid only when has_relu is true and relu_max_value > 0.0f. The default is -1.0f, i.e. there is no max value.","title":"Parameters"},{"location":"dense.html#weights","text":"kernel : 2D tensor [channels, filters], kernel (mandatory). bias : 1D tensor [filters], bias (optional).","title":"Weights"},{"location":"depth_to_space.html","text":"depth_to_space Reshaping. This layer arranges the depth to space (height, width) by block_size Parameters block_size : Integer.","title":"depth_to_space"},{"location":"depth_to_space.html#depth_to_space","text":"Reshaping. This layer arranges the depth to space (height, width) by block_size","title":"depth_to_space"},{"location":"depth_to_space.html#parameters","text":"block_size : Integer.","title":"Parameters"},{"location":"depthwise_conv2.html","text":"depthwise_conv2 2D depthwise convolution. This layer performs a depthwise spatial convolution which acts on each input channel separately. Parameter padding : String, padding mode. \"same\" and \"valid\" are compatible with Keras (TensorFlow). \"general\" is compatible with Caffe. dilations : Integer(s), dilation ratios. strides : Integers.","title":"depthwise_conv2"},{"location":"depthwise_conv2.html#depthwise_conv2","text":"2D depthwise convolution. This layer performs a depthwise spatial convolution which acts on each input channel separately.","title":"depthwise_conv2"},{"location":"depthwise_conv2.html#parameter","text":"padding : String, padding mode. \"same\" and \"valid\" are compatible with Keras (TensorFlow). \"general\" is compatible with Caffe. dilations : Integer(s), dilation ratios. strides : Integers.","title":"Parameter"},{"location":"div.html","text":"div Element-wise division. This layer divides the first input by the second input in the same or broadcastable shape. The number of inputs must 2.","title":"div"},{"location":"div.html#div","text":"Element-wise division. This layer divides the first input by the second input in the same or broadcastable shape. The number of inputs must 2.","title":"div"},{"location":"dropout.html","text":"dropout Dropout. This layer does nothing and exists for compatibility with other frameworks. Parameters ratio : Number, the dropout ratio. The default is 0.5.","title":"dropout"},{"location":"dropout.html#dropout","text":"Dropout. This layer does nothing and exists for compatibility with other frameworks.","title":"dropout"},{"location":"dropout.html#parameters","text":"ratio : Number, the dropout ratio. The default is 0.5.","title":"Parameters"},{"location":"elu.html","text":"elu ELU activation. This layer applies a Exponential Linear Unit function (alpha * (exp(x) - 1) for x < 0) to an output. Parameter alpha : Number, scale for the negative factor.","title":"elu"},{"location":"elu.html#elu","text":"ELU activation. This layer applies a Exponential Linear Unit function (alpha * (exp(x) - 1) for x < 0) to an output.","title":"elu"},{"location":"elu.html#parameter","text":"alpha : Number, scale for the negative factor.","title":"Parameter"},{"location":"equal.html","text":"equal Equal logical operation.","title":"equal"},{"location":"equal.html#equal","text":"Equal logical operation.","title":"equal"},{"location":"erf.html","text":"erf Erf function. This layer applies erf function to an input, element-wise.","title":"erf"},{"location":"erf.html#erf","text":"Erf function. This layer applies erf function to an input, element-wise.","title":"erf"},{"location":"exp.html","text":"exp Element-wise exponential function. This layer applies exponential function to an input.","title":"exp"},{"location":"exp.html#exp","text":"Element-wise exponential function. This layer applies exponential function to an input.","title":"exp"},{"location":"fast_guided_filter.html","text":"Fast guided filter. This layer upsamples an input based on a guided image pair (high/low resolution guided image). Parameter epsilon : Float, strength of regularzation (default 1e-4). radius : Number, radius of internal box filter (default 4).","title":"fast_guided_filter"},{"location":"fast_guided_filter.html#parameter","text":"epsilon : Float, strength of regularzation (default 1e-4). radius : Number, radius of internal box filter (default 4).","title":"Parameter"},{"location":"fft2.html","text":"fft2 layer description. This layer computes fast fourier transform of 1d data Parameters use_ifft : Bool, whether to use inverse fft or not.","title":"fft2"},{"location":"fft2.html#fft2","text":"layer description. This layer computes fast fourier transform of 1d data","title":"fft2"},{"location":"fft2.html#parameters","text":"use_ifft : Bool, whether to use inverse fft or not.","title":"Parameters"},{"location":"fill.html","text":"fill Reshaping. This layer generages one output filled with value. Parameters value : value which fills the output","title":"fill"},{"location":"fill.html#fill","text":"Reshaping. This layer generages one output filled with value.","title":"fill"},{"location":"fill.html#parameters","text":"value : value which fills the output","title":"Parameters"},{"location":"floor.html","text":"floor Element-wise floor function. This layer computes the largest integer value that is not greater than each value of input.","title":"floor"},{"location":"floor.html#floor","text":"Element-wise floor function. This layer computes the largest integer value that is not greater than each value of input.","title":"floor"},{"location":"gather.html","text":"gather Gathering. This layer gathers elements by indices along axis. Parameters axis : axis to be gathered. Weights indices : gathering indices.","title":"gather"},{"location":"gather.html#gather","text":"Gathering. This layer gathers elements by indices along axis.","title":"gather"},{"location":"gather.html#parameters","text":"axis : axis to be gathered.","title":"Parameters"},{"location":"gather.html#weights","text":"indices : gathering indices.","title":"Weights"},{"location":"global_average_pool.html","text":"global_average_pool Global average pooling. This layer takes global average pooling for spatial data.","title":"global_average_pool"},{"location":"global_average_pool.html#global_average_pool","text":"Global average pooling. This layer takes global average pooling for spatial data.","title":"global_average_pool"},{"location":"global_max_pool.html","text":"Global max pooling. This layer takes global max pooling for spatial data.","title":"global_max_pool"},{"location":"greater.html","text":"greater Greater logical operation.","title":"greater"},{"location":"greater.html#greater","text":"Greater logical operation.","title":"greater"},{"location":"greater_or_equal.html","text":"greater_or_equal GreaterOrEqual logical operation.","title":"greater_or_equal"},{"location":"greater_or_equal.html#greater_or_equal","text":"GreaterOrEqual logical operation.","title":"greater_or_equal"},{"location":"group__binary.html","text":"binary dnn Binary module. More... Data Structures struct morapi_Binary struct morapi_BinaryLib Detailed Description Binary module.","title":"dnn.binary"},{"location":"group__binary.html#binary","text":"dnn Binary module. More...","title":"binary"},{"location":"group__binary.html#data-structures","text":"struct morapi_Binary struct morapi_BinaryLib","title":"Data Structures"},{"location":"group__binary.html#detailed-description","text":"Binary module.","title":"Detailed Description"},{"location":"group__byte__array.html","text":"byte_array core A byte array. More... Data Structures struct morapi_ByteArray Detailed Description A byte array.","title":"byte_array"},{"location":"group__byte__array.html#byte_array","text":"core A byte array. More...","title":"byte_array"},{"location":"group__byte__array.html#data-structures","text":"struct morapi_ByteArray","title":"Data Structures"},{"location":"group__byte__array.html#detailed-description","text":"A byte array.","title":"Detailed Description"},{"location":"group__core.html","text":"core Core module. More... Modules dll env Typedefs typedef signed char morapi_Int8 typedef unsigned char morapi_Uint8 typedef signed short int morapi_Int16 typedef unsigned short int morapi_Uint16 typedef signed int morapi_Int32 typedef unsigned int morapi_Uint32 typedef signed long long int morapi_Int64 typedef unsigned long long int morapi_Uint64 typedef void * morapi_ThreadId typedef morapi_Uint16 morapi_Float16 typedef float morapi_Float32 typedef double morapi_Float64 typedef morapi_Uint32 morapi_Bool typedef morapi_Int32 morapi_F32 typedef char morapi_Char typedef morapi_Int32 morapi_Result typedef double morapi_Real Enumerations enum morapi_DType { MORAPI_DTYPE_NONE = 0x00000000, MORAPI_DTYPE_UINT8 = 0x00000001, MORAPI_DTYPE_UINT16 = 0x00000002, MORAPI_DTYPE_UINT32 = 0x00000004, MORAPI_DTYPE_UINT64 = 0x00000008, MORAPI_DTYPE_INT8 = 0x00000101, MORAPI_DTYPE_INT16 = 0x00000102, MORAPI_DTYPE_INT32 = 0x00000104, MORAPI_DTYPE_INT64 = 0x00000108, MORAPI_DTYPE_FLOAT16 = 0x00001102, MORAPI_DTYPE_FLOAT32 = 0x00001104, MORAPI_DTYPE_FLOAT64 = 0x00001108, MORAPI_DTYPE_QUINT8 = 0x00003001, MORAPI_DTYPE_QINT8 = 0x00003101, MORAPI_DTYPE_QUINT32 = 0x00003004, MORAPI_DTYPE_QINT32 = 0x00003104, MORAPI_DTYPE_CHAR = 0x00010001, MORAPI_DTYPE_BOOL = 0x00010004, MORAPI_DTYPE_GENERIC = 0x00011104 } Functions const morapi_Char * morapi_DTypeToText ( morapi_DType self) morapi_DType morapi_TextToDType (const morapi_Char *i_str) morapi_Env * morapi_genv (void) Detailed Description Core module. Typedef Documentation morapi_Int8 typedef signed char morapi_Int8 8 bits signed integer. morapi_Uint8 typedef unsigned char morapi_Uint8 8 bits unsigned integer. morapi_Int16 typedef signed short int morapi_Int16 16 bits signed integer. morapi_Uint16 typedef unsigned short int morapi_Uint16 16 bits unsigned integer. morapi_Int32 typedef signed int morapi_Int32 32 bits signed integer. morapi_Uint32 typedef unsigned int morapi_Uint32 32 bits unsigned integer. morapi_Int64 typedef signed long long int morapi_Int64 64 bits signed integer. morapi_Uint64 typedef unsigned long long int morapi_Uint64 64 bits unsigned integer. morapi_ThreadId typedef void* morapi_ThreadId Thread id. morapi_Float16 typedef morapi_Uint16 morapi_Float16 16 bits floating-point number. morapi_Float32 typedef float morapi_Float32 32 bits floating-point number. morapi_Float64 typedef double morapi_Float64 64 bits floating point number. morapi_Bool typedef morapi_Uint32 morapi_Bool Boolean. Contant Value MORAPI_TRUE (1) MORAPI_FALSE (0) morapi_F32 typedef morapi_Int32 morapi_F32 17.15 bits fixed-point number. morapi_Char typedef char morapi_Char Charactor and string literal. morapi_Result typedef morapi_Int32 morapi_Result Result. Every function returns this type. Constant Value Description MORAPI_OK (0x00000000) Completes succesfully. MORAPI_INPROGRESS (0x00000001) In progress. MORAPI_CANCELED (0x00000002) Canceled. MORAPI_ERROR (0x80000000) Fails. MORAPI_ERROR_PARAM (0xC0000000) Parameters are invalid. MORAPI_ERROR_STATE (0xA0000000) An internal state is invalid. MORAPI_ERROR_MALLOC (0x90000000) Memory allocation error. MORAPI_ERROR_IO (0x88000000) Input/output error. MORAPI_ERROR_UNSUPPORTED (0x84000000) Unsupported operation. MORAPI_ERROR_TIMEOUT (0x82000000) Time-out. MORAPI_ERROR_UNKNOWN (0xC0000100) Unknown error. morapi_Real typedef double morapi_Real A real number. Enumeration Type Documentation morapi_DType enum morapi_DType Data type. Each bit represents the followng. 31-28 27-24 23-20 19-16 15-12 11-8 7-4 3-0 Description xxxx xxxx data size. xxxx unsigned (0) or signed (1). xxxx fixed (0), float (1) or quantized (3). xxxx normal (0) or extended (1). For example, MORAPI_DTYPE_FLOAT16 (= 0x00001102) means data size: 2 signed (1) float (1) normal (0) Enumerator MORAPI_DTYPE_NONE None. MORAPI_DTYPE_UINT8 Uint8. MORAPI_DTYPE_UINT16 Uint16. MORAPI_DTYPE_UINT32 Uint32. MORAPI_DTYPE_UINT64 Uint64. MORAPI_DTYPE_INT8 Int8. MORAPI_DTYPE_INT16 Int16. MORAPI_DTYPE_INT32 Int32. MORAPI_DTYPE_INT64 Int64. MORAPI_DTYPE_FLOAT16 Float16. MORAPI_DTYPE_FLOAT32 Float32. MORAPI_DTYPE_FLOAT64 Float64. MORAPI_DTYPE_QUINT8 Quint8. MORAPI_DTYPE_QINT8 Qint8. MORAPI_DTYPE_QUINT32 Quint32. MORAPI_DTYPE_QINT32 Qint32. MORAPI_DTYPE_CHAR Char. MORAPI_DTYPE_BOOL Bool. MORAPI_DTYPE_GENERIC Generic (Float32). Function Documentation morapi_DTypeToText() const morapi_Char * morapi_DTypeToText ( morapi_DType self) Converts a data type to a text. morapi_TextToDType() morapi_DType morapi_TextToDType (const morapi_Char * i_str) Converts a text to a data type. morapi_genv() morapi_Env * morapi_genv (void ) Gets the global environment.","title":"core"},{"location":"group__core.html#core","text":"Core module. More...","title":"core"},{"location":"group__core.html#modules","text":"dll env","title":"Modules"},{"location":"group__core.html#typedefs","text":"typedef signed char morapi_Int8 typedef unsigned char morapi_Uint8 typedef signed short int morapi_Int16 typedef unsigned short int morapi_Uint16 typedef signed int morapi_Int32 typedef unsigned int morapi_Uint32 typedef signed long long int morapi_Int64 typedef unsigned long long int morapi_Uint64 typedef void * morapi_ThreadId typedef morapi_Uint16 morapi_Float16 typedef float morapi_Float32 typedef double morapi_Float64 typedef morapi_Uint32 morapi_Bool typedef morapi_Int32 morapi_F32 typedef char morapi_Char typedef morapi_Int32 morapi_Result typedef double morapi_Real","title":"Typedefs"},{"location":"group__core.html#enumerations","text":"enum morapi_DType { MORAPI_DTYPE_NONE = 0x00000000, MORAPI_DTYPE_UINT8 = 0x00000001, MORAPI_DTYPE_UINT16 = 0x00000002, MORAPI_DTYPE_UINT32 = 0x00000004, MORAPI_DTYPE_UINT64 = 0x00000008, MORAPI_DTYPE_INT8 = 0x00000101, MORAPI_DTYPE_INT16 = 0x00000102, MORAPI_DTYPE_INT32 = 0x00000104, MORAPI_DTYPE_INT64 = 0x00000108, MORAPI_DTYPE_FLOAT16 = 0x00001102, MORAPI_DTYPE_FLOAT32 = 0x00001104, MORAPI_DTYPE_FLOAT64 = 0x00001108, MORAPI_DTYPE_QUINT8 = 0x00003001, MORAPI_DTYPE_QINT8 = 0x00003101, MORAPI_DTYPE_QUINT32 = 0x00003004, MORAPI_DTYPE_QINT32 = 0x00003104, MORAPI_DTYPE_CHAR = 0x00010001, MORAPI_DTYPE_BOOL = 0x00010004, MORAPI_DTYPE_GENERIC = 0x00011104 }","title":"Enumerations"},{"location":"group__core.html#functions","text":"const morapi_Char * morapi_DTypeToText ( morapi_DType self) morapi_DType morapi_TextToDType (const morapi_Char *i_str) morapi_Env * morapi_genv (void)","title":"Functions"},{"location":"group__core.html#detailed-description","text":"Core module.","title":"Detailed Description"},{"location":"group__core.html#typedef-documentation","text":"","title":"Typedef Documentation"},{"location":"group__core.html#morapi_int8","text":"typedef signed char morapi_Int8 8 bits signed integer.","title":"morapi_Int8"},{"location":"group__core.html#morapi_uint8","text":"typedef unsigned char morapi_Uint8 8 bits unsigned integer.","title":"morapi_Uint8"},{"location":"group__core.html#morapi_int16","text":"typedef signed short int morapi_Int16 16 bits signed integer.","title":"morapi_Int16"},{"location":"group__core.html#morapi_uint16","text":"typedef unsigned short int morapi_Uint16 16 bits unsigned integer.","title":"morapi_Uint16"},{"location":"group__core.html#morapi_int32","text":"typedef signed int morapi_Int32 32 bits signed integer.","title":"morapi_Int32"},{"location":"group__core.html#morapi_uint32","text":"typedef unsigned int morapi_Uint32 32 bits unsigned integer.","title":"morapi_Uint32"},{"location":"group__core.html#morapi_int64","text":"typedef signed long long int morapi_Int64 64 bits signed integer.","title":"morapi_Int64"},{"location":"group__core.html#morapi_uint64","text":"typedef unsigned long long int morapi_Uint64 64 bits unsigned integer.","title":"morapi_Uint64"},{"location":"group__core.html#morapi_threadid","text":"typedef void* morapi_ThreadId Thread id.","title":"morapi_ThreadId"},{"location":"group__core.html#morapi_float16","text":"typedef morapi_Uint16 morapi_Float16 16 bits floating-point number.","title":"morapi_Float16"},{"location":"group__core.html#morapi_float32","text":"typedef float morapi_Float32 32 bits floating-point number.","title":"morapi_Float32"},{"location":"group__core.html#morapi_float64","text":"typedef double morapi_Float64 64 bits floating point number.","title":"morapi_Float64"},{"location":"group__core.html#morapi_bool","text":"typedef morapi_Uint32 morapi_Bool Boolean. Contant Value MORAPI_TRUE (1) MORAPI_FALSE (0)","title":"morapi_Bool"},{"location":"group__core.html#morapi_f32","text":"typedef morapi_Int32 morapi_F32 17.15 bits fixed-point number.","title":"morapi_F32"},{"location":"group__core.html#morapi_char","text":"typedef char morapi_Char Charactor and string literal.","title":"morapi_Char"},{"location":"group__core.html#morapi_result","text":"typedef morapi_Int32 morapi_Result Result. Every function returns this type. Constant Value Description MORAPI_OK (0x00000000) Completes succesfully. MORAPI_INPROGRESS (0x00000001) In progress. MORAPI_CANCELED (0x00000002) Canceled. MORAPI_ERROR (0x80000000) Fails. MORAPI_ERROR_PARAM (0xC0000000) Parameters are invalid. MORAPI_ERROR_STATE (0xA0000000) An internal state is invalid. MORAPI_ERROR_MALLOC (0x90000000) Memory allocation error. MORAPI_ERROR_IO (0x88000000) Input/output error. MORAPI_ERROR_UNSUPPORTED (0x84000000) Unsupported operation. MORAPI_ERROR_TIMEOUT (0x82000000) Time-out. MORAPI_ERROR_UNKNOWN (0xC0000100) Unknown error.","title":"morapi_Result"},{"location":"group__core.html#morapi_real","text":"typedef double morapi_Real A real number.","title":"morapi_Real"},{"location":"group__core.html#enumeration-type-documentation","text":"","title":"Enumeration Type Documentation"},{"location":"group__core.html#morapi_dtype","text":"enum morapi_DType Data type. Each bit represents the followng. 31-28 27-24 23-20 19-16 15-12 11-8 7-4 3-0 Description xxxx xxxx data size. xxxx unsigned (0) or signed (1). xxxx fixed (0), float (1) or quantized (3). xxxx normal (0) or extended (1). For example, MORAPI_DTYPE_FLOAT16 (= 0x00001102) means data size: 2 signed (1) float (1) normal (0) Enumerator MORAPI_DTYPE_NONE None. MORAPI_DTYPE_UINT8 Uint8. MORAPI_DTYPE_UINT16 Uint16. MORAPI_DTYPE_UINT32 Uint32. MORAPI_DTYPE_UINT64 Uint64. MORAPI_DTYPE_INT8 Int8. MORAPI_DTYPE_INT16 Int16. MORAPI_DTYPE_INT32 Int32. MORAPI_DTYPE_INT64 Int64. MORAPI_DTYPE_FLOAT16 Float16. MORAPI_DTYPE_FLOAT32 Float32. MORAPI_DTYPE_FLOAT64 Float64. MORAPI_DTYPE_QUINT8 Quint8. MORAPI_DTYPE_QINT8 Qint8. MORAPI_DTYPE_QUINT32 Quint32. MORAPI_DTYPE_QINT32 Qint32. MORAPI_DTYPE_CHAR Char. MORAPI_DTYPE_BOOL Bool. MORAPI_DTYPE_GENERIC Generic (Float32).","title":"morapi_DType"},{"location":"group__core.html#function-documentation","text":"","title":"Function Documentation"},{"location":"group__core.html#morapi_dtypetotext","text":"const morapi_Char * morapi_DTypeToText ( morapi_DType self) Converts a data type to a text.","title":"morapi_DTypeToText()"},{"location":"group__core.html#morapi_texttodtype","text":"morapi_DType morapi_TextToDType (const morapi_Char * i_str) Converts a text to a data type.","title":"morapi_TextToDType()"},{"location":"group__core.html#morapi_genv","text":"morapi_Env * morapi_genv (void ) Gets the global environment.","title":"morapi_genv()"},{"location":"group__decomposer.html","text":"decomposer dnn Net decomposer. More... Data Structures struct morapi_DnnNetPartition Functions morapi_Result morapi_Dnn_decompose ( morapi_Dnn *self, morapi_DnnNet *io_net, const morapi_DnnNetPartition *i_partition) Detailed Description Net decomposer. Function Documentation morapi_Dnn_decompose() morapi_Result morapi_Dnn_decompose ( morapi_Dnn * self, morapi_DnnNet * io_net, const morapi_DnnNetPartition * i_partition) Decomposes the net. Parameters self : the dnn module. io_net : the net name to be decomposed. i_partition : partitioning position where dnn is decomposed. test_decompose_api.c .","title":"dnn.decomposer"},{"location":"group__decomposer.html#decomposer","text":"dnn Net decomposer. More...","title":"decomposer"},{"location":"group__decomposer.html#data-structures","text":"struct morapi_DnnNetPartition","title":"Data Structures"},{"location":"group__decomposer.html#functions","text":"morapi_Result morapi_Dnn_decompose ( morapi_Dnn *self, morapi_DnnNet *io_net, const morapi_DnnNetPartition *i_partition)","title":"Functions"},{"location":"group__decomposer.html#detailed-description","text":"Net decomposer.","title":"Detailed Description"},{"location":"group__decomposer.html#function-documentation","text":"","title":"Function Documentation"},{"location":"group__decomposer.html#morapi_dnn_decompose","text":"morapi_Result morapi_Dnn_decompose ( morapi_Dnn * self, morapi_DnnNet * io_net, const morapi_DnnNetPartition * i_partition) Decomposes the net. Parameters self : the dnn module. io_net : the net name to be decomposed. i_partition : partitioning position where dnn is decomposed. test_decompose_api.c .","title":"morapi_Dnn_decompose()"},{"location":"group__device.html","text":"device dnn Device module. More... Data Structures struct morapi_DeviceCB struct morapi_Device struct morapi_DeviceBufCB struct morapi_DeviceBuf Macros #define MORAPI_INSTALL_DEVICE (ENV, NAME, NUM, CB) #define MORAPI_INSTALL_DEVICE_BUF (ENV, NAME, CB) Enumerations enum morapi_DeviceMemoryModel { MORAPI_DEVICE_MEMORY_MODEL_CPU , MORAPI_DEVICE_MEMORY_MODEL_DEDICATED } enum morapi_DeviceThreadModel { MORAPI_DEVICE_THREAD_MODEL_MULTI , MORAPI_DEVICE_THREAD_MODEL_SINGLE } Detailed Description Device module. Macro Definition Documentation MORAPI_INSTALL_DEVICE #define MORAPI_INSTALL_DEVICE( ENV, NAME, NUM, CB) Install callback functions for the device and create them. Parameters ENV : environment. NAME : device name (\"cpu\", \"cuda\", \"opencl\", ..). NUM : the number of devices. CB : callback structure (DeviceCpu, DeviceCuda, DeviceOpenCL, ..). MORAPI_INSTALL_DEVICE_BUF #define MORAPI_INSTALL_DEVICE_BUF( ENV, NAME, CB) Install callback functions for the device buffer. Parameters ENV : environment. NAME : device name (\"cpu\", \"cuda\", \"opencl\", ...). CB : structure for callback functions (DeviceBufCpu, DeviceBufCuda, DeviceBufOpenCL, ...). Enumeration Type Documentation morapi_DeviceMemoryModel enum morapi_DeviceMemoryModel Device memory model. Enumerator MORAPI_DEVICE_MEMORY_MODEL_CPU uses CPU memory. MORAPI_DEVICE_MEMORY_MODEL_DEDICATED has dedicated memory. morapi_DeviceThreadModel enum morapi_DeviceThreadModel Device thread model. Enumerator MORAPI_DEVICE_THREAD_MODEL_MULTI multi-threads. MORAPI_DEVICE_THREAD_MODEL_SINGLE signle thread.","title":"dnn.device"},{"location":"group__device.html#device","text":"dnn Device module. More...","title":"device"},{"location":"group__device.html#data-structures","text":"struct morapi_DeviceCB struct morapi_Device struct morapi_DeviceBufCB struct morapi_DeviceBuf","title":"Data Structures"},{"location":"group__device.html#macros","text":"#define MORAPI_INSTALL_DEVICE (ENV, NAME, NUM, CB) #define MORAPI_INSTALL_DEVICE_BUF (ENV, NAME, CB)","title":"Macros"},{"location":"group__device.html#enumerations","text":"enum morapi_DeviceMemoryModel { MORAPI_DEVICE_MEMORY_MODEL_CPU , MORAPI_DEVICE_MEMORY_MODEL_DEDICATED } enum morapi_DeviceThreadModel { MORAPI_DEVICE_THREAD_MODEL_MULTI , MORAPI_DEVICE_THREAD_MODEL_SINGLE }","title":"Enumerations"},{"location":"group__device.html#detailed-description","text":"Device module.","title":"Detailed Description"},{"location":"group__device.html#macro-definition-documentation","text":"","title":"Macro Definition Documentation"},{"location":"group__device.html#morapi_install_device","text":"#define MORAPI_INSTALL_DEVICE( ENV, NAME, NUM, CB) Install callback functions for the device and create them. Parameters ENV : environment. NAME : device name (\"cpu\", \"cuda\", \"opencl\", ..). NUM : the number of devices. CB : callback structure (DeviceCpu, DeviceCuda, DeviceOpenCL, ..).","title":"MORAPI_INSTALL_DEVICE"},{"location":"group__device.html#morapi_install_device_buf","text":"#define MORAPI_INSTALL_DEVICE_BUF( ENV, NAME, CB) Install callback functions for the device buffer. Parameters ENV : environment. NAME : device name (\"cpu\", \"cuda\", \"opencl\", ...). CB : structure for callback functions (DeviceBufCpu, DeviceBufCuda, DeviceBufOpenCL, ...).","title":"MORAPI_INSTALL_DEVICE_BUF"},{"location":"group__device.html#enumeration-type-documentation","text":"","title":"Enumeration Type Documentation"},{"location":"group__device.html#morapi_devicememorymodel","text":"enum morapi_DeviceMemoryModel Device memory model. Enumerator MORAPI_DEVICE_MEMORY_MODEL_CPU uses CPU memory. MORAPI_DEVICE_MEMORY_MODEL_DEDICATED has dedicated memory.","title":"morapi_DeviceMemoryModel"},{"location":"group__device.html#morapi_devicethreadmodel","text":"enum morapi_DeviceThreadModel Device thread model. Enumerator MORAPI_DEVICE_THREAD_MODEL_MULTI multi-threads. MORAPI_DEVICE_THREAD_MODEL_SINGLE signle thread.","title":"morapi_DeviceThreadModel"},{"location":"group__dll.html","text":"dll core Dynamic linked library. More... Data Structures struct morapi_Dll Detailed Description Dynamic linked library.","title":"core.dll"},{"location":"group__dll.html#dll","text":"core Dynamic linked library. More...","title":"dll"},{"location":"group__dll.html#data-structures","text":"struct morapi_Dll","title":"Data Structures"},{"location":"group__dll.html#detailed-description","text":"Dynamic linked library.","title":"Detailed Description"},{"location":"group__dnn.html","text":"dnn Dnn (deep neural network) module. More... Modules binary decomposer device param prof tensor Data Structures struct morapi_DnnForwardArg struct morapi_DnnForward struct morapi_DnnRoutineCB struct morapi_DnnRoutine struct morapi_DnnLayerCB struct morapi_DnnLayer struct morapi_DnnNet struct morapi_Dnn Macros #define MORAPI_INSTALL_DNN_ROUTINE (ENV, LAYER, ROUTINE, CB) #define MORAPI_INSTALL_DNN_LAYER (ENV, LAYER, CB) Enumerations enum morapi_DnnReduce enum morapi_DnnResizeMode { MORAPI_DNN_RESIZE_MODE_BILINEAR , MORAPI_DNN_RESIZE_MODE_NEAREST } enum morapi_DnnRoundMode enum morapi_DnnChannel { MORAPI_DNN_CHANNEL_NONE , MORAPI_DNN_CHANNEL_FIRST , MORAPI_DNN_CHANNEL_LAST } enum morapi_DnnRoutineLimit { MORAPI_DNN_ROUTINE_LIMIT_NONE , MORAPI_DNN_ROUTINE_LIMIT_TO_PARENT_SCHEMA , MORAPI_DNN_ROUTINE_LIMIT_TO_SCHEMA , MORAPI_DNN_ROUTINE_LIMIT_TO_SPECIFIED } enum morapi_DnnLayerState { MORAPI_DNN_LAYER_STATE_NONE , MORAPI_DNN_LAYER_STATE_INITIALIZED , MORAPI_DNN_LAYER_STATE_PARSED , MORAPI_DNN_LAYER_STATE_ROUTINIZED , MORAPI_DNN_LAYER_STATE_DEPLOYED , MORAPI_DNN_LAYER_STATE_PRECOMPILED , MORAPI_DNN_LAYER_STATE_COMPILED } enum morapi_DnnState { MORAPI_DNN_STATE_NONE , MORAPI_DNN_STATE_INITIALIZED , MORAPI_DNN_STATE_PARSED , MORAPI_DNN_STATE_COMPILED } Functions morapi_Result morapi_Dnn_static_calcTopNIndices ( morapi_Int32 *o_indices, morapi_Int32 i_num_indices, morapi_Float32 *i_scores, morapi_Int32 i_num_scores) const morapi_Char * morapi_Dnn_static_getVersion (void) const morapi_Char * morapi_Dnn_static_getDir ( morapi_Env *env) morapi_Int32 morapi_Dnn_static_getPluginNum ( morapi_Env *env) const morapi_Char ** morapi_Dnn_static_getPluginNames ( morapi_Env *env) const morapi_Char * morapi_Dnn_static_getPluginDescription ( morapi_Env *env, const morapi_Char *i_plugin_name) Detailed Description Dnn (deep neural network) module. The fast, small, easy, portable and secure NN inference engine. Macro Definition Documentation MORAPI_INSTALL_DNN_ROUTINE #define MORAPI_INSTALL_DNN_ROUTINE( ENV, LAYER, ROUTINE, CB) Installs callback functions for a dnn routine. Parameters ENV : environment. LAYER : layer type for the routine (\"conv2\", \"add\", \"madd\", ...). ROUTINE : routine descriptor (\"cpu\", \"cpu:qint8\", \"cpu/avx\", ...). CB : structure for callback functions (DnnRoutineConv2Cpu, DnnRoutineAddCpuQint8, DnnRoutineMaddCpuAvx, ...). MORAPI_INSTALL_DNN_LAYER #define MORAPI_INSTALL_DNN_LAYER( ENV, LAYER, CB) Installs callback functions for a dnn layer. Parameters ENV : environment. LAYER : layer type (\"conv2\", \"add\", \"madd\", ...). CB : structure for callback functions (DnnLayerConv2, DnnLayerAdd, DnnLayerMadd, ...). Enumeration Type Documentation morapi_DnnReduce enum morapi_DnnReduce Reduce mode. morapi_DnnResizeMode enum morapi_DnnResizeMode Resize mode. Enumerator MORAPI_DNN_RESIZE_MODE_BILINEAR bilinear. MORAPI_DNN_RESIZE_MODE_NEAREST nearest. morapi_DnnRoundMode enum morapi_DnnRoundMode Round mode. morapi_DnnChannel enum morapi_DnnChannel Enumeration of channel-positions. Enumerator MORAPI_DNN_CHANNEL_NONE No channel. MORAPI_DNN_CHANNEL_FIRST Channel-first. MORAPI_DNN_CHANNEL_LAST Channel-last. morapi_DnnRoutineLimit enum morapi_DnnRoutineLimit Limitation for routine selection. Enumerator MORAPI_DNN_ROUTINE_LIMIT_NONE None. MORAPI_DNN_ROUTINE_LIMIT_TO_PARENT_SCHEMA Limit to parent schema. MORAPI_DNN_ROUTINE_LIMIT_TO_SCHEMA Limit to schema. MORAPI_DNN_ROUTINE_LIMIT_TO_SPECIFIED Limit to specified descriptor. morapi_DnnLayerState enum morapi_DnnLayerState State of dnn layer. Enumerator MORAPI_DNN_LAYER_STATE_NONE None. MORAPI_DNN_LAYER_STATE_INITIALIZED Initialized. MORAPI_DNN_LAYER_STATE_PARSED Parsed. MORAPI_DNN_LAYER_STATE_ROUTINIZED Routinized. MORAPI_DNN_LAYER_STATE_DEPLOYED Deployed. MORAPI_DNN_LAYER_STATE_PRECOMPILED Precompiled. MORAPI_DNN_LAYER_STATE_COMPILED Compiled. morapi_DnnState enum morapi_DnnState State of dnn. See also morapi_Dnn_initialize() , morapi_Dnn_parse() , morapi_Dnn_compile() , morapi_Dnn_recycle() Enumerator MORAPI_DNN_STATE_NONE None. MORAPI_DNN_STATE_INITIALIZED Initialized. MORAPI_DNN_STATE_PARSED Parsed. MORAPI_DNN_STATE_COMPILED Compiled. Function Documentation morapi_Dnn_static_calcTopNIndices() morapi_Result morapi_Dnn_static_calcTopNIndices ( morapi_Int32 * o_indices, morapi_Int32 i_num_indices, morapi_Float32 * i_scores, morapi_Int32 i_num_scores) Calculates top-N indices. Parameters o_indices : output indices i_num_indices : N count i_scores : input scores i_num_scores : input score count morapi_Dnn_static_getVersion() const morapi_Char * morapi_Dnn_static_getVersion (void ) Gets the module version. test_dnn_api.c . morapi_Dnn_static_getDir() const morapi_Char * morapi_Dnn_static_getDir ( morapi_Env * env) Gets the dnn directory. Parameters env : environment morapi_Dnn_static_getPluginNum() morapi_Int32 morapi_Dnn_static_getPluginNum ( morapi_Env * env) Gets the number of plugins. Parameters env : environment morapi_Dnn_static_getPluginNames() const morapi_Char ** morapi_Dnn_static_getPluginNames ( morapi_Env * env) Gets plugin names. Parameters env : environment morapi_Dnn_static_getPluginDescription() const morapi_Char * morapi_Dnn_static_getPluginDescription ( morapi_Env * env, const morapi_Char * i_plugin_name) Gets a plugin description. Parameters env : environment i_plugin_name : plugin name","title":"dnn"},{"location":"group__dnn.html#dnn","text":"Dnn (deep neural network) module. More...","title":"dnn"},{"location":"group__dnn.html#modules","text":"binary decomposer device param prof tensor","title":"Modules"},{"location":"group__dnn.html#data-structures","text":"struct morapi_DnnForwardArg struct morapi_DnnForward struct morapi_DnnRoutineCB struct morapi_DnnRoutine struct morapi_DnnLayerCB struct morapi_DnnLayer struct morapi_DnnNet struct morapi_Dnn","title":"Data Structures"},{"location":"group__dnn.html#macros","text":"#define MORAPI_INSTALL_DNN_ROUTINE (ENV, LAYER, ROUTINE, CB) #define MORAPI_INSTALL_DNN_LAYER (ENV, LAYER, CB)","title":"Macros"},{"location":"group__dnn.html#enumerations","text":"enum morapi_DnnReduce enum morapi_DnnResizeMode { MORAPI_DNN_RESIZE_MODE_BILINEAR , MORAPI_DNN_RESIZE_MODE_NEAREST } enum morapi_DnnRoundMode enum morapi_DnnChannel { MORAPI_DNN_CHANNEL_NONE , MORAPI_DNN_CHANNEL_FIRST , MORAPI_DNN_CHANNEL_LAST } enum morapi_DnnRoutineLimit { MORAPI_DNN_ROUTINE_LIMIT_NONE , MORAPI_DNN_ROUTINE_LIMIT_TO_PARENT_SCHEMA , MORAPI_DNN_ROUTINE_LIMIT_TO_SCHEMA , MORAPI_DNN_ROUTINE_LIMIT_TO_SPECIFIED } enum morapi_DnnLayerState { MORAPI_DNN_LAYER_STATE_NONE , MORAPI_DNN_LAYER_STATE_INITIALIZED , MORAPI_DNN_LAYER_STATE_PARSED , MORAPI_DNN_LAYER_STATE_ROUTINIZED , MORAPI_DNN_LAYER_STATE_DEPLOYED , MORAPI_DNN_LAYER_STATE_PRECOMPILED , MORAPI_DNN_LAYER_STATE_COMPILED } enum morapi_DnnState { MORAPI_DNN_STATE_NONE , MORAPI_DNN_STATE_INITIALIZED , MORAPI_DNN_STATE_PARSED , MORAPI_DNN_STATE_COMPILED }","title":"Enumerations"},{"location":"group__dnn.html#functions","text":"morapi_Result morapi_Dnn_static_calcTopNIndices ( morapi_Int32 *o_indices, morapi_Int32 i_num_indices, morapi_Float32 *i_scores, morapi_Int32 i_num_scores) const morapi_Char * morapi_Dnn_static_getVersion (void) const morapi_Char * morapi_Dnn_static_getDir ( morapi_Env *env) morapi_Int32 morapi_Dnn_static_getPluginNum ( morapi_Env *env) const morapi_Char ** morapi_Dnn_static_getPluginNames ( morapi_Env *env) const morapi_Char * morapi_Dnn_static_getPluginDescription ( morapi_Env *env, const morapi_Char *i_plugin_name)","title":"Functions"},{"location":"group__dnn.html#detailed-description","text":"Dnn (deep neural network) module. The fast, small, easy, portable and secure NN inference engine.","title":"Detailed Description"},{"location":"group__dnn.html#macro-definition-documentation","text":"","title":"Macro Definition Documentation"},{"location":"group__dnn.html#morapi_install_dnn_routine","text":"#define MORAPI_INSTALL_DNN_ROUTINE( ENV, LAYER, ROUTINE, CB) Installs callback functions for a dnn routine. Parameters ENV : environment. LAYER : layer type for the routine (\"conv2\", \"add\", \"madd\", ...). ROUTINE : routine descriptor (\"cpu\", \"cpu:qint8\", \"cpu/avx\", ...). CB : structure for callback functions (DnnRoutineConv2Cpu, DnnRoutineAddCpuQint8, DnnRoutineMaddCpuAvx, ...).","title":"MORAPI_INSTALL_DNN_ROUTINE"},{"location":"group__dnn.html#morapi_install_dnn_layer","text":"#define MORAPI_INSTALL_DNN_LAYER( ENV, LAYER, CB) Installs callback functions for a dnn layer. Parameters ENV : environment. LAYER : layer type (\"conv2\", \"add\", \"madd\", ...). CB : structure for callback functions (DnnLayerConv2, DnnLayerAdd, DnnLayerMadd, ...).","title":"MORAPI_INSTALL_DNN_LAYER"},{"location":"group__dnn.html#enumeration-type-documentation","text":"","title":"Enumeration Type Documentation"},{"location":"group__dnn.html#morapi_dnnreduce","text":"enum morapi_DnnReduce Reduce mode.","title":"morapi_DnnReduce"},{"location":"group__dnn.html#morapi_dnnresizemode","text":"enum morapi_DnnResizeMode Resize mode. Enumerator MORAPI_DNN_RESIZE_MODE_BILINEAR bilinear. MORAPI_DNN_RESIZE_MODE_NEAREST nearest.","title":"morapi_DnnResizeMode"},{"location":"group__dnn.html#morapi_dnnroundmode","text":"enum morapi_DnnRoundMode Round mode.","title":"morapi_DnnRoundMode"},{"location":"group__dnn.html#morapi_dnnchannel","text":"enum morapi_DnnChannel Enumeration of channel-positions. Enumerator MORAPI_DNN_CHANNEL_NONE No channel. MORAPI_DNN_CHANNEL_FIRST Channel-first. MORAPI_DNN_CHANNEL_LAST Channel-last.","title":"morapi_DnnChannel"},{"location":"group__dnn.html#morapi_dnnroutinelimit","text":"enum morapi_DnnRoutineLimit Limitation for routine selection. Enumerator MORAPI_DNN_ROUTINE_LIMIT_NONE None. MORAPI_DNN_ROUTINE_LIMIT_TO_PARENT_SCHEMA Limit to parent schema. MORAPI_DNN_ROUTINE_LIMIT_TO_SCHEMA Limit to schema. MORAPI_DNN_ROUTINE_LIMIT_TO_SPECIFIED Limit to specified descriptor.","title":"morapi_DnnRoutineLimit"},{"location":"group__dnn.html#morapi_dnnlayerstate","text":"enum morapi_DnnLayerState State of dnn layer. Enumerator MORAPI_DNN_LAYER_STATE_NONE None. MORAPI_DNN_LAYER_STATE_INITIALIZED Initialized. MORAPI_DNN_LAYER_STATE_PARSED Parsed. MORAPI_DNN_LAYER_STATE_ROUTINIZED Routinized. MORAPI_DNN_LAYER_STATE_DEPLOYED Deployed. MORAPI_DNN_LAYER_STATE_PRECOMPILED Precompiled. MORAPI_DNN_LAYER_STATE_COMPILED Compiled.","title":"morapi_DnnLayerState"},{"location":"group__dnn.html#morapi_dnnstate","text":"enum morapi_DnnState State of dnn. See also morapi_Dnn_initialize() , morapi_Dnn_parse() , morapi_Dnn_compile() , morapi_Dnn_recycle() Enumerator MORAPI_DNN_STATE_NONE None. MORAPI_DNN_STATE_INITIALIZED Initialized. MORAPI_DNN_STATE_PARSED Parsed. MORAPI_DNN_STATE_COMPILED Compiled.","title":"morapi_DnnState"},{"location":"group__dnn.html#function-documentation","text":"","title":"Function Documentation"},{"location":"group__dnn.html#morapi_dnn_static_calctopnindices","text":"morapi_Result morapi_Dnn_static_calcTopNIndices ( morapi_Int32 * o_indices, morapi_Int32 i_num_indices, morapi_Float32 * i_scores, morapi_Int32 i_num_scores) Calculates top-N indices. Parameters o_indices : output indices i_num_indices : N count i_scores : input scores i_num_scores : input score count","title":"morapi_Dnn_static_calcTopNIndices()"},{"location":"group__dnn.html#morapi_dnn_static_getversion","text":"const morapi_Char * morapi_Dnn_static_getVersion (void ) Gets the module version. test_dnn_api.c .","title":"morapi_Dnn_static_getVersion()"},{"location":"group__dnn.html#morapi_dnn_static_getdir","text":"const morapi_Char * morapi_Dnn_static_getDir ( morapi_Env * env) Gets the dnn directory. Parameters env : environment","title":"morapi_Dnn_static_getDir()"},{"location":"group__dnn.html#morapi_dnn_static_getpluginnum","text":"morapi_Int32 morapi_Dnn_static_getPluginNum ( morapi_Env * env) Gets the number of plugins. Parameters env : environment","title":"morapi_Dnn_static_getPluginNum()"},{"location":"group__dnn.html#morapi_dnn_static_getpluginnames","text":"const morapi_Char ** morapi_Dnn_static_getPluginNames ( morapi_Env * env) Gets plugin names. Parameters env : environment","title":"morapi_Dnn_static_getPluginNames()"},{"location":"group__dnn.html#morapi_dnn_static_getplugindescription","text":"const morapi_Char * morapi_Dnn_static_getPluginDescription ( morapi_Env * env, const morapi_Char * i_plugin_name) Gets a plugin description. Parameters env : environment i_plugin_name : plugin name","title":"morapi_Dnn_static_getPluginDescription()"},{"location":"group__env.html","text":"env core Environment. More... Data Structures struct morapi_Env Typedefs typedef morapi_Result (* morapi_LogFunc ) (void *, const morapi_Char *,...) typedef morapi_Result (* morapi_FlushFunc ) (void *) Enumerations enum morapi_LogLevel { MORAPI_LOG_LEVEL_DEBUG = 0, MORAPI_LOG_LEVEL_INFO = 1, MORAPI_LOG_LEVEL_WARN = 2, MORAPI_LOG_LEVEL_ERROR = 3, MORAPI_LOG_LEVEL_MSG = 4 } Memory allocation #define MORAPI_SAFE_FREE (ENV, P) Logging #define MORAPI_LOG_DEBUG (ENV, FORMAT, ...) #define MORAPI_LOG_INFO (ENV, FORMAT, ...) #define MORAPI_LOG_WARN (ENV, FORMAT, ...) #define MORAPI_LOG_ERROR (ENV, FORMAT, ...) #define MORAPI_LOG_ERROR_IF (ENV, COND, STATEMENT) void ( morapi_Env *self, const morapi_Char *i_module, const morapi_Char *i_fmt,...) void ( morapi_Env *self, const morapi_Char *i_module, const morapi_Char *i_fmt,...) Detailed Description Environment. Macro Definition Documentation MORAPI_SAFE_FREE #define MORAPI_SAFE_FREE( ENV, P) Deallocates P if it is not NULL, and then P is set NULL. Parameters ENV : the environment (morapi_Env*). P : the pointer to deallocate (void*). MORAPI_LOG_DEBUG #define MORAPI_LOG_DEBUG( ENV, FORMAT, ...) Logs a debug message if MORAPI_ENABLE_LOG_DEBUG is defined. MORAPI_LOG_INFO #define MORAPI_LOG_INFO( ENV, FORMAT, ...) Logs an information message. MORAPI_LOG_WARN #define MORAPI_LOG_WARN( ENV, FORMAT, ...) Logs a warning message. MORAPI_LOG_ERROR #define MORAPI_LOG_ERROR( ENV, FORMAT, ...) Logs an error message. MORAPI_LOG_ERROR_IF #define MORAPI_LOG_ERROR_IF( ENV, COND, STATEMENT) If COND is true, executes STATEMENT and logs an error message. Typedef Documentation morapi_LogFunc typedef morapi_Result (* morapi_LogFunc) (void *, const morapi_Char *,...) Log function. Compatible with fprintf(). test_decompose_api.c , and test_prof_api.c . morapi_FlushFunc typedef morapi_Result (* morapi_FlushFunc) (void *) Message flush function compatible with fflush(). test_decompose_api.c , and test_prof_api.c . Enumeration Type Documentation morapi_LogLevel enum morapi_LogLevel Log level. Enumerator MORAPI_LOG_LEVEL_DEBUG debug log. MORAPI_LOG_LEVEL_INFO information. MORAPI_LOG_LEVEL_WARN warning. MORAPI_LOG_LEVEL_ERROR error log . MORAPI_LOG_LEVEL_MSG message log (no header).","title":"core.env"},{"location":"group__env.html#env","text":"core Environment. More...","title":"env"},{"location":"group__env.html#data-structures","text":"struct morapi_Env","title":"Data Structures"},{"location":"group__env.html#typedefs","text":"typedef morapi_Result (* morapi_LogFunc ) (void *, const morapi_Char *,...) typedef morapi_Result (* morapi_FlushFunc ) (void *)","title":"Typedefs"},{"location":"group__env.html#enumerations","text":"enum morapi_LogLevel { MORAPI_LOG_LEVEL_DEBUG = 0, MORAPI_LOG_LEVEL_INFO = 1, MORAPI_LOG_LEVEL_WARN = 2, MORAPI_LOG_LEVEL_ERROR = 3, MORAPI_LOG_LEVEL_MSG = 4 }","title":"Enumerations"},{"location":"group__env.html#memory-allocation","text":"#define MORAPI_SAFE_FREE (ENV, P)","title":"Memory allocation"},{"location":"group__env.html#logging","text":"#define MORAPI_LOG_DEBUG (ENV, FORMAT, ...) #define MORAPI_LOG_INFO (ENV, FORMAT, ...) #define MORAPI_LOG_WARN (ENV, FORMAT, ...) #define MORAPI_LOG_ERROR (ENV, FORMAT, ...) #define MORAPI_LOG_ERROR_IF (ENV, COND, STATEMENT) void ( morapi_Env *self, const morapi_Char *i_module, const morapi_Char *i_fmt,...) void ( morapi_Env *self, const morapi_Char *i_module, const morapi_Char *i_fmt,...)","title":"Logging"},{"location":"group__env.html#detailed-description","text":"Environment.","title":"Detailed Description"},{"location":"group__env.html#macro-definition-documentation","text":"","title":"Macro Definition Documentation"},{"location":"group__env.html#morapi_safe_free","text":"#define MORAPI_SAFE_FREE( ENV, P) Deallocates P if it is not NULL, and then P is set NULL. Parameters ENV : the environment (morapi_Env*). P : the pointer to deallocate (void*).","title":"MORAPI_SAFE_FREE"},{"location":"group__env.html#morapi_log_debug","text":"#define MORAPI_LOG_DEBUG( ENV, FORMAT, ...) Logs a debug message if MORAPI_ENABLE_LOG_DEBUG is defined.","title":"MORAPI_LOG_DEBUG"},{"location":"group__env.html#morapi_log_info","text":"#define MORAPI_LOG_INFO( ENV, FORMAT, ...) Logs an information message.","title":"MORAPI_LOG_INFO"},{"location":"group__env.html#morapi_log_warn","text":"#define MORAPI_LOG_WARN( ENV, FORMAT, ...) Logs a warning message.","title":"MORAPI_LOG_WARN"},{"location":"group__env.html#morapi_log_error","text":"#define MORAPI_LOG_ERROR( ENV, FORMAT, ...) Logs an error message.","title":"MORAPI_LOG_ERROR"},{"location":"group__env.html#morapi_log_error_if","text":"#define MORAPI_LOG_ERROR_IF( ENV, COND, STATEMENT) If COND is true, executes STATEMENT and logs an error message.","title":"MORAPI_LOG_ERROR_IF"},{"location":"group__env.html#typedef-documentation","text":"","title":"Typedef Documentation"},{"location":"group__env.html#morapi_logfunc","text":"typedef morapi_Result (* morapi_LogFunc) (void *, const morapi_Char *,...) Log function. Compatible with fprintf(). test_decompose_api.c , and test_prof_api.c .","title":"morapi_LogFunc"},{"location":"group__env.html#morapi_flushfunc","text":"typedef morapi_Result (* morapi_FlushFunc) (void *) Message flush function compatible with fflush(). test_decompose_api.c , and test_prof_api.c .","title":"morapi_FlushFunc"},{"location":"group__env.html#enumeration-type-documentation","text":"","title":"Enumeration Type Documentation"},{"location":"group__env.html#morapi_loglevel","text":"enum morapi_LogLevel Log level. Enumerator MORAPI_LOG_LEVEL_DEBUG debug log. MORAPI_LOG_LEVEL_INFO information. MORAPI_LOG_LEVEL_WARN warning. MORAPI_LOG_LEVEL_ERROR error log . MORAPI_LOG_LEVEL_MSG message log (no header).","title":"morapi_LogLevel"},{"location":"group__image.html","text":"image Image module. More... Data Structures struct morapi_ImagePlane struct morapi_Image Macros #define MORAPI_IMAGE_PLANE_NUM (4) Enumerations enum morapi_ImageFormat { , MORAPI_IMAGE_FORMAT_UINT8 = 0x110001B0, MORAPI_IMAGE_FORMAT_INT8 = 0x110001B1, MORAPI_IMAGE_FORMAT_UINT16 = 0x120001B0, MORAPI_IMAGE_FORMAT_INT16 = 0x120001B1, MORAPI_IMAGE_FORMAT_UINT32 = 0x140001B0, MORAPI_IMAGE_FORMAT_INT32 = 0x140001B1, MORAPI_IMAGE_FORMAT_UINT64 = 0x180001B0, MORAPI_IMAGE_FORMAT_INT64 = 0x180001B1, MORAPI_IMAGE_FORMAT_RGB565 = 0x220001B0, MORAPI_IMAGE_FORMAT_BGR565 = 0x22000930, MORAPI_IMAGE_FORMAT_RGB8 = 0x230001B0, MORAPI_IMAGE_FORMAT_BGR8 = 0x23000930, MORAPI_IMAGE_FORMAT_RGB16 = 0x260001B0, MORAPI_IMAGE_FORMAT_BGR16 = 0x26000930, MORAPI_IMAGE_FORMAT_RGBA8 = 0x340001B0, MORAPI_IMAGE_FORMAT_BGRA8 = 0x34000930, MORAPI_IMAGE_FORMAT_ARGB8 = 0x34000C60, MORAPI_IMAGE_FORMAT_ABGR8 = 0x34000E40, MORAPI_IMAGE_FORMAT_YUV444_YUV = 0x430001B0, MORAPI_IMAGE_FORMAT_YUV444_YVU = 0x43000270, MORAPI_IMAGE_FORMAT_YUV444_UYV = 0x430004B0, MORAPI_IMAGE_FORMAT_YUV444_UVY = 0x43000630, MORAPI_IMAGE_FORMAT_YUV444_VYU = 0x43000870, MORAPI_IMAGE_FORMAT_YUV444_VUY = 0x43000930, MORAPI_IMAGE_FORMAT_YUV422_YYUV = 0x420001B0, MORAPI_IMAGE_FORMAT_YUV422_YYVU = 0x420001C0, MORAPI_IMAGE_FORMAT_YUV422_YUYV = 0x42000270, MORAPI_IMAGE_FORMAT_YUV422_YUVY = 0x420002D0, MORAPI_IMAGE_FORMAT_YUV422_YVYU = 0x42000360, MORAPI_IMAGE_FORMAT_YUV422_YVUY = 0x42000390, MORAPI_IMAGE_FORMAT_YUV422_UYYV = 0x42000870, MORAPI_IMAGE_FORMAT_YUV422_UYVY = 0x420008D0, MORAPI_IMAGE_FORMAT_YUV422_UVYY = 0x42000B10, MORAPI_IMAGE_FORMAT_YUV422_VYYU = 0x42000C60, MORAPI_IMAGE_FORMAT_YUV422_VYUY = 0x42000C90, MORAPI_IMAGE_FORMAT_YUV422_VUYY = 0x42000E10, MORAPI_IMAGE_FORMAT_YUV444_SEMIPLANAR_UV = 0x412001B0, MORAPI_IMAGE_FORMAT_YUV444_SEMIPLANAR_VU = 0x41200270, MORAPI_IMAGE_FORMAT_YUV422_SEMIPLANAR_UV = 0x412001B1, MORAPI_IMAGE_FORMAT_YUV422_SEMIPLANAR_VU = 0x41200271, MORAPI_IMAGE_FORMAT_YUV420_SEMIPLANAR_UV = 0x412001B2, MORAPI_IMAGE_FORMAT_YUV420_SEMIPLANAR_VU = 0x41200272, MORAPI_IMAGE_FORMAT_YUV444_PLANAR = 0x411101B0, MORAPI_IMAGE_FORMAT_YUV422_PLANAR = 0x411101B1, MORAPI_IMAGE_FORMAT_YUV420_PLANAR = 0x411101B2, MORAPI_IMAGE_FORMAT_BAYER8_GRBG = 0x510004D0, MORAPI_IMAGE_FORMAT_BAYER8_GBRG = 0x51000720, MORAPI_IMAGE_FORMAT_BAYER8_RGGB = 0x510001B0, MORAPI_IMAGE_FORMAT_BAYER8_BGGR = 0x51000D80, MORAPI_IMAGE_FORMAT_BAYER16_GRBG = 0x520004D0, MORAPI_IMAGE_FORMAT_BAYER16_GBRG = 0x52000720, MORAPI_IMAGE_FORMAT_BAYER16_RGGB = 0x520001B0, MORAPI_IMAGE_FORMAT_BAYER16_BGGR = 0x52000D80 } Detailed Description Image module. Macro Definition Documentation MORAPI_IMAGE_PLANE_NUM #define MORAPI_IMAGE_PLANE_NUM (4) Max of plane count. Enumeration Type Documentation morapi_ImageFormat enum morapi_ImageFormat Image format. MSB <--------------------------\u2014> LSB 1111 0000 0000 0000 0000 0000 0000 0000 [Color space] 0(None), 1(Gray), 2(RGB), 3(RGBA), 4(YUV), 5(Bayer) 0000 1111 0000 0000 0000 0000 0000 0000 [Pixel size in Plane 0.] 0000 0000 1111 0000 0000 0000 0000 0000 [Pixel size in Plane 1.] 0000 0000 0000 1111 0000 0000 0000 0000 [Pixel size in Plane 2.] 0000 0000 0000 0000 1111 0000 0000 0000 [Pixel size in Plane 3.] 0000 0000 0000 0000 0000 1111 1111 0000 [The order of pixel components.] 0000 0000 0000 0000 0000 0000 0000 1111 [Optional bits] Enumerator MORAPI_IMAGE_FORMAT_UINT8 Undefined. Unsigned 8 bits grayscale. G(00) X(01) X(10) X(11). MORAPI_IMAGE_FORMAT_INT8 Signed 8 bits grayscale. G(00) X(01) X(10) X(11). MORAPI_IMAGE_FORMAT_UINT16 Unsigned 16 bits grayscale. G(00) X(01) X(10) X(11). MORAPI_IMAGE_FORMAT_INT16 Signed 16 bits grayscale. G(00) X(01) X(10) X(11). MORAPI_IMAGE_FORMAT_UINT32 Unsigned 32 bits grayscale. G(00) X(01) X(10) X(11). MORAPI_IMAGE_FORMAT_INT32 Singed 32 bits grayscale. G(00) X(01) X(10) X(11). MORAPI_IMAGE_FORMAT_UINT64 Unsigned 64 bits grayscale. G(00) X(01) X(10) X(11). MORAPI_IMAGE_FORMAT_INT64 Singed 64 bits grayscale. G(00) X(01) X(10) X(11). MORAPI_IMAGE_FORMAT_RGB565 RGB565. The order is RGB. R(00) G(01) B(10) X(11). MORAPI_IMAGE_FORMAT_BGR565 RGB565. The order is BGR. B(10) G(01) R(00) X(11). MORAPI_IMAGE_FORMAT_RGB8 8 bits RGB. The order is RGB. R(00) G(01) B(10) X(11). MORAPI_IMAGE_FORMAT_BGR8 8 bits RGB. The order is BGR. B(10) G(01) R(00) X(11). MORAPI_IMAGE_FORMAT_RGB16 16 bits RGB. The order is RGB. R(00) G(01) B(10) X(11). MORAPI_IMAGE_FORMAT_BGR16 16 bits RGB. The order is BGR. B(10) G(01) R(00) X(11). MORAPI_IMAGE_FORMAT_RGBA8 8 bits RGBA. The order is RGBA. R(00) G(01) B(10) A(11). MORAPI_IMAGE_FORMAT_BGRA8 8 bits RGBA. The order is BGRA. B(10) G(01) R(00) A(11). MORAPI_IMAGE_FORMAT_ARGB8 8 bits RGBA. The order is ARGB. A(11) R(00) G(01) B(10). MORAPI_IMAGE_FORMAT_ABGR8 8 bits RGBA. The order is ABGR. A(11) B(10) G(01) R(00). MORAPI_IMAGE_FORMAT_YUV444_YUV 8 bits YUV444. The order is YUV. Y(00) U(01) V(10) X(11). MORAPI_IMAGE_FORMAT_YUV444_YVU 8 bits YUV444. The order is YVU. Y(00) V(10) U(01) X(11). MORAPI_IMAGE_FORMAT_YUV444_UYV 8 bits YUV444. The order is UYV. U(01) Y(00) V(10) X(11). MORAPI_IMAGE_FORMAT_YUV444_UVY 8 bits YUV444. The order is UVY. U(01) V(10) Y(00) X(11). MORAPI_IMAGE_FORMAT_YUV444_VYU 8 bits YUV444. The order is VYU. V(10) Y(00) U(01) X(11). MORAPI_IMAGE_FORMAT_YUV444_VUY 8 bits YUV444. The order is YUV. V(10) U(01) Y(00) X(11). MORAPI_IMAGE_FORMAT_YUV422_YYUV 8 bits YUV422. The order is YYUV. Y0(00) Y1(01) UU(10) VV(11). MORAPI_IMAGE_FORMAT_YUV422_YYVU 8 bits YUV422. The order is YYVU. Y0(00) Y1(01) VV(11) UU(10). MORAPI_IMAGE_FORMAT_YUV422_YUYV 8 bits YUV422. The order is YUYV. Y0(00) UU(10) Y1(01) VV(11). MORAPI_IMAGE_FORMAT_YUV422_YUVY 8 bits YUV422. The order is YUVY. Y0(00) UU(10) VV(11) Y1(01). MORAPI_IMAGE_FORMAT_YUV422_YVYU 8 bits YUV422. The order is YVYU. Y0(00) VV(11) Y1(01) UU(10). MORAPI_IMAGE_FORMAT_YUV422_YVUY 8 bits YUV422. The order is YVUY. Y0(00) VV(11) UU(10) Y1(01). MORAPI_IMAGE_FORMAT_YUV422_UYYV 8 bits YUV422. The order is UYYV. UU(10) Y0(00) Y1(01) VV(11). MORAPI_IMAGE_FORMAT_YUV422_UYVY 8 bits YUV422. The order is UYVY. UU(10) Y0(00) VV(11) Y1(01). MORAPI_IMAGE_FORMAT_YUV422_UVYY 8 bits YUV422. The order is UVYY. UU(10) VV(11) Y0(00) Y1(01). MORAPI_IMAGE_FORMAT_YUV422_VYYU 8 bits YUV422. The order is VYYU. VV(11) Y0(00) Y1(01) UU(10). MORAPI_IMAGE_FORMAT_YUV422_VYUY 8 bits YUV422. The order is VYUY. VV(11) Y0(00) UU(10) Y1(01). MORAPI_IMAGE_FORMAT_YUV422_VUYY 8 bits YUV422. The order is VUYY. VV(11) UU(10) Y0(00) Y1(01). MORAPI_IMAGE_FORMAT_YUV444_SEMIPLANAR_UV 8 bits YUV444 semiplanar. The order is UV. Y(00) U(01) V(10) X(11). MORAPI_IMAGE_FORMAT_YUV444_SEMIPLANAR_VU 8 bits YUV444 semiplanar. The order is VU. Y(00) V(10) U(01) X(11). MORAPI_IMAGE_FORMAT_YUV422_SEMIPLANAR_UV 8 bits YUV422 semiplanar. The order is UV. Y(00) U(01) V(10) X(11). MORAPI_IMAGE_FORMAT_YUV422_SEMIPLANAR_VU 8 bits YUV422 semiplanar. The order is VU. Y(00) V(10) U(01) X(11). MORAPI_IMAGE_FORMAT_YUV420_SEMIPLANAR_UV 8 bits YUV420 semiplanar. The order is UV. Y(00) U(01) V(10) X(11). MORAPI_IMAGE_FORMAT_YUV420_SEMIPLANAR_VU 8 bits YUV420 semiplanar. The order is VU. Y(00) V(10) U(01) X(11). MORAPI_IMAGE_FORMAT_YUV444_PLANAR 8 bits YUV444 planar. Y(00) U(01) V(10) X(11). MORAPI_IMAGE_FORMAT_YUV422_PLANAR 8 bits YUV422 planar. Y(00) U(01) V(10) X(11). MORAPI_IMAGE_FORMAT_YUV420_PLANAR 8 bits YUV420 planar. Y(00) U(01) V(10) X(11). MORAPI_IMAGE_FORMAT_BAYER8_GRBG 8 bits Bayer. The order is GRBG. G(01) R(00) B(11) G(10). MORAPI_IMAGE_FORMAT_BAYER8_GBRG 8 bits Bayer. The order is GBRG. G(01) B(11) R(00) G(10). MORAPI_IMAGE_FORMAT_BAYER8_RGGB 8 bits Bayer. The order is RGGB. R(00) G(01) G(10) B(11). MORAPI_IMAGE_FORMAT_BAYER8_BGGR 8 bits Bayer. The order is BGGR. B(11) G(01) G(10) R(00). MORAPI_IMAGE_FORMAT_BAYER16_GRBG 16 bits Bayer. The order is GRBG. G(01) R(00) B(11) G(10). MORAPI_IMAGE_FORMAT_BAYER16_GBRG 16 bits Bayer. The order is GBRG. G(01) B(11) R(00) G(10). MORAPI_IMAGE_FORMAT_BAYER16_RGGB 16 bits Bayer. The order is RGGB. R(00) G(01) G(10) B(11). MORAPI_IMAGE_FORMAT_BAYER16_BGGR 16 bits Bayer. The order is BGGR. B(11) G(01) G(10) R(00).","title":"image"},{"location":"group__image.html#image","text":"Image module. More...","title":"image"},{"location":"group__image.html#data-structures","text":"struct morapi_ImagePlane struct morapi_Image","title":"Data Structures"},{"location":"group__image.html#macros","text":"#define MORAPI_IMAGE_PLANE_NUM (4)","title":"Macros"},{"location":"group__image.html#enumerations","text":"enum morapi_ImageFormat { , MORAPI_IMAGE_FORMAT_UINT8 = 0x110001B0, MORAPI_IMAGE_FORMAT_INT8 = 0x110001B1, MORAPI_IMAGE_FORMAT_UINT16 = 0x120001B0, MORAPI_IMAGE_FORMAT_INT16 = 0x120001B1, MORAPI_IMAGE_FORMAT_UINT32 = 0x140001B0, MORAPI_IMAGE_FORMAT_INT32 = 0x140001B1, MORAPI_IMAGE_FORMAT_UINT64 = 0x180001B0, MORAPI_IMAGE_FORMAT_INT64 = 0x180001B1, MORAPI_IMAGE_FORMAT_RGB565 = 0x220001B0, MORAPI_IMAGE_FORMAT_BGR565 = 0x22000930, MORAPI_IMAGE_FORMAT_RGB8 = 0x230001B0, MORAPI_IMAGE_FORMAT_BGR8 = 0x23000930, MORAPI_IMAGE_FORMAT_RGB16 = 0x260001B0, MORAPI_IMAGE_FORMAT_BGR16 = 0x26000930, MORAPI_IMAGE_FORMAT_RGBA8 = 0x340001B0, MORAPI_IMAGE_FORMAT_BGRA8 = 0x34000930, MORAPI_IMAGE_FORMAT_ARGB8 = 0x34000C60, MORAPI_IMAGE_FORMAT_ABGR8 = 0x34000E40, MORAPI_IMAGE_FORMAT_YUV444_YUV = 0x430001B0, MORAPI_IMAGE_FORMAT_YUV444_YVU = 0x43000270, MORAPI_IMAGE_FORMAT_YUV444_UYV = 0x430004B0, MORAPI_IMAGE_FORMAT_YUV444_UVY = 0x43000630, MORAPI_IMAGE_FORMAT_YUV444_VYU = 0x43000870, MORAPI_IMAGE_FORMAT_YUV444_VUY = 0x43000930, MORAPI_IMAGE_FORMAT_YUV422_YYUV = 0x420001B0, MORAPI_IMAGE_FORMAT_YUV422_YYVU = 0x420001C0, MORAPI_IMAGE_FORMAT_YUV422_YUYV = 0x42000270, MORAPI_IMAGE_FORMAT_YUV422_YUVY = 0x420002D0, MORAPI_IMAGE_FORMAT_YUV422_YVYU = 0x42000360, MORAPI_IMAGE_FORMAT_YUV422_YVUY = 0x42000390, MORAPI_IMAGE_FORMAT_YUV422_UYYV = 0x42000870, MORAPI_IMAGE_FORMAT_YUV422_UYVY = 0x420008D0, MORAPI_IMAGE_FORMAT_YUV422_UVYY = 0x42000B10, MORAPI_IMAGE_FORMAT_YUV422_VYYU = 0x42000C60, MORAPI_IMAGE_FORMAT_YUV422_VYUY = 0x42000C90, MORAPI_IMAGE_FORMAT_YUV422_VUYY = 0x42000E10, MORAPI_IMAGE_FORMAT_YUV444_SEMIPLANAR_UV = 0x412001B0, MORAPI_IMAGE_FORMAT_YUV444_SEMIPLANAR_VU = 0x41200270, MORAPI_IMAGE_FORMAT_YUV422_SEMIPLANAR_UV = 0x412001B1, MORAPI_IMAGE_FORMAT_YUV422_SEMIPLANAR_VU = 0x41200271, MORAPI_IMAGE_FORMAT_YUV420_SEMIPLANAR_UV = 0x412001B2, MORAPI_IMAGE_FORMAT_YUV420_SEMIPLANAR_VU = 0x41200272, MORAPI_IMAGE_FORMAT_YUV444_PLANAR = 0x411101B0, MORAPI_IMAGE_FORMAT_YUV422_PLANAR = 0x411101B1, MORAPI_IMAGE_FORMAT_YUV420_PLANAR = 0x411101B2, MORAPI_IMAGE_FORMAT_BAYER8_GRBG = 0x510004D0, MORAPI_IMAGE_FORMAT_BAYER8_GBRG = 0x51000720, MORAPI_IMAGE_FORMAT_BAYER8_RGGB = 0x510001B0, MORAPI_IMAGE_FORMAT_BAYER8_BGGR = 0x51000D80, MORAPI_IMAGE_FORMAT_BAYER16_GRBG = 0x520004D0, MORAPI_IMAGE_FORMAT_BAYER16_GBRG = 0x52000720, MORAPI_IMAGE_FORMAT_BAYER16_RGGB = 0x520001B0, MORAPI_IMAGE_FORMAT_BAYER16_BGGR = 0x52000D80 }","title":"Enumerations"},{"location":"group__image.html#detailed-description","text":"Image module.","title":"Detailed Description"},{"location":"group__image.html#macro-definition-documentation","text":"","title":"Macro Definition Documentation"},{"location":"group__image.html#morapi_image_plane_num","text":"#define MORAPI_IMAGE_PLANE_NUM (4) Max of plane count.","title":"MORAPI_IMAGE_PLANE_NUM"},{"location":"group__image.html#enumeration-type-documentation","text":"","title":"Enumeration Type Documentation"},{"location":"group__image.html#morapi_imageformat","text":"enum morapi_ImageFormat Image format. MSB <--------------------------\u2014> LSB 1111 0000 0000 0000 0000 0000 0000 0000 [Color space] 0(None), 1(Gray), 2(RGB), 3(RGBA), 4(YUV), 5(Bayer) 0000 1111 0000 0000 0000 0000 0000 0000 [Pixel size in Plane 0.] 0000 0000 1111 0000 0000 0000 0000 0000 [Pixel size in Plane 1.] 0000 0000 0000 1111 0000 0000 0000 0000 [Pixel size in Plane 2.] 0000 0000 0000 0000 1111 0000 0000 0000 [Pixel size in Plane 3.] 0000 0000 0000 0000 0000 1111 1111 0000 [The order of pixel components.] 0000 0000 0000 0000 0000 0000 0000 1111 [Optional bits] Enumerator MORAPI_IMAGE_FORMAT_UINT8 Undefined. Unsigned 8 bits grayscale. G(00) X(01) X(10) X(11). MORAPI_IMAGE_FORMAT_INT8 Signed 8 bits grayscale. G(00) X(01) X(10) X(11). MORAPI_IMAGE_FORMAT_UINT16 Unsigned 16 bits grayscale. G(00) X(01) X(10) X(11). MORAPI_IMAGE_FORMAT_INT16 Signed 16 bits grayscale. G(00) X(01) X(10) X(11). MORAPI_IMAGE_FORMAT_UINT32 Unsigned 32 bits grayscale. G(00) X(01) X(10) X(11). MORAPI_IMAGE_FORMAT_INT32 Singed 32 bits grayscale. G(00) X(01) X(10) X(11). MORAPI_IMAGE_FORMAT_UINT64 Unsigned 64 bits grayscale. G(00) X(01) X(10) X(11). MORAPI_IMAGE_FORMAT_INT64 Singed 64 bits grayscale. G(00) X(01) X(10) X(11). MORAPI_IMAGE_FORMAT_RGB565 RGB565. The order is RGB. R(00) G(01) B(10) X(11). MORAPI_IMAGE_FORMAT_BGR565 RGB565. The order is BGR. B(10) G(01) R(00) X(11). MORAPI_IMAGE_FORMAT_RGB8 8 bits RGB. The order is RGB. R(00) G(01) B(10) X(11). MORAPI_IMAGE_FORMAT_BGR8 8 bits RGB. The order is BGR. B(10) G(01) R(00) X(11). MORAPI_IMAGE_FORMAT_RGB16 16 bits RGB. The order is RGB. R(00) G(01) B(10) X(11). MORAPI_IMAGE_FORMAT_BGR16 16 bits RGB. The order is BGR. B(10) G(01) R(00) X(11). MORAPI_IMAGE_FORMAT_RGBA8 8 bits RGBA. The order is RGBA. R(00) G(01) B(10) A(11). MORAPI_IMAGE_FORMAT_BGRA8 8 bits RGBA. The order is BGRA. B(10) G(01) R(00) A(11). MORAPI_IMAGE_FORMAT_ARGB8 8 bits RGBA. The order is ARGB. A(11) R(00) G(01) B(10). MORAPI_IMAGE_FORMAT_ABGR8 8 bits RGBA. The order is ABGR. A(11) B(10) G(01) R(00). MORAPI_IMAGE_FORMAT_YUV444_YUV 8 bits YUV444. The order is YUV. Y(00) U(01) V(10) X(11). MORAPI_IMAGE_FORMAT_YUV444_YVU 8 bits YUV444. The order is YVU. Y(00) V(10) U(01) X(11). MORAPI_IMAGE_FORMAT_YUV444_UYV 8 bits YUV444. The order is UYV. U(01) Y(00) V(10) X(11). MORAPI_IMAGE_FORMAT_YUV444_UVY 8 bits YUV444. The order is UVY. U(01) V(10) Y(00) X(11). MORAPI_IMAGE_FORMAT_YUV444_VYU 8 bits YUV444. The order is VYU. V(10) Y(00) U(01) X(11). MORAPI_IMAGE_FORMAT_YUV444_VUY 8 bits YUV444. The order is YUV. V(10) U(01) Y(00) X(11). MORAPI_IMAGE_FORMAT_YUV422_YYUV 8 bits YUV422. The order is YYUV. Y0(00) Y1(01) UU(10) VV(11). MORAPI_IMAGE_FORMAT_YUV422_YYVU 8 bits YUV422. The order is YYVU. Y0(00) Y1(01) VV(11) UU(10). MORAPI_IMAGE_FORMAT_YUV422_YUYV 8 bits YUV422. The order is YUYV. Y0(00) UU(10) Y1(01) VV(11). MORAPI_IMAGE_FORMAT_YUV422_YUVY 8 bits YUV422. The order is YUVY. Y0(00) UU(10) VV(11) Y1(01). MORAPI_IMAGE_FORMAT_YUV422_YVYU 8 bits YUV422. The order is YVYU. Y0(00) VV(11) Y1(01) UU(10). MORAPI_IMAGE_FORMAT_YUV422_YVUY 8 bits YUV422. The order is YVUY. Y0(00) VV(11) UU(10) Y1(01). MORAPI_IMAGE_FORMAT_YUV422_UYYV 8 bits YUV422. The order is UYYV. UU(10) Y0(00) Y1(01) VV(11). MORAPI_IMAGE_FORMAT_YUV422_UYVY 8 bits YUV422. The order is UYVY. UU(10) Y0(00) VV(11) Y1(01). MORAPI_IMAGE_FORMAT_YUV422_UVYY 8 bits YUV422. The order is UVYY. UU(10) VV(11) Y0(00) Y1(01). MORAPI_IMAGE_FORMAT_YUV422_VYYU 8 bits YUV422. The order is VYYU. VV(11) Y0(00) Y1(01) UU(10). MORAPI_IMAGE_FORMAT_YUV422_VYUY 8 bits YUV422. The order is VYUY. VV(11) Y0(00) UU(10) Y1(01). MORAPI_IMAGE_FORMAT_YUV422_VUYY 8 bits YUV422. The order is VUYY. VV(11) UU(10) Y0(00) Y1(01). MORAPI_IMAGE_FORMAT_YUV444_SEMIPLANAR_UV 8 bits YUV444 semiplanar. The order is UV. Y(00) U(01) V(10) X(11). MORAPI_IMAGE_FORMAT_YUV444_SEMIPLANAR_VU 8 bits YUV444 semiplanar. The order is VU. Y(00) V(10) U(01) X(11). MORAPI_IMAGE_FORMAT_YUV422_SEMIPLANAR_UV 8 bits YUV422 semiplanar. The order is UV. Y(00) U(01) V(10) X(11). MORAPI_IMAGE_FORMAT_YUV422_SEMIPLANAR_VU 8 bits YUV422 semiplanar. The order is VU. Y(00) V(10) U(01) X(11). MORAPI_IMAGE_FORMAT_YUV420_SEMIPLANAR_UV 8 bits YUV420 semiplanar. The order is UV. Y(00) U(01) V(10) X(11). MORAPI_IMAGE_FORMAT_YUV420_SEMIPLANAR_VU 8 bits YUV420 semiplanar. The order is VU. Y(00) V(10) U(01) X(11). MORAPI_IMAGE_FORMAT_YUV444_PLANAR 8 bits YUV444 planar. Y(00) U(01) V(10) X(11). MORAPI_IMAGE_FORMAT_YUV422_PLANAR 8 bits YUV422 planar. Y(00) U(01) V(10) X(11). MORAPI_IMAGE_FORMAT_YUV420_PLANAR 8 bits YUV420 planar. Y(00) U(01) V(10) X(11). MORAPI_IMAGE_FORMAT_BAYER8_GRBG 8 bits Bayer. The order is GRBG. G(01) R(00) B(11) G(10). MORAPI_IMAGE_FORMAT_BAYER8_GBRG 8 bits Bayer. The order is GBRG. G(01) B(11) R(00) G(10). MORAPI_IMAGE_FORMAT_BAYER8_RGGB 8 bits Bayer. The order is RGGB. R(00) G(01) G(10) B(11). MORAPI_IMAGE_FORMAT_BAYER8_BGGR 8 bits Bayer. The order is BGGR. B(11) G(01) G(10) R(00). MORAPI_IMAGE_FORMAT_BAYER16_GRBG 16 bits Bayer. The order is GRBG. G(01) R(00) B(11) G(10). MORAPI_IMAGE_FORMAT_BAYER16_GBRG 16 bits Bayer. The order is GBRG. G(01) B(11) R(00) G(10). MORAPI_IMAGE_FORMAT_BAYER16_RGGB 16 bits Bayer. The order is RGGB. R(00) G(01) G(10) B(11). MORAPI_IMAGE_FORMAT_BAYER16_BGGR 16 bits Bayer. The order is BGGR. B(11) G(01) G(10) R(00).","title":"morapi_ImageFormat"},{"location":"group__image__io.html","text":"image_io Image I/O. More... Functions morapi_Result morapi_ImageIO__getImageSize ( morapi_Env *env, morapi_Int32 *o_width, morapi_Int32 *o_height, const morapi_Char *i_file_name) morapi_Result morapi_ImageIO__load ( morapi_Image *o_image, morapi_ImageFormat i_image_format, const morapi_Char *i_file_name) morapi_Result morapi_ImageIO__saveJpeg (const morapi_Char *i_file_name, const morapi_Image *i_image, morapi_Int32 i_quality) morapi_Result morapi_ImageIO__savePng (const morapi_Char *i_file_name, const morapi_Image *i_image) morapi_Result morapi_ImageIO__savePpm (const morapi_Char *i_file_name, const morapi_Image *i_image) morapi_Result morapi_ImageIO__savePgm (const morapi_Char *i_file_name, const morapi_Image *i_image) Detailed Description Image I/O. Function Documentation morapi_ImageIO__getImageSize() morapi_Result morapi_ImageIO__getImageSize ( morapi_Env * env, morapi_Int32 * o_width, morapi_Int32 * o_height, const morapi_Char * i_file_name) Gets image width and height from a file. It automatically analyzes the image codec in the file (i.e., jpeg, png and so on). morapi_ImageIO__load() morapi_Result morapi_ImageIO__load ( morapi_Image * o_image, morapi_ImageFormat i_image_format, const morapi_Char * i_file_name) Reads an image from a file. It automatically analyzes the image codec in the file (i.e., jpeg, png and so on). test_dnn_api.c . morapi_ImageIO__saveJpeg() morapi_Result morapi_ImageIO__saveJpeg (const morapi_Char * i_file_name, const morapi_Image * i_image, morapi_Int32 i_quality) Writes an image to a jpeg file. i_quality takes a value from 0 to 256 and larger is better. morapi_ImageIO__savePng() morapi_Result morapi_ImageIO__savePng (const morapi_Char * i_file_name, const morapi_Image * i_image) Writes an image to a jpeg file. morapi_ImageIO__savePpm() morapi_Result morapi_ImageIO__savePpm (const morapi_Char * i_file_name, const morapi_Image * i_image) Writes an image to a ppm file. morapi_ImageIO__savePgm() morapi_Result morapi_ImageIO__savePgm (const morapi_Char * i_file_name, const morapi_Image * i_image) Writes an image to a pgm file.","title":"image_io"},{"location":"group__image__io.html#image_io","text":"Image I/O. More...","title":"image_io"},{"location":"group__image__io.html#functions","text":"morapi_Result morapi_ImageIO__getImageSize ( morapi_Env *env, morapi_Int32 *o_width, morapi_Int32 *o_height, const morapi_Char *i_file_name) morapi_Result morapi_ImageIO__load ( morapi_Image *o_image, morapi_ImageFormat i_image_format, const morapi_Char *i_file_name) morapi_Result morapi_ImageIO__saveJpeg (const morapi_Char *i_file_name, const morapi_Image *i_image, morapi_Int32 i_quality) morapi_Result morapi_ImageIO__savePng (const morapi_Char *i_file_name, const morapi_Image *i_image) morapi_Result morapi_ImageIO__savePpm (const morapi_Char *i_file_name, const morapi_Image *i_image) morapi_Result morapi_ImageIO__savePgm (const morapi_Char *i_file_name, const morapi_Image *i_image)","title":"Functions"},{"location":"group__image__io.html#detailed-description","text":"Image I/O.","title":"Detailed Description"},{"location":"group__image__io.html#function-documentation","text":"","title":"Function Documentation"},{"location":"group__image__io.html#morapi_imageio__getimagesize","text":"morapi_Result morapi_ImageIO__getImageSize ( morapi_Env * env, morapi_Int32 * o_width, morapi_Int32 * o_height, const morapi_Char * i_file_name) Gets image width and height from a file. It automatically analyzes the image codec in the file (i.e., jpeg, png and so on).","title":"morapi_ImageIO__getImageSize()"},{"location":"group__image__io.html#morapi_imageio__load","text":"morapi_Result morapi_ImageIO__load ( morapi_Image * o_image, morapi_ImageFormat i_image_format, const morapi_Char * i_file_name) Reads an image from a file. It automatically analyzes the image codec in the file (i.e., jpeg, png and so on). test_dnn_api.c .","title":"morapi_ImageIO__load()"},{"location":"group__image__io.html#morapi_imageio__savejpeg","text":"morapi_Result morapi_ImageIO__saveJpeg (const morapi_Char * i_file_name, const morapi_Image * i_image, morapi_Int32 i_quality) Writes an image to a jpeg file. i_quality takes a value from 0 to 256 and larger is better.","title":"morapi_ImageIO__saveJpeg()"},{"location":"group__image__io.html#morapi_imageio__savepng","text":"morapi_Result morapi_ImageIO__savePng (const morapi_Char * i_file_name, const morapi_Image * i_image) Writes an image to a jpeg file.","title":"morapi_ImageIO__savePng()"},{"location":"group__image__io.html#morapi_imageio__saveppm","text":"morapi_Result morapi_ImageIO__savePpm (const morapi_Char * i_file_name, const morapi_Image * i_image) Writes an image to a ppm file.","title":"morapi_ImageIO__savePpm()"},{"location":"group__image__io.html#morapi_imageio__savepgm","text":"morapi_Result morapi_ImageIO__savePgm (const morapi_Char * i_file_name, const morapi_Image * i_image) Writes an image to a pgm file.","title":"morapi_ImageIO__savePgm()"},{"location":"group__istream.html","text":"istream core \u00bb stream An input stream. More... Data Structures struct morapi_VF_IStream struct morapi_IStream struct morapi_IStreamString struct morapi_IStreamByteArray struct morapi_IStreamFile Detailed Description An input stream.","title":"istream"},{"location":"group__istream.html#istream","text":"core \u00bb stream An input stream. More...","title":"istream"},{"location":"group__istream.html#data-structures","text":"struct morapi_VF_IStream struct morapi_IStream struct morapi_IStreamString struct morapi_IStreamByteArray struct morapi_IStreamFile","title":"Data Structures"},{"location":"group__istream.html#detailed-description","text":"An input stream.","title":"Detailed Description"},{"location":"group__json.html","text":"json core Json. More... Data Structures union morapi_JsonData struct morapi_JsonArray struct morapi_JsonObject struct morapi_Json Macros #define MORAPI_JSON_ARRAY (JSON) ( morapi_Json_getData (JSON)->array) #define MORAPI_JSON_OBJECT (JSON) ( morapi_Json_getData (JSON)->object) #define MORAPI_JSON_STRING (JSON) ( morapi_Json_getData (JSON)->text) #define MORAPI_JSON_NUMBER (JSON) ( morapi_Json_getData (JSON)->number) #define MORAPI_JSON_BOOLEAN (JSON) ( morapi_Json_getData (JSON)->boolean) #define MORAPI_JSON_GET1 (JSON, KEY1) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, NULL) #define MORAPI_JSON_GET2 (JSON, KEY1, KEY2) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, KEY2, NULL) #define MORAPI_JSON_GET3 (JSON, KEY1, KEY2, KEY3) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, KEY2, KEY3, NULL) #define MORAPI_JSON_GET4 (JSON, KEY1, KEY2, KEY3, KEY4) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, KEY2, KEY3, KEY4, NULL) #define MORAPI_JSON_GET5 (JSON, KEY1, KEY2, KEY3, KEY4, KEY5) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, KEY2, KEY3, KEY4, KEY5, NULL) #define MORAPI_JSON_GET6 (JSON, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, NULL) #define MORAPI_JSON_GET7 (JSON, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, NULL) #define MORAPI_JSON_GET8 (JSON, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8, NULL) #define MORAPI_JSON_GET9 (JSON, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8, KEY9) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8, KEY9, NULL) #define MORAPI_JSON_GET_TYPE1 (JSON, KEY1, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, NULL) #define MORAPI_JSON_GET_TYPE2 (JSON, KEY1, KEY2, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, KEY2, NULL) #define MORAPI_JSON_GET_TYPE3 (JSON, KEY1, KEY2, KEY3, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, KEY2, KEY3, NULL) #define MORAPI_JSON_GET_TYPE4 (JSON, KEY1, KEY2, KEY3, KEY4, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, KEY2, KEY3, KEY4, NULL) #define MORAPI_JSON_GET_TYPE5 (JSON, KEY1, KEY2, KEY3, KEY4, KEY5, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, KEY2, KEY3, KEY4, KEY5, NULL) #define MORAPI_JSON_GET_TYPE6 (JSON, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, NULL) #define MORAPI_JSON_GET_TYPE7 (JSON, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, NULL) #define MORAPI_JSON_GET_TYPE8 (JSON, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8, NULL) #define MORAPI_JSON_GET_TYPE9 (JSON, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8, KEY9, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8, KEY9, NULL) Typedefs typedef morapi_Uint32 morapi_JsonType Detailed Description Json. Macro Definition Documentation MORAPI_JSON_ARRAY #define MORAPI_JSON_ARRAY( JSON) ((JSON)->array) Casts morapi_Json to morapi_JsonArray . MORAPI_JSON_OBJECT #define MORAPI_JSON_OBJECT( JSON) ((JSON)->object) Casts morapi_Json to morapi_JsonObject . MORAPI_JSON_STRING #define MORAPI_JSON_STRING( JSON) ((JSON)->text) Casts morapi_Json to morapi_String . MORAPI_JSON_NUMBER #define MORAPI_JSON_NUMBER( JSON) ((JSON)->number) Casts morapi_Json to morapi_Real. MORAPI_JSON_BOOLEAN #define MORAPI_JSON_BOOLEAN( JSON) ((JSON)->boolean) Casts to morapi_Bool. MORAPI_JSON_GET1 #define MORAPI_JSON_GET1( JSON, KEY1) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, NULL) Gets JSON['KEY1']. If it doesn't not exsit or its type isn't JTYPE, returns NULL. MORAPI_JSON_GET2 #define MORAPI_JSON_GET2( JSON, KEY1, KEY2) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, KEY2, NULL) Gets JSON['KEY1']['KEY2']. If it doesn't not exsit or its type isn't JTYPE, returns NULL. MORAPI_JSON_GET3 #define MORAPI_JSON_GET3( JSON, KEY1, KEY2, KEY3) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, KEY2, KEY3, NULL) Gets JSON['KEY1']['KEY2']['KEY3']. If it doesn't not exsit or its type isn't JTYPE, returns NULL. MORAPI_JSON_GET4 #define MORAPI_JSON_GET4( JSON, KEY1, KEY2, KEY3, KEY4) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, KEY2, KEY3, KEY4, NULL) Gets JSON['KEY1']['KEY2']['KEY3']['KEY4']. If it doesn't not exsit or its type isn't JTYPE, returns NULL. MORAPI_JSON_GET5 #define MORAPI_JSON_GET5( JSON, KEY1, KEY2, KEY3, KEY4, KEY5) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, KEY2, KEY3, KEY4, KEY5, NULL) Gets JSON['KEY1']['KEY2']['KEY3']['KEY4']['KEY5']. If it doesn't not exsit or its type isn't JTYPE, returns NULL. MORAPI_JSON_GET6 #define MORAPI_JSON_GET6( JSON, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, NULL) Gets JSON['KEY1']['KEY2']['KEY3']['KEY4']['KEY5']['KEY6']. If it doesn't not exsit or its type isn't JTYPE, returns NULL. MORAPI_JSON_GET7 #define MORAPI_JSON_GET7( JSON, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, NULL) Gets JSON['KEY1']['KEY2']['KEY3']['KEY4']['KEY5']['KEY6']['KEY7']. If it doesn't not exsit or its type isn't JTYPE, returns NULL. MORAPI_JSON_GET8 #define MORAPI_JSON_GET8( JSON, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8, NULL) Gets JSON['KEY1']['KEY2']['KEY3']['KEY4']['KEY5']['KEY6']['KEY7']['KEY8']. If it doesn't not exsit or its type isn't JTYPE, returns NULL. MORAPI_JSON_GET9 #define MORAPI_JSON_GET9( JSON, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8, KEY9) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8, KEY9, NULL) Gets JSON['KEY1']['KEY2']['KEY3']['KEY4']['KEY5']['KEY6']['KEY7']['KEY8']['KEY9']. If it doesn't not exsit or its type isn't JTYPE, returns NULL. MORAPI_JSON_GET_TYPE1 #define MORAPI_JSON_GET_TYPE1( JSON, KEY1, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, NULL) Gets JSON['KEY1']. If it doesn't not exsit or its type isn't JTYPE, returns NULL. MORAPI_JSON_GET_TYPE2 #define MORAPI_JSON_GET_TYPE2( JSON, KEY1, KEY2, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, KEY2, NULL) Gets JSON['KEY1']['KEY2']. If it doesn't not exsit or its type isn't JTYPE, returns NULL. MORAPI_JSON_GET_TYPE3 #define MORAPI_JSON_GET_TYPE3( JSON, KEY1, KEY2, KEY3, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, KEY2, KEY3, NULL) Gets JSON['KEY1']['KEY2']['KEY3']. If it doesn't not exsit or its type isn't JTYPE, returns NULL. MORAPI_JSON_GET_TYPE4 #define MORAPI_JSON_GET_TYPE4( JSON, KEY1, KEY2, KEY3, KEY4, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, KEY2, KEY3, KEY4, NULL) Gets JSON['KEY1']['KEY2']['KEY3']['KEY4']. If it doesn't not exsit or its type isn't JTYPE, returns NULL. MORAPI_JSON_GET_TYPE5 #define MORAPI_JSON_GET_TYPE5( JSON, KEY1, KEY2, KEY3, KEY4, KEY5, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, KEY2, KEY3, KEY4, KEY5, NULL) Gets JSON['KEY1']['KEY2']['KEY3']['KEY4']['KEY5']. If it doesn't not exsit or its type isn't JTYPE, returns NULL. MORAPI_JSON_GET_TYPE6 #define MORAPI_JSON_GET_TYPE6( JSON, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, NULL) Gets JSON['KEY1']['KEY2']['KEY3']['KEY4']['KEY5']['KEY6']. If it doesn't not exsit or its type isn't JTYPE, returns NULL. MORAPI_JSON_GET_TYPE7 #define MORAPI_JSON_GET_TYPE7( JSON, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, NULL) Gets JSON['KEY1']['KEY2']['KEY3']['KEY4']['KEY5']['KEY6']['KEY7']. If it doesn't not exsit or its type isn't JTYPE, returns NULL. MORAPI_JSON_GET_TYPE8 #define MORAPI_JSON_GET_TYPE8( JSON, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8, NULL) Gets JSON['KEY1']['KEY2']['KEY3']['KEY4']['KEY5']['KEY6']['KEY7']['KEY8']. If it doesn't not exsit or its type isn't JTYPE, returns NULL. MORAPI_JSON_GET_TYPE9 #define MORAPI_JSON_GET_TYPE9( JSON, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8, KEY9, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8, KEY9, NULL) Gets JSON['KEY1']['KEY2']['KEY3']['KEY4']['KEY5']['KEY6']['KEY7']['KEY8']['KEY9']. If it doesn't not exsit or its type isn't JTYPE, returns NULL. Typedef Documentation morapi_JsonType typedef morapi_Uint32 morapi_JsonType A type of a json element.","title":"json"},{"location":"group__json.html#json","text":"core Json. More...","title":"json"},{"location":"group__json.html#data-structures","text":"union morapi_JsonData struct morapi_JsonArray struct morapi_JsonObject struct morapi_Json","title":"Data Structures"},{"location":"group__json.html#macros","text":"#define MORAPI_JSON_ARRAY (JSON) ( morapi_Json_getData (JSON)->array) #define MORAPI_JSON_OBJECT (JSON) ( morapi_Json_getData (JSON)->object) #define MORAPI_JSON_STRING (JSON) ( morapi_Json_getData (JSON)->text) #define MORAPI_JSON_NUMBER (JSON) ( morapi_Json_getData (JSON)->number) #define MORAPI_JSON_BOOLEAN (JSON) ( morapi_Json_getData (JSON)->boolean) #define MORAPI_JSON_GET1 (JSON, KEY1) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, NULL) #define MORAPI_JSON_GET2 (JSON, KEY1, KEY2) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, KEY2, NULL) #define MORAPI_JSON_GET3 (JSON, KEY1, KEY2, KEY3) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, KEY2, KEY3, NULL) #define MORAPI_JSON_GET4 (JSON, KEY1, KEY2, KEY3, KEY4) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, KEY2, KEY3, KEY4, NULL) #define MORAPI_JSON_GET5 (JSON, KEY1, KEY2, KEY3, KEY4, KEY5) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, KEY2, KEY3, KEY4, KEY5, NULL) #define MORAPI_JSON_GET6 (JSON, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, NULL) #define MORAPI_JSON_GET7 (JSON, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, NULL) #define MORAPI_JSON_GET8 (JSON, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8, NULL) #define MORAPI_JSON_GET9 (JSON, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8, KEY9) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8, KEY9, NULL) #define MORAPI_JSON_GET_TYPE1 (JSON, KEY1, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, NULL) #define MORAPI_JSON_GET_TYPE2 (JSON, KEY1, KEY2, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, KEY2, NULL) #define MORAPI_JSON_GET_TYPE3 (JSON, KEY1, KEY2, KEY3, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, KEY2, KEY3, NULL) #define MORAPI_JSON_GET_TYPE4 (JSON, KEY1, KEY2, KEY3, KEY4, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, KEY2, KEY3, KEY4, NULL) #define MORAPI_JSON_GET_TYPE5 (JSON, KEY1, KEY2, KEY3, KEY4, KEY5, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, KEY2, KEY3, KEY4, KEY5, NULL) #define MORAPI_JSON_GET_TYPE6 (JSON, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, NULL) #define MORAPI_JSON_GET_TYPE7 (JSON, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, NULL) #define MORAPI_JSON_GET_TYPE8 (JSON, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8, NULL) #define MORAPI_JSON_GET_TYPE9 (JSON, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8, KEY9, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8, KEY9, NULL)","title":"Macros"},{"location":"group__json.html#typedefs","text":"typedef morapi_Uint32 morapi_JsonType","title":"Typedefs"},{"location":"group__json.html#detailed-description","text":"Json.","title":"Detailed Description"},{"location":"group__json.html#macro-definition-documentation","text":"","title":"Macro Definition Documentation"},{"location":"group__json.html#morapi_json_array","text":"#define MORAPI_JSON_ARRAY( JSON) ((JSON)->array) Casts morapi_Json to morapi_JsonArray .","title":"MORAPI_JSON_ARRAY"},{"location":"group__json.html#morapi_json_object","text":"#define MORAPI_JSON_OBJECT( JSON) ((JSON)->object) Casts morapi_Json to morapi_JsonObject .","title":"MORAPI_JSON_OBJECT"},{"location":"group__json.html#morapi_json_string","text":"#define MORAPI_JSON_STRING( JSON) ((JSON)->text) Casts morapi_Json to morapi_String .","title":"MORAPI_JSON_STRING"},{"location":"group__json.html#morapi_json_number","text":"#define MORAPI_JSON_NUMBER( JSON) ((JSON)->number) Casts morapi_Json to morapi_Real.","title":"MORAPI_JSON_NUMBER"},{"location":"group__json.html#morapi_json_boolean","text":"#define MORAPI_JSON_BOOLEAN( JSON) ((JSON)->boolean) Casts to morapi_Bool.","title":"MORAPI_JSON_BOOLEAN"},{"location":"group__json.html#morapi_json_get1","text":"#define MORAPI_JSON_GET1( JSON, KEY1) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, NULL) Gets JSON['KEY1']. If it doesn't not exsit or its type isn't JTYPE, returns NULL.","title":"MORAPI_JSON_GET1"},{"location":"group__json.html#morapi_json_get2","text":"#define MORAPI_JSON_GET2( JSON, KEY1, KEY2) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, KEY2, NULL) Gets JSON['KEY1']['KEY2']. If it doesn't not exsit or its type isn't JTYPE, returns NULL.","title":"MORAPI_JSON_GET2"},{"location":"group__json.html#morapi_json_get3","text":"#define MORAPI_JSON_GET3( JSON, KEY1, KEY2, KEY3) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, KEY2, KEY3, NULL) Gets JSON['KEY1']['KEY2']['KEY3']. If it doesn't not exsit or its type isn't JTYPE, returns NULL.","title":"MORAPI_JSON_GET3"},{"location":"group__json.html#morapi_json_get4","text":"#define MORAPI_JSON_GET4( JSON, KEY1, KEY2, KEY3, KEY4) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, KEY2, KEY3, KEY4, NULL) Gets JSON['KEY1']['KEY2']['KEY3']['KEY4']. If it doesn't not exsit or its type isn't JTYPE, returns NULL.","title":"MORAPI_JSON_GET4"},{"location":"group__json.html#morapi_json_get5","text":"#define MORAPI_JSON_GET5( JSON, KEY1, KEY2, KEY3, KEY4, KEY5) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, KEY2, KEY3, KEY4, KEY5, NULL) Gets JSON['KEY1']['KEY2']['KEY3']['KEY4']['KEY5']. If it doesn't not exsit or its type isn't JTYPE, returns NULL.","title":"MORAPI_JSON_GET5"},{"location":"group__json.html#morapi_json_get6","text":"#define MORAPI_JSON_GET6( JSON, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, NULL) Gets JSON['KEY1']['KEY2']['KEY3']['KEY4']['KEY5']['KEY6']. If it doesn't not exsit or its type isn't JTYPE, returns NULL.","title":"MORAPI_JSON_GET6"},{"location":"group__json.html#morapi_json_get7","text":"#define MORAPI_JSON_GET7( JSON, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, NULL) Gets JSON['KEY1']['KEY2']['KEY3']['KEY4']['KEY5']['KEY6']['KEY7']. If it doesn't not exsit or its type isn't JTYPE, returns NULL.","title":"MORAPI_JSON_GET7"},{"location":"group__json.html#morapi_json_get8","text":"#define MORAPI_JSON_GET8( JSON, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8, NULL) Gets JSON['KEY1']['KEY2']['KEY3']['KEY4']['KEY5']['KEY6']['KEY7']['KEY8']. If it doesn't not exsit or its type isn't JTYPE, returns NULL.","title":"MORAPI_JSON_GET8"},{"location":"group__json.html#morapi_json_get9","text":"#define MORAPI_JSON_GET9( JSON, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8, KEY9) morapi_Json_getn(JSON, MORAPI_FALSE, MORAPI_JSON_TYPE_NULL, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8, KEY9, NULL) Gets JSON['KEY1']['KEY2']['KEY3']['KEY4']['KEY5']['KEY6']['KEY7']['KEY8']['KEY9']. If it doesn't not exsit or its type isn't JTYPE, returns NULL.","title":"MORAPI_JSON_GET9"},{"location":"group__json.html#morapi_json_get_type1","text":"#define MORAPI_JSON_GET_TYPE1( JSON, KEY1, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, NULL) Gets JSON['KEY1']. If it doesn't not exsit or its type isn't JTYPE, returns NULL.","title":"MORAPI_JSON_GET_TYPE1"},{"location":"group__json.html#morapi_json_get_type2","text":"#define MORAPI_JSON_GET_TYPE2( JSON, KEY1, KEY2, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, KEY2, NULL) Gets JSON['KEY1']['KEY2']. If it doesn't not exsit or its type isn't JTYPE, returns NULL.","title":"MORAPI_JSON_GET_TYPE2"},{"location":"group__json.html#morapi_json_get_type3","text":"#define MORAPI_JSON_GET_TYPE3( JSON, KEY1, KEY2, KEY3, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, KEY2, KEY3, NULL) Gets JSON['KEY1']['KEY2']['KEY3']. If it doesn't not exsit or its type isn't JTYPE, returns NULL.","title":"MORAPI_JSON_GET_TYPE3"},{"location":"group__json.html#morapi_json_get_type4","text":"#define MORAPI_JSON_GET_TYPE4( JSON, KEY1, KEY2, KEY3, KEY4, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, KEY2, KEY3, KEY4, NULL) Gets JSON['KEY1']['KEY2']['KEY3']['KEY4']. If it doesn't not exsit or its type isn't JTYPE, returns NULL.","title":"MORAPI_JSON_GET_TYPE4"},{"location":"group__json.html#morapi_json_get_type5","text":"#define MORAPI_JSON_GET_TYPE5( JSON, KEY1, KEY2, KEY3, KEY4, KEY5, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, KEY2, KEY3, KEY4, KEY5, NULL) Gets JSON['KEY1']['KEY2']['KEY3']['KEY4']['KEY5']. If it doesn't not exsit or its type isn't JTYPE, returns NULL.","title":"MORAPI_JSON_GET_TYPE5"},{"location":"group__json.html#morapi_json_get_type6","text":"#define MORAPI_JSON_GET_TYPE6( JSON, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, NULL) Gets JSON['KEY1']['KEY2']['KEY3']['KEY4']['KEY5']['KEY6']. If it doesn't not exsit or its type isn't JTYPE, returns NULL.","title":"MORAPI_JSON_GET_TYPE6"},{"location":"group__json.html#morapi_json_get_type7","text":"#define MORAPI_JSON_GET_TYPE7( JSON, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, NULL) Gets JSON['KEY1']['KEY2']['KEY3']['KEY4']['KEY5']['KEY6']['KEY7']. If it doesn't not exsit or its type isn't JTYPE, returns NULL.","title":"MORAPI_JSON_GET_TYPE7"},{"location":"group__json.html#morapi_json_get_type8","text":"#define MORAPI_JSON_GET_TYPE8( JSON, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8, NULL) Gets JSON['KEY1']['KEY2']['KEY3']['KEY4']['KEY5']['KEY6']['KEY7']['KEY8']. If it doesn't not exsit or its type isn't JTYPE, returns NULL.","title":"MORAPI_JSON_GET_TYPE8"},{"location":"group__json.html#morapi_json_get_type9","text":"#define MORAPI_JSON_GET_TYPE9( JSON, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8, KEY9, JTYPE) morapi_Json_getn(JSON, MORAPI_TRUE, MORAPI_JSON_TYPE_##JTYPE, KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8, KEY9, NULL) Gets JSON['KEY1']['KEY2']['KEY3']['KEY4']['KEY5']['KEY6']['KEY7']['KEY8']['KEY9']. If it doesn't not exsit or its type isn't JTYPE, returns NULL.","title":"MORAPI_JSON_GET_TYPE9"},{"location":"group__json.html#typedef-documentation","text":"","title":"Typedef Documentation"},{"location":"group__json.html#morapi_jsontype","text":"typedef morapi_Uint32 morapi_JsonType A type of a json element.","title":"morapi_JsonType"},{"location":"group__ostream.html","text":"ostream core \u00bb stream An output stream. More... Data Structures struct morapi_OStream struct morapi_OStreamByteArray struct morapi_OStreamFile struct morapi_OStreamString Detailed Description An output stream.","title":"ostream"},{"location":"group__ostream.html#ostream","text":"core \u00bb stream An output stream. More...","title":"ostream"},{"location":"group__ostream.html#data-structures","text":"struct morapi_OStream struct morapi_OStreamByteArray struct morapi_OStreamFile struct morapi_OStreamString","title":"Data Structures"},{"location":"group__ostream.html#detailed-description","text":"An output stream.","title":"Detailed Description"},{"location":"group__param.html","text":"param dnn Parameter module. More... Data Structures struct morapi_Param struct morapi_Params Enumerations enum morapi_ParamType { MORAPI_PARAM_TYPE_NONE , MORAPI_PARAM_TYPE_BOOL , MORAPI_PARAM_TYPE_BOOLS , MORAPI_PARAM_TYPE_REAL , MORAPI_PARAM_TYPE_REALS , MORAPI_PARAM_TYPE_TEXT , MORAPI_PARAM_TYPE_TEXTS , MORAPI_PARAM_TYPE_PARAMS } Detailed Description Parameter module. Enumeration Type Documentation morapi_ParamType enum morapi_ParamType Parameter Type. Enumerator MORAPI_PARAM_TYPE_NONE None. MORAPI_PARAM_TYPE_BOOL Boolean. MORAPI_PARAM_TYPE_BOOLS Booleans. MORAPI_PARAM_TYPE_REAL Real number. MORAPI_PARAM_TYPE_REALS Real numbers. MORAPI_PARAM_TYPE_TEXT Text. MORAPI_PARAM_TYPE_TEXTS Texts. MORAPI_PARAM_TYPE_PARAMS Parameters.","title":"dnn.param"},{"location":"group__param.html#param","text":"dnn Parameter module. More...","title":"param"},{"location":"group__param.html#data-structures","text":"struct morapi_Param struct morapi_Params","title":"Data Structures"},{"location":"group__param.html#enumerations","text":"enum morapi_ParamType { MORAPI_PARAM_TYPE_NONE , MORAPI_PARAM_TYPE_BOOL , MORAPI_PARAM_TYPE_BOOLS , MORAPI_PARAM_TYPE_REAL , MORAPI_PARAM_TYPE_REALS , MORAPI_PARAM_TYPE_TEXT , MORAPI_PARAM_TYPE_TEXTS , MORAPI_PARAM_TYPE_PARAMS }","title":"Enumerations"},{"location":"group__param.html#detailed-description","text":"Parameter module.","title":"Detailed Description"},{"location":"group__param.html#enumeration-type-documentation","text":"","title":"Enumeration Type Documentation"},{"location":"group__param.html#morapi_paramtype","text":"enum morapi_ParamType Parameter Type. Enumerator MORAPI_PARAM_TYPE_NONE None. MORAPI_PARAM_TYPE_BOOL Boolean. MORAPI_PARAM_TYPE_BOOLS Booleans. MORAPI_PARAM_TYPE_REAL Real number. MORAPI_PARAM_TYPE_REALS Real numbers. MORAPI_PARAM_TYPE_TEXT Text. MORAPI_PARAM_TYPE_TEXTS Texts. MORAPI_PARAM_TYPE_PARAMS Parameters.","title":"morapi_ParamType"},{"location":"group__prof.html","text":"prof dnn Dnn profiling for tuning. More... Data Structures struct morapi_DnnProf struct morapi_DnnRoutinePlan struct morapi_DnnSchemaPlan struct morapi_DnnLayerPlan struct morapi_DnnNetPlan struct morapi_DnnPlan struct morapi_DnnOptimizer struct morapi_DnnRecipe Typedefs typedef void(* morapi_DnnProfProgressedCB ) (void *, morapi_DnnProf *) Enumerations enum morapi_DnnProfEstimateMode { MORAPI_DNN_PROF_ESTIMATE_MODE_MIN , MORAPI_DNN_PROF_ESTIMATE_MODE_AVE , MORAPI_DNN_PROF_ESTIMATE_MODE_ROBUST } Functions void morapi_DnnProfProgressedCB_default (void *obj, morapi_DnnProf *i_prof) morapi_Result morapi_DnnProf_static_readDnnFileName ( morapi_Env *env, morapi_Char *o_buffer, morapi_Int32 *io_buffer_size, const morapi_Char *i_prof_filename, const void *i_password, morapi_Int32 i_password_len) Detailed Description Dnn profiling for tuning. Profiles and optimizes the dnn on the target device, then makes a recipe for tuning. Typedef Documentation morapi_DnnProfProgressedCB typedef void(* morapi_DnnProfProgressedCB) (void *, morapi_DnnProf *) Callback function for profiling progress. Enumeration Type Documentation morapi_DnnProfEstimateMode enum morapi_DnnProfEstimateMode Estimation mode of profiling data. Enumerator MORAPI_DNN_PROF_ESTIMATE_MODE_MIN Min estimation. MORAPI_DNN_PROF_ESTIMATE_MODE_AVE Average estimation. MORAPI_DNN_PROF_ESTIMATE_MODE_ROBUST Robust estimation. Function Documentation morapi_DnnProfProgressedCB_default() void morapi_DnnProfProgressedCB_default (void * obj, morapi_DnnProf * i_prof) Default callback function for profiling progress. Parameters obj : this argument is not used. i_prof : the profiler object that calls the callback. morapi_DnnProf_static_readDnnFileName() morapi_Result morapi_DnnProf_static_readDnnFileName ( morapi_Env * env, morapi_Char * o_buffer, morapi_Int32 * io_buffer_size, const morapi_Char * i_prof_filename, const void * i_password, morapi_Int32 i_password_len) Reads a dnn file name from a profile file name.","title":"dnn.prof"},{"location":"group__prof.html#prof","text":"dnn Dnn profiling for tuning. More...","title":"prof"},{"location":"group__prof.html#data-structures","text":"struct morapi_DnnProf struct morapi_DnnRoutinePlan struct morapi_DnnSchemaPlan struct morapi_DnnLayerPlan struct morapi_DnnNetPlan struct morapi_DnnPlan struct morapi_DnnOptimizer struct morapi_DnnRecipe","title":"Data Structures"},{"location":"group__prof.html#typedefs","text":"typedef void(* morapi_DnnProfProgressedCB ) (void *, morapi_DnnProf *)","title":"Typedefs"},{"location":"group__prof.html#enumerations","text":"enum morapi_DnnProfEstimateMode { MORAPI_DNN_PROF_ESTIMATE_MODE_MIN , MORAPI_DNN_PROF_ESTIMATE_MODE_AVE , MORAPI_DNN_PROF_ESTIMATE_MODE_ROBUST }","title":"Enumerations"},{"location":"group__prof.html#functions","text":"void morapi_DnnProfProgressedCB_default (void *obj, morapi_DnnProf *i_prof) morapi_Result morapi_DnnProf_static_readDnnFileName ( morapi_Env *env, morapi_Char *o_buffer, morapi_Int32 *io_buffer_size, const morapi_Char *i_prof_filename, const void *i_password, morapi_Int32 i_password_len)","title":"Functions"},{"location":"group__prof.html#detailed-description","text":"Dnn profiling for tuning. Profiles and optimizes the dnn on the target device, then makes a recipe for tuning.","title":"Detailed Description"},{"location":"group__prof.html#typedef-documentation","text":"","title":"Typedef Documentation"},{"location":"group__prof.html#morapi_dnnprofprogressedcb","text":"typedef void(* morapi_DnnProfProgressedCB) (void *, morapi_DnnProf *) Callback function for profiling progress.","title":"morapi_DnnProfProgressedCB"},{"location":"group__prof.html#enumeration-type-documentation","text":"","title":"Enumeration Type Documentation"},{"location":"group__prof.html#morapi_dnnprofestimatemode","text":"enum morapi_DnnProfEstimateMode Estimation mode of profiling data. Enumerator MORAPI_DNN_PROF_ESTIMATE_MODE_MIN Min estimation. MORAPI_DNN_PROF_ESTIMATE_MODE_AVE Average estimation. MORAPI_DNN_PROF_ESTIMATE_MODE_ROBUST Robust estimation.","title":"morapi_DnnProfEstimateMode"},{"location":"group__prof.html#function-documentation","text":"","title":"Function Documentation"},{"location":"group__prof.html#morapi_dnnprofprogressedcb_default","text":"void morapi_DnnProfProgressedCB_default (void * obj, morapi_DnnProf * i_prof) Default callback function for profiling progress. Parameters obj : this argument is not used. i_prof : the profiler object that calls the callback.","title":"morapi_DnnProfProgressedCB_default()"},{"location":"group__prof.html#morapi_dnnprof_static_readdnnfilename","text":"morapi_Result morapi_DnnProf_static_readDnnFileName ( morapi_Env * env, morapi_Char * o_buffer, morapi_Int32 * io_buffer_size, const morapi_Char * i_prof_filename, const void * i_password, morapi_Int32 i_password_len) Reads a dnn file name from a profile file name.","title":"morapi_DnnProf_static_readDnnFileName()"},{"location":"group__stream.html","text":"stream core A stream. More... Modules istream ostream Detailed Description A stream.","title":"stream"},{"location":"group__stream.html#stream","text":"core A stream. More...","title":"stream"},{"location":"group__stream.html#modules","text":"istream ostream","title":"Modules"},{"location":"group__stream.html#detailed-description","text":"A stream.","title":"Detailed Description"},{"location":"group__string.html","text":"string core String. More... Data Structures struct morapi_String Detailed Description String.","title":"string"},{"location":"group__string.html#string","text":"core String. More...","title":"string"},{"location":"group__string.html#data-structures","text":"struct morapi_String","title":"Data Structures"},{"location":"group__string.html#detailed-description","text":"String.","title":"Detailed Description"},{"location":"group__tensor.html","text":"tensor dnn Tensor. More... Data Structures struct morapi_Quant struct morapi_Tensor struct morapi_Tensors Macros #define morapi_QMode_isPerTensor (self) #define morapi_QMode_isPerChannel (self) #define morapi_QMode_isSymmetric (self) #define morapi_QMode_isAsymmetric (self) #define morapi_QMode_isDither (self) #define morapi_QMode_isPairwise (self) #define morapi_QMode_isGEMinus127 (self) Enumerations enum morapi_QMode { MORAPI_QMODE_NONE = (0x00000000), MORAPI_QMODE_PER_TENSOR_SYMMETRIC = (0x00000001 | 0x00000004), MORAPI_QMODE_PER_TENSOR_ASYMMETRIC = (0x00000001 | 0x00000008), MORAPI_QMODE_PER_CHANNEL_SYMMETRIC = (0x00000002 | 0x00000004), MORAPI_QMODE_PER_CHANNEL_ASYMMETRIC = (0x00000002 | 0x00000008), MORAPI_QMODE_DITHER = (0x00000010), MORAPI_QMODE_PAIRWISE = (0x00000020), MORAPI_QMODE_GE_MINUS127 = (0x00000040) } Detailed Description Tensor. Macro Definition Documentation morapi_QMode_isPerTensor #define morapi_QMode_isPerTensor( self) Ruturns whether qmode is per-tensor. morapi_QMode_isPerChannel #define morapi_QMode_isPerChannel( self) Ruturns whether qmode is per-channel. morapi_QMode_isSymmetric #define morapi_QMode_isSymmetric( self) Ruturns whether qmode is symmetric. morapi_QMode_isAsymmetric #define morapi_QMode_isAsymmetric( self) Ruturns whether qmode is asymmetric. morapi_QMode_isDither #define morapi_QMode_isDither( self) Ruturns whether qmode is dithered. morapi_QMode_isPairwise #define morapi_QMode_isPairwise( self) Ruturns whether qmode is pairwise. morapi_QMode_isGEMinus127 #define morapi_QMode_isGEMinus127( self) Ruturns whether qmode is greather-than or equal-to -127. Enumeration Type Documentation morapi_QMode enum morapi_QMode Quantization mode. Enumerator MORAPI_QMODE_NONE None. MORAPI_QMODE_PER_TENSOR_SYMMETRIC Per-tensor symmetric. MORAPI_QMODE_PER_TENSOR_ASYMMETRIC Per-tensor asynmmetric. MORAPI_QMODE_PER_CHANNEL_SYMMETRIC Per-channel symmetric. MORAPI_QMODE_PER_CHANNEL_ASYMMETRIC Per-channel asymmetric. MORAPI_QMODE_DITHER Dithered (optional). MORAPI_QMODE_PAIRWISE Pairwise (optional). MORAPI_QMODE_GE_MINUS127 Greater-than or equal-to -127 (optional).","title":"dnn.tensor"},{"location":"group__tensor.html#tensor","text":"dnn Tensor. More...","title":"tensor"},{"location":"group__tensor.html#data-structures","text":"struct morapi_Quant struct morapi_Tensor struct morapi_Tensors","title":"Data Structures"},{"location":"group__tensor.html#macros","text":"#define morapi_QMode_isPerTensor (self) #define morapi_QMode_isPerChannel (self) #define morapi_QMode_isSymmetric (self) #define morapi_QMode_isAsymmetric (self) #define morapi_QMode_isDither (self) #define morapi_QMode_isPairwise (self) #define morapi_QMode_isGEMinus127 (self)","title":"Macros"},{"location":"group__tensor.html#enumerations","text":"enum morapi_QMode { MORAPI_QMODE_NONE = (0x00000000), MORAPI_QMODE_PER_TENSOR_SYMMETRIC = (0x00000001 | 0x00000004), MORAPI_QMODE_PER_TENSOR_ASYMMETRIC = (0x00000001 | 0x00000008), MORAPI_QMODE_PER_CHANNEL_SYMMETRIC = (0x00000002 | 0x00000004), MORAPI_QMODE_PER_CHANNEL_ASYMMETRIC = (0x00000002 | 0x00000008), MORAPI_QMODE_DITHER = (0x00000010), MORAPI_QMODE_PAIRWISE = (0x00000020), MORAPI_QMODE_GE_MINUS127 = (0x00000040) }","title":"Enumerations"},{"location":"group__tensor.html#detailed-description","text":"Tensor.","title":"Detailed Description"},{"location":"group__tensor.html#macro-definition-documentation","text":"","title":"Macro Definition Documentation"},{"location":"group__tensor.html#morapi_qmode_ispertensor","text":"#define morapi_QMode_isPerTensor( self) Ruturns whether qmode is per-tensor.","title":"morapi_QMode_isPerTensor"},{"location":"group__tensor.html#morapi_qmode_isperchannel","text":"#define morapi_QMode_isPerChannel( self) Ruturns whether qmode is per-channel.","title":"morapi_QMode_isPerChannel"},{"location":"group__tensor.html#morapi_qmode_issymmetric","text":"#define morapi_QMode_isSymmetric( self) Ruturns whether qmode is symmetric.","title":"morapi_QMode_isSymmetric"},{"location":"group__tensor.html#morapi_qmode_isasymmetric","text":"#define morapi_QMode_isAsymmetric( self) Ruturns whether qmode is asymmetric.","title":"morapi_QMode_isAsymmetric"},{"location":"group__tensor.html#morapi_qmode_isdither","text":"#define morapi_QMode_isDither( self) Ruturns whether qmode is dithered.","title":"morapi_QMode_isDither"},{"location":"group__tensor.html#morapi_qmode_ispairwise","text":"#define morapi_QMode_isPairwise( self) Ruturns whether qmode is pairwise.","title":"morapi_QMode_isPairwise"},{"location":"group__tensor.html#morapi_qmode_isgeminus127","text":"#define morapi_QMode_isGEMinus127( self) Ruturns whether qmode is greather-than or equal-to -127.","title":"morapi_QMode_isGEMinus127"},{"location":"group__tensor.html#enumeration-type-documentation","text":"","title":"Enumeration Type Documentation"},{"location":"group__tensor.html#morapi_qmode","text":"enum morapi_QMode Quantization mode. Enumerator MORAPI_QMODE_NONE None. MORAPI_QMODE_PER_TENSOR_SYMMETRIC Per-tensor symmetric. MORAPI_QMODE_PER_TENSOR_ASYMMETRIC Per-tensor asynmmetric. MORAPI_QMODE_PER_CHANNEL_SYMMETRIC Per-channel symmetric. MORAPI_QMODE_PER_CHANNEL_ASYMMETRIC Per-channel asymmetric. MORAPI_QMODE_DITHER Dithered (optional). MORAPI_QMODE_PAIRWISE Pairwise (optional). MORAPI_QMODE_GE_MINUS127 Greater-than or equal-to -127 (optional).","title":"morapi_QMode"},{"location":"hierarchy.html","text":"Class Hierarchy This inheritance list is sorted roughly, but not completely, alphabetically: morapi_Binary Binary data morapi_BinaryLib Binary library morapi_ByteArray A byte array morapi_Device Device information morapi_DeviceBuf Device buffer morapi_DeviceBufCB Callback functions for device buffer morapi_DeviceCB Callback functions for device morapi_Dll Dynamic linked library morapi_Dnn Deep neural network morapi_DnnForward Forward-propagation functions morapi_DnnForwardArg Argument of forward-propagation function morapi_DnnLayer Dnn layer morapi_DnnLayerCB Callback functions for dnn layer morapi_DnnLayerPlan Dnn layer plan morapi_DnnNet Dnn net morapi_DnnNetPartition Dnn partitioning position morapi_DnnNetPlan Dnn net plan morapi_DnnOptimizer Dnn optimizer morapi_DnnPlan Dnn plan morapi_DnnProf Dnn profiler and profiling data morapi_DnnRecipe Recipe for dnn tuning morapi_DnnRoutine Dnn routine morapi_DnnRoutineCB Callback functions for dnn routine morapi_DnnRoutinePlan Dnn routine plan morapi_DnnSchemaPlan Dnn schema plan morapi_Env Environment morapi_Image Image morapi_ImagePlane Image plane morapi_IStream An input stream morapi_IStreamByteArray An input stream from a byte array morapi_IStreamFile A file input stream morapi_IStreamString An input stream from a string morapi_Json A json morapi_JsonArray A json array morapi_JsonData A union of Json data morapi_JsonObject A json object morapi_OStream An output stream morapi_OStreamByteArray An output stream to a byte array morapi_OStreamFile An output file stream morapi_OStreamString An output stream to a string morapi_Param Parameter key and value morapi_Params Parameters morapi_Quant Quantizer morapi_String A string morapi_Tensor Tensor morapi_Tensors Tensor array morapi_VF_IStream Virtual functions for morapi_IStream","title":"Class Hierarchy"},{"location":"hierarchy.html#class-hierarchy","text":"This inheritance list is sorted roughly, but not completely, alphabetically: morapi_Binary Binary data morapi_BinaryLib Binary library morapi_ByteArray A byte array morapi_Device Device information morapi_DeviceBuf Device buffer morapi_DeviceBufCB Callback functions for device buffer morapi_DeviceCB Callback functions for device morapi_Dll Dynamic linked library morapi_Dnn Deep neural network morapi_DnnForward Forward-propagation functions morapi_DnnForwardArg Argument of forward-propagation function morapi_DnnLayer Dnn layer morapi_DnnLayerCB Callback functions for dnn layer morapi_DnnLayerPlan Dnn layer plan morapi_DnnNet Dnn net morapi_DnnNetPartition Dnn partitioning position morapi_DnnNetPlan Dnn net plan morapi_DnnOptimizer Dnn optimizer morapi_DnnPlan Dnn plan morapi_DnnProf Dnn profiler and profiling data morapi_DnnRecipe Recipe for dnn tuning morapi_DnnRoutine Dnn routine morapi_DnnRoutineCB Callback functions for dnn routine morapi_DnnRoutinePlan Dnn routine plan morapi_DnnSchemaPlan Dnn schema plan morapi_Env Environment morapi_Image Image morapi_ImagePlane Image plane morapi_IStream An input stream morapi_IStreamByteArray An input stream from a byte array morapi_IStreamFile A file input stream morapi_IStreamString An input stream from a string morapi_Json A json morapi_JsonArray A json array morapi_JsonData A union of Json data morapi_JsonObject A json object morapi_OStream An output stream morapi_OStreamByteArray An output stream to a byte array morapi_OStreamFile An output file stream morapi_OStreamString An output stream to a string morapi_Param Parameter key and value morapi_Params Parameters morapi_Quant Quantizer morapi_String A string morapi_Tensor Tensor morapi_Tensors Tensor array morapi_VF_IStream Virtual functions for morapi_IStream","title":"Class Hierarchy"},{"location":"instance_norm.html","text":"Instance normalization. This layer normalizes an input by following equation i.e. applies a transformation that maintains the mean activation close to 0 and the activation standard deviation close to 1. Parameter epsilon : Number > 0.f, the default is 0.001.","title":"instance_norm"},{"location":"instance_norm.html#parameter","text":"epsilon : Number > 0.f, the default is 0.001.","title":"Parameter"},{"location":"layer_usage.html","text":"Layer List abs acos acosh adapt adaptive_unit_scale add and arg_max asin asinh atan atanh ave_pool2 batch_norm box_filter broadcast cast ccc ceil clip complex concat const conv1 conv2 conv2t cos cosh crop2 dcf decode_centernet decode_pelee decode_ssd decode_ulffd decode_yolov3 decode_yolov4 dense depth_to_space depthwise_conv2 div dropout elu equal erf exp fast_guided_filter fft2 fill floor gather global_average_pool global_max_pool greater greater_or_equal instance_norm leaky_relu linspace lrn lstm madd maximum max_pool2 mean minimum mul neg normalize not or padding2 pass permute pow prelu priorbox proposal reciprocal relu reshape resize roi_align roi_pool rotate round rsqrt separable_conv2 shape sigmoid sin sinh sink size slice softmax softplus softsign source space_to_depth sync split sqrt sub sum tan tanh tensor_to_scalar tile transpose unpool2 unsqueeze zero_padding2","title":"Layer List"},{"location":"layer_usage.html#layer-list","text":"abs acos acosh adapt adaptive_unit_scale add and arg_max asin asinh atan atanh ave_pool2 batch_norm box_filter broadcast cast ccc ceil clip complex concat const conv1 conv2 conv2t cos cosh crop2 dcf decode_centernet decode_pelee decode_ssd decode_ulffd decode_yolov3 decode_yolov4 dense depth_to_space depthwise_conv2 div dropout elu equal erf exp fast_guided_filter fft2 fill floor gather global_average_pool global_max_pool greater greater_or_equal instance_norm leaky_relu linspace lrn lstm madd maximum max_pool2 mean minimum mul neg normalize not or padding2 pass permute pow prelu priorbox proposal reciprocal relu reshape resize roi_align roi_pool rotate round rsqrt separable_conv2 shape sigmoid sin sinh sink size slice softmax softplus softsign source space_to_depth sync split sqrt sub sum tan tanh tensor_to_scalar tile transpose unpool2 unsqueeze zero_padding2","title":"Layer List"},{"location":"leaky_relu.html","text":"leaky_relu Leaky ReLU activation. This layer applies the following function to an input. Parameters alpha : Float, a leakage coefficient. The default is 0.3.","title":"leaky_relu"},{"location":"leaky_relu.html#leaky_relu","text":"Leaky ReLU activation. This layer applies the following function to an input.","title":"leaky_relu"},{"location":"leaky_relu.html#parameters","text":"alpha : Float, a leakage coefficient. The default is 0.3.","title":"Parameters"},{"location":"linspace.html","text":"linspace This layer applies linspace function like [1],[9],5 -> [1,3,5,7,9]. Parameter axis : Integer, axis along which the linspace is applied. The default is 0.","title":"linspace"},{"location":"linspace.html#linspace","text":"This layer applies linspace function like [1],[9],5 -> [1,3,5,7,9].","title":"linspace"},{"location":"linspace.html#parameter","text":"axis : Integer, axis along which the linspace is applied. The default is 0.","title":"Parameter"},{"location":"lrn.html","text":"Local response normalizaion. This layer performs local response normalization (LRN) calculated by the following equation. It is compatible with Caffe and supports only ACROSS_CHANNELS mode. Default parameters are , , and for AlexNet. Parameter alpha : the scaling parameter (default: 10^{-4}) beta : the exponent (default: 0.75) kappa : the offset (default: 2.0) local_size : the number of channels to sum over (for cross channel LRN) or the side length of the square region to sum over (for within channel LRN) is_within_ch : normalize in spatial dimension (default: false)","title":"lrn"},{"location":"lrn.html#parameter","text":"alpha : the scaling parameter (default: 10^{-4}) beta : the exponent (default: 0.75) kappa : the offset (default: 2.0) local_size : the number of channels to sum over (for cross channel LRN) or the side length of the square region to sum over (for within channel LRN) is_within_ch : normalize in spatial dimension (default: false)","title":"Parameter"},{"location":"lstm.html","text":"LSTM. This layer is so-called Long-Short Term Memory layer. Parameter activation : 3 strings, activation modes. The default is [\"sigmoid\", \"tanh\", \"tanh\"].","title":"lstm"},{"location":"lstm.html#parameter","text":"activation : 3 strings, activation modes. The default is [\"sigmoid\", \"tanh\", \"tanh\"].","title":"Parameter"},{"location":"madd.html","text":"madd Multiply-add. This layer performs multiply-add on an input by scale and bias ; i.e. . Parameters has_relu : Boolean, whether the layer applies a ReLU function to the output. The default is false. relu_max_value : Number, the max value of ReLU output. Valid only when has_relu is true and relu_max_value > 0.0f. The default is -1.0f, i.e. there is no max value. Weights scale : n-D tensor, scale factor. The shape must be a scaler (0D tensor), [channels] (1D tensor) or same as the input. The default is 1.0f (0D tensor). bias : n-D tensor, bias. The shape must be a scalar (0D tensor), [channels] (1D tensor) or same as the input. The default is 0.0f (0D tensor).","title":"madd"},{"location":"madd.html#madd","text":"Multiply-add. This layer performs multiply-add on an input by scale and bias ; i.e. .","title":"madd"},{"location":"madd.html#parameters","text":"has_relu : Boolean, whether the layer applies a ReLU function to the output. The default is false. relu_max_value : Number, the max value of ReLU output. Valid only when has_relu is true and relu_max_value > 0.0f. The default is -1.0f, i.e. there is no max value.","title":"Parameters"},{"location":"madd.html#weights","text":"scale : n-D tensor, scale factor. The shape must be a scaler (0D tensor), [channels] (1D tensor) or same as the input. The default is 1.0f (0D tensor). bias : n-D tensor, bias. The shape must be a scalar (0D tensor), [channels] (1D tensor) or same as the input. The default is 0.0f (0D tensor).","title":"Weights"},{"location":"max_pool2.html","text":"max_pool2 2D max pooling. This layer applies 2D max pooling for spatial data to an input. Parameters pool_size : Integer(s), factors by which to downscale (vertical, horizontal). Two integers mean [pool_h, pool_w]. One integer means that pool_h and pool_w have the same value. Default is [2, 2]. strides : Integer(s), stride values. Two integers mean [stride_y, stride_x]. One integer means that stride_y and stride_x have the same value. Default is [2, 2]. padding : String, padding mode. 'same_upper' and 'valid' is compatible with 'same' and 'valid' on Keras (TensorFlow) respectively. 'general' is arbitrary padding. 'caffe' is compatible with Caffe. Default is 'valid'. pads : Integer(s), pad value(s). Valid when padding is 'general'. Four integers mean [pad_top, pad_left, pad_bottom, pad_right]. Two integers mean [pad_top, pad_left] where pad_bottom and pad_right are same as pad_top and pad_left respectively. One integer means that pad_top, pad_left, pad_bottom and pad_right have the same value. Default is [0, 0, 0, 0].","title":"max_pool2"},{"location":"max_pool2.html#max_pool2","text":"2D max pooling. This layer applies 2D max pooling for spatial data to an input.","title":"max_pool2"},{"location":"max_pool2.html#parameters","text":"pool_size : Integer(s), factors by which to downscale (vertical, horizontal). Two integers mean [pool_h, pool_w]. One integer means that pool_h and pool_w have the same value. Default is [2, 2]. strides : Integer(s), stride values. Two integers mean [stride_y, stride_x]. One integer means that stride_y and stride_x have the same value. Default is [2, 2]. padding : String, padding mode. 'same_upper' and 'valid' is compatible with 'same' and 'valid' on Keras (TensorFlow) respectively. 'general' is arbitrary padding. 'caffe' is compatible with Caffe. Default is 'valid'. pads : Integer(s), pad value(s). Valid when padding is 'general'. Four integers mean [pad_top, pad_left, pad_bottom, pad_right]. Two integers mean [pad_top, pad_left] where pad_bottom and pad_right are same as pad_top and pad_left respectively. One integer means that pad_top, pad_left, pad_bottom and pad_right have the same value. Default is [0, 0, 0, 0].","title":"Parameters"},{"location":"maximum.html","text":"maximum Element-wise maximum This layer selects maximum of inputs in the same shape or broadcastable shapes. The number of inputs must 2.","title":"maximum"},{"location":"maximum.html#maximum","text":"Element-wise maximum This layer selects maximum of inputs in the same shape or broadcastable shapes. The number of inputs must 2.","title":"maximum"},{"location":"mean.html","text":"mean Mean along axis. This layer computes mean (average) values along the specified axis. Parameter axes : Integers, axes along which mean is applied. The default is [-1] (the last dimension). keepdims : Boolean, whether the tensor rank is saved. The default is false.","title":"mean"},{"location":"mean.html#mean","text":"Mean along axis. This layer computes mean (average) values along the specified axis.","title":"mean"},{"location":"mean.html#parameter","text":"axes : Integers, axes along which mean is applied. The default is [-1] (the last dimension). keepdims : Boolean, whether the tensor rank is saved. The default is false.","title":"Parameter"},{"location":"minimum.html","text":"minimum Element-wise minimum This layer selects minimum of inputs in the same shape or broadcastable shapes. The number of inputs must 2.","title":"minimum"},{"location":"minimum.html#minimum","text":"Element-wise minimum This layer selects minimum of inputs in the same shape or broadcastable shapes. The number of inputs must 2.","title":"minimum"},{"location":"mul.html","text":"Element-wise multiplication. This layer multiplies inputs in the same shape or broadcastable shapes. The number of inputs must be 2.","title":"mul"},{"location":"neg.html","text":"neg Neg function. This layer applies neg function to an input, element-wise.","title":"neg"},{"location":"neg.html#neg","text":"Neg function. This layer applies neg function to an input, element-wise.","title":"neg"},{"location":"normalize.html","text":"SSD normalization. This layer applies a normalization by given weight parameter. Weight gamma : gamma values for normalization. The shape is [channels].","title":"normalize"},{"location":"normalize.html#weight","text":"gamma : gamma values for normalization. The shape is [channels].","title":"Weight"},{"location":"not.html","text":"not Not logical operation.","title":"not"},{"location":"not.html#not","text":"Not logical operation.","title":"not"},{"location":"or.html","text":"or Element-wise or. This layer takes or of inputs in the same shape or broadcastable shapes. The number of inputs must be <= 8.","title":"or"},{"location":"or.html#or","text":"Element-wise or. This layer takes or of inputs in the same shape or broadcastable shapes. The number of inputs must be <= 8.","title":"or"},{"location":"padding2.html","text":"padding2 2D padding. Parameter pads : Integer, 2 integers, or 4 integers, padding values. If integer, the height and width are symmmetrically padded with the same value. If 2 integers, the height and weight are symetrically padded with [pad_h, pad_w]. If 4 integers, the height and weight are padded with [pad_top, pad_left, pad_bottom, pad_right]. The default is 0. mode : String, padding method. 'constant', 'reflect' and 'symmetric' are compatible with 'CONSTANT', 'REFLECT' and 'SYMMETRIC' on Tensorflow. 'edge' is compatible with 'edge' on ONNX The default is 'constant'. constant_value : Float, a constant value if mode is 'constant'. The default is 0.","title":"padding2"},{"location":"padding2.html#padding2","text":"2D padding.","title":"padding2"},{"location":"padding2.html#parameter","text":"pads : Integer, 2 integers, or 4 integers, padding values. If integer, the height and width are symmmetrically padded with the same value. If 2 integers, the height and weight are symetrically padded with [pad_h, pad_w]. If 4 integers, the height and weight are padded with [pad_top, pad_left, pad_bottom, pad_right]. The default is 0. mode : String, padding method. 'constant', 'reflect' and 'symmetric' are compatible with 'CONSTANT', 'REFLECT' and 'SYMMETRIC' on Tensorflow. 'edge' is compatible with 'edge' on ONNX The default is 'constant'. constant_value : Float, a constant value if mode is 'constant'. The default is 0.","title":"Parameter"},{"location":"pass.html","text":"Passing by with nothing. The input is passed to the output with doing nothing.","title":"pass"},{"location":"permute.html","text":"permute Permutation. This layer permutes the input tensor along the specified axis. Parameter axis : Integer, tensor axis to be permuted. The default is -1 (the last axis). dims : Integers, dimension indices to permute along the axis. The default is [0] (no permutation).","title":"permute"},{"location":"permute.html#permute","text":"Permutation. This layer permutes the input tensor along the specified axis.","title":"permute"},{"location":"permute.html#parameter","text":"axis : Integer, tensor axis to be permuted. The default is -1 (the last axis). dims : Integers, dimension indices to permute along the axis. The default is [0] (no permutation).","title":"Parameter"},{"location":"pow.html","text":"Element-wise power function. Given one input , this layer calculates for each element . Given two inputs and , this layer calculates for each element (power, scale and shift will be ignored). Error handling CPU naive routine: if the power is a negative integer the result will be 1.0, if it is a fraction the result will be NaN for negative inputs. AVX/Neon routines: if the base is negative the result will be 0, if the scale turns x negative the result will be NaN. Parameter power : Number, power value; default value = 1.0 scale : Number, scale value; default value = 1.0 shift : Number, shift value; default value = 0.0","title":"pow"},{"location":"pow.html#error-handling","text":"CPU naive routine: if the power is a negative integer the result will be 1.0, if it is a fraction the result will be NaN for negative inputs. AVX/Neon routines: if the base is negative the result will be 0, if the scale turns x negative the result will be NaN.","title":"Error handling"},{"location":"pow.html#parameter","text":"power : Number, power value; default value = 1.0 scale : Number, scale value; default value = 1.0 shift : Number, shift value; default value = 0.0","title":"Parameter"},{"location":"prelu.html","text":"prelu PReLU activation. This layer applies the following function to an input. Weight alpha : alpha values.","title":"prelu"},{"location":"prelu.html#prelu","text":"PReLU activation. This layer applies the following function to an input.","title":"prelu"},{"location":"prelu.html#weight","text":"alpha : alpha values.","title":"Weight"},{"location":"priorbox.html","text":"Prior box for SSD This layer generates the prior boxes designated pairs of width and height across all dimensions . The maximum number of prior boxes per each pixel is 8. Parameter img_w : Integer, width of input image. img_h : Integer, height of input image. box_widths : Array of integers, widths of bbox, the array size is up to 8 and must be the same as box_heights. box_heights : Array of integers, heights of bbox, the array size is up to 8 and must be the same as box_widths. variances : Array of 4 numbers, coefficients of prior box for each x position, y position, width, height. clips : Boolean, if set true, clips the detected box outside the image.","title":"priorbox"},{"location":"priorbox.html#parameter","text":"img_w : Integer, width of input image. img_h : Integer, height of input image. box_widths : Array of integers, widths of bbox, the array size is up to 8 and must be the same as box_heights. box_heights : Array of integers, heights of bbox, the array size is up to 8 and must be the same as box_widths. variances : Array of 4 numbers, coefficients of prior box for each x position, y position, width, height. clips : Boolean, if set true, clips the detected box outside the image.","title":"Parameter"},{"location":"proposal.html","text":"Proposal for Faster R-CNN. This layer performs proposal roi presentation operation for spatial data. It takes two inputs; cls_prob and bbox_pred. The shape of cls_prob is (h, w, 2 n_anchors). The shape of bbox_pred is (h, w, 4 n_anchors); i.e. when the last dimension is 36, it has 4 x 9 (anchors). The shape of output is (num_roi, 5) where num_roi is fixed value 300. Parameters feat_stride : stride of feature map in input image coordinate (determined by model structure). scales : list of scales of proposals origin : String, original channel-position when importing from other deep-learnig frameworks. 'chl' for channel last or 'chf' for channel first. The default is 'chl'.","title":"proposal"},{"location":"proposal.html#parameters","text":"feat_stride : stride of feature map in input image coordinate (determined by model structure). scales : list of scales of proposals origin : String, original channel-position when importing from other deep-learnig frameworks. 'chl' for channel last or 'chf' for channel first. The default is 'chl'.","title":"Parameters"},{"location":"reciprocal.html","text":"reciprocal Reciprocal function. This layer applies reciprocal function to an input, element-wise.","title":"reciprocal"},{"location":"reciprocal.html#reciprocal","text":"Reciprocal function. This layer applies reciprocal function to an input, element-wise.","title":"reciprocal"},{"location":"relu.html","text":"relu ReLU activation. This layer applies a ReLU function (max(x,0)) to an input. It also supports taking the upper bound of the output; i.e. min(max(x,0), max_value). Parameter max_value : Number, the layer takes the upper bound if max_value >= 0.f.","title":"relu"},{"location":"relu.html#relu","text":"ReLU activation. This layer applies a ReLU function (max(x,0)) to an input. It also supports taking the upper bound of the output; i.e. min(max(x,0), max_value).","title":"relu"},{"location":"relu.html#parameter","text":"max_value : Number, the layer takes the upper bound if max_value >= 0.f.","title":"Parameter"},{"location":"reshape.html","text":"reshape Reshaping. This layer changes the shape of input without changing the contents. Parameters shape : Integers, target shape. It supports Caffe style parameters, e.g. [0, 16, -1] means [128, 16, 16] when the input is [128, 256]. The default is [0, -1]; i.e. flatten without changing batch. origin : String, original channel-position when importing from other deep-learnig frameworks. 'chl' for channel last or 'chf' for channel first. The default is 'chl'.","title":"reshape"},{"location":"reshape.html#reshape","text":"Reshaping. This layer changes the shape of input without changing the contents.","title":"reshape"},{"location":"reshape.html#parameters","text":"shape : Integers, target shape. It supports Caffe style parameters, e.g. [0, 16, -1] means [128, 16, 16] when the input is [128, 256]. The default is [0, -1]; i.e. flatten without changing batch. origin : String, original channel-position when importing from other deep-learnig frameworks. 'chl' for channel last or 'chf' for channel first. The default is 'chl'.","title":"Parameters"},{"location":"resize.html","text":"resize Image resizing. This layer resize an input image in (B, H, W, C). Parameter size : Integers, shape of output image will be (size[0], size[1], C). scale : Floats, just like {\"size\": [floor(scale[0] * H), floor(scale[1] * W)]} mode : String, 'bilinear' (default) or 'nearest'. grid_mode : String, 'normal' (default) or 'tf'(tf.image.resize()) or 'tf_align'(tf.image.resize(align_corner=True)). nearest_mode_x : String, 'undefined' (default) or 'ceil' of 'float' or 'toward_zero' or 'away_from_zero' or 'nearest_up' or 'nearest_down' or 'nearest_toward_zero' or 'nearest_away_from_zero'. Ignored if mode is not nearest. nearest_mode_y : String, 'undefined' (default) or 'ceil' of 'float' or 'toward_zero' or 'away_from_zero' or 'nearest_up' or 'nearest_down' or 'nearest_toward_zero' or 'nearest_away_from_zero'. Ignored if mode is not nearest. keeps_aspect_raito : Bool, whether to keep the aspect ratio. padding_color : Array : Numbers, padding color.","title":"resize"},{"location":"resize.html#resize","text":"Image resizing. This layer resize an input image in (B, H, W, C).","title":"resize"},{"location":"resize.html#parameter","text":"size : Integers, shape of output image will be (size[0], size[1], C). scale : Floats, just like {\"size\": [floor(scale[0] * H), floor(scale[1] * W)]} mode : String, 'bilinear' (default) or 'nearest'. grid_mode : String, 'normal' (default) or 'tf'(tf.image.resize()) or 'tf_align'(tf.image.resize(align_corner=True)). nearest_mode_x : String, 'undefined' (default) or 'ceil' of 'float' or 'toward_zero' or 'away_from_zero' or 'nearest_up' or 'nearest_down' or 'nearest_toward_zero' or 'nearest_away_from_zero'. Ignored if mode is not nearest. nearest_mode_y : String, 'undefined' (default) or 'ceil' of 'float' or 'toward_zero' or 'away_from_zero' or 'nearest_up' or 'nearest_down' or 'nearest_toward_zero' or 'nearest_away_from_zero'. Ignored if mode is not nearest. keeps_aspect_raito : Bool, whether to keep the aspect ratio. padding_color : Array : Numbers, padding color.","title":"Parameter"},{"location":"roi_align.html","text":"ROI aligning for Mask R-CNN. This layer performs ROI aligning operation for spatial data. The algorithm is according to an ONNX's special spec, different from one in the original paper. It takes three inputs, input, ROIs and batch_indices. The shape of input is (b, h, w, c). The shape of ROIs is (num_roi, 4). The shape of batch_indices is (num_roi). The shape of output is (num_roi, output_h, output_w, c). Parameters output_h : The height of output output output_w : The width of output output pooling_mode : The mode of pooling method. One of \"average\", \"max\", \"onnx_max\". sampling_ratio : Specifies number of sampling points to obtain a output pixel given (if >0): sampling_ratio x sampling_ratio adaptive (if =0, default): ceil(roi_w / output_w) x ceil(roi_h / output_h) spatial_scale : Multiplicative spatial scale factor to translate ROI coords from their input scale to the scale used when pooling. Default is 1.0.","title":"roi_align"},{"location":"roi_align.html#parameters","text":"output_h : The height of output output output_w : The width of output output pooling_mode : The mode of pooling method. One of \"average\", \"max\", \"onnx_max\". sampling_ratio : Specifies number of sampling points to obtain a output pixel given (if >0): sampling_ratio x sampling_ratio adaptive (if =0, default): ceil(roi_w / output_w) x ceil(roi_h / output_h) spatial_scale : Multiplicative spatial scale factor to translate ROI coords from their input scale to the scale used when pooling. Default is 1.0.","title":"Parameters"},{"location":"roi_pool.html","text":"ROI pooling for Fast/Faster R-CNN. This layer performs ROI pooling operation for spatial data. It takes two inputs, input and rois. The shape of input is (h, w, c). The shape of rois is (num_roi, 5). The shape of output is (num_roi, pooled_h, pooled_w, c). Parameters pooled_h : The height of pooled output pooled_w : The width of pooled output spatial_scale : Multiplicative spatial scale factor to translate ROI coords from their input scale to the scale used when pooling (Determined by the network structure)","title":"roi_pool"},{"location":"roi_pool.html#parameters","text":"pooled_h : The height of pooled output pooled_w : The width of pooled output spatial_scale : Multiplicative spatial scale factor to translate ROI coords from their input scale to the scale used when pooling (Determined by the network structure)","title":"Parameters"},{"location":"rotate.html","text":"Image rotation. This layer rotate an input image with shape (B, H, W, C). Parameter angle : Integer, the degree of counter-clockwise rotation. It must be multiple of 90; e.g. -180, -90, 0, 90, 180, 270, ...","title":"rotate"},{"location":"rotate.html#parameter","text":"angle : Integer, the degree of counter-clockwise rotation. It must be multiple of 90; e.g. -180, -90, 0, 90, 180, 270, ...","title":"Parameter"},{"location":"round.html","text":"round Round function. This layer applies round function to an input, element-wise.","title":"round"},{"location":"round.html#round","text":"Round function. This layer applies round function to an input, element-wise.","title":"round"},{"location":"rsqrt.html","text":"Reciprocal of square root. This layer calculate reciprocal of square root of an input.","title":"rsqrt"},{"location":"separable_conv2.html","text":"2D separable convolution. This layer performs separable convolution operations on an input. A separable convolution is composed of a depthwise convolution (3x3) and a point convolution (1x1). The padding rule is compatible with Keras (TensorFlow) & Caffe. Parameters strides : Integer(s), stride values. Two integers mean [stride_y, stride_x]. One integer means stride_y and stride_x have the same value. The default is 1. padding : String, \"save\" and \"valid\" are compatible with Keras (TensorFlow). \"general\" is compatible with Caffe. pads : Integer(s), pad values to the input. Four integers mean [pad_top, pad_left, pad_bottom, pad_right]. Two integers mean [pad_top, pad_left] where pad_bottom and pad_right are same as pad_top and pad_left respectively. One integer means that pad_top, pad_left, pad_bottom and pad_right have the same value. The default is 0. depthwise_has_relu : Boolean, whether the layer applies a ReLU function after depthwise convolution. pointwise_has_relu : Boolean, whether the layer applies a ReLU function after pointwise convolution. depthwise_relu_max_value : Number pointwise_relu_max_value : Number","title":"separable_conv2"},{"location":"separable_conv2.html#parameters","text":"strides : Integer(s), stride values. Two integers mean [stride_y, stride_x]. One integer means stride_y and stride_x have the same value. The default is 1. padding : String, \"save\" and \"valid\" are compatible with Keras (TensorFlow). \"general\" is compatible with Caffe. pads : Integer(s), pad values to the input. Four integers mean [pad_top, pad_left, pad_bottom, pad_right]. Two integers mean [pad_top, pad_left] where pad_bottom and pad_right are same as pad_top and pad_left respectively. One integer means that pad_top, pad_left, pad_bottom and pad_right have the same value. The default is 0. depthwise_has_relu : Boolean, whether the layer applies a ReLU function after depthwise convolution. pointwise_has_relu : Boolean, whether the layer applies a ReLU function after pointwise convolution. depthwise_relu_max_value : Number pointwise_relu_max_value : Number","title":"Parameters"},{"location":"shape.html","text":"shape Shape. This layer outputs a shape of input. The data type of output is int32. Parameters origin : String, original channel-position when importing from other deep-learning frameworks. 'chl' for channel last or 'chf' for channel first. The output blob values depend on this parameter; e.g. if input blob shape is [1, 7, 7, 32], 'chl' outputs [1, 7, 7, 32] and 'chf' outputs [1, 32, 7, 7]. The default is 'chl'.","title":"shape"},{"location":"shape.html#shape","text":"Shape. This layer outputs a shape of input. The data type of output is int32.","title":"shape"},{"location":"shape.html#parameters","text":"origin : String, original channel-position when importing from other deep-learning frameworks. 'chl' for channel last or 'chf' for channel first. The output blob values depend on this parameter; e.g. if input blob shape is [1, 7, 7, 32], 'chl' outputs [1, 7, 7, 32] and 'chf' outputs [1, 32, 7, 7]. The default is 'chl'.","title":"Parameters"},{"location":"sigmoid.html","text":"sigmoid Sigmoid activation. This layer applies sigmoid function to an input; i.e. .","title":"sigmoid"},{"location":"sigmoid.html#sigmoid","text":"Sigmoid activation. This layer applies sigmoid function to an input; i.e. .","title":"sigmoid"},{"location":"sin.html","text":"sin Sine function This layer applies sine function to an input.","title":"sin"},{"location":"sin.html#sin","text":"Sine function This layer applies sine function to an input.","title":"sin"},{"location":"sinh.html","text":"sinh Sinh function. This layer applies sinh function to an input, element-wise.","title":"sinh"},{"location":"sinh.html#sinh","text":"Sinh function. This layer applies sinh function to an input, element-wise.","title":"sinh"},{"location":"sink.html","text":"sink Output of net. This layer holds an output of net. Parameters dtype : String, the data type of output blob. The default is 'float32'.","title":"sink"},{"location":"sink.html#sink","text":"Output of net. This layer holds an output of net.","title":"sink"},{"location":"sink.html#parameters","text":"dtype : String, the data type of output blob. The default is 'float32'.","title":"Parameters"},{"location":"size.html","text":"size Size. This layer outputs a size of input. The data type of output is int32.","title":"size"},{"location":"size.html#size","text":"Size. This layer outputs a size of input. The data type of output is int32.","title":"size"},{"location":"slice.html","text":"slice Slicing. This layer slices an input into an output along multiple axes. Parameter axes : Integer Array starts : Integer Array ends : Integer Array","title":"slice"},{"location":"slice.html#slice","text":"Slicing. This layer slices an input into an output along multiple axes.","title":"slice"},{"location":"slice.html#parameter","text":"axes : Integer Array starts : Integer Array ends : Integer Array","title":"Parameter"},{"location":"softmax.html","text":"softmax Softmax activation. This layer applies softmax function to an input. Parameter axis : Integer, axis along which the softmax normalization is applied. The default is -1 (the last dimension).","title":"softmax"},{"location":"softmax.html#softmax","text":"Softmax activation. This layer applies softmax function to an input.","title":"softmax"},{"location":"softmax.html#parameter","text":"axis : Integer, axis along which the softmax normalization is applied. The default is -1 (the last dimension).","title":"Parameter"},{"location":"softplus.html","text":"softplus Softplus activation. This layer applies softplus function to an input; i.e.","title":"softplus"},{"location":"softplus.html#softplus","text":"Softplus activation. This layer applies softplus function to an input; i.e.","title":"softplus"},{"location":"softsign.html","text":"softsign Softsign function. This layer applies softsign function to an input, element-wise.","title":"softsign"},{"location":"softsign.html#softsign","text":"Softsign function. This layer applies softsign function to an input, element-wise.","title":"softsign"},{"location":"source.html","text":"source Input of net. This layer holds an input of net. Parameters dtype : String, the data type of input blob. The default is 'float32'. shape : Integers, the shape of input blob. The default is [1].","title":"source"},{"location":"source.html#source","text":"Input of net. This layer holds an input of net.","title":"source"},{"location":"source.html#parameters","text":"dtype : String, the data type of input blob. The default is 'float32'. shape : Integers, the shape of input blob. The default is [1].","title":"Parameters"},{"location":"space_to_depth.html","text":"space_to_depth Reshaping. This layer arranges the space (height, width) to depth by block_size Parameters block_size : Integer.","title":"space_to_depth"},{"location":"space_to_depth.html#space_to_depth","text":"Reshaping. This layer arranges the space (height, width) to depth by block_size","title":"space_to_depth"},{"location":"space_to_depth.html#parameters","text":"block_size : Integer.","title":"Parameters"},{"location":"split.html","text":"split Splitting This layer splits an input into outputs at the specified axis and split_points. The maximum size of output array is 8. Parameter axis : Integer, axis along which to split. split_points : Integer Array, the maximum size of array is 7.","title":"split"},{"location":"split.html#split","text":"Splitting This layer splits an input into outputs at the specified axis and split_points. The maximum size of output array is 8.","title":"split"},{"location":"split.html#parameter","text":"axis : Integer, axis along which to split. split_points : Integer Array, the maximum size of array is 7.","title":"Parameter"},{"location":"sqrt.html","text":"sqrt Square root. This layer applies sqrt function to an input.","title":"sqrt"},{"location":"sqrt.html#sqrt","text":"Square root. This layer applies sqrt function to an input.","title":"sqrt"},{"location":"structmorapi__Binary.html","text":"morapi_Binary Struct Reference dnn \u00bb binary Binary data. More... #include <morapi_softneuro.h> Data Fields morapi_Uint64 id morapi_Int32 size morapi_Uint8 * data Detailed Description Binary data. Field Documentation id morapi_Uint64 id binary id. size morapi_Int32 size size of binary. data morapi_Uint8 * data binary data.","title":"morapi_Binary"},{"location":"structmorapi__Binary.html#morapi_binary-struct-reference","text":"dnn \u00bb binary Binary data. More... #include <morapi_softneuro.h>","title":"morapi_Binary Struct Reference"},{"location":"structmorapi__Binary.html#data-fields","text":"morapi_Uint64 id morapi_Int32 size morapi_Uint8 * data","title":"Data Fields"},{"location":"structmorapi__Binary.html#detailed-description","text":"Binary data.","title":"Detailed Description"},{"location":"structmorapi__Binary.html#field-documentation","text":"","title":"Field Documentation"},{"location":"structmorapi__Binary.html#id","text":"morapi_Uint64 id binary id.","title":"id"},{"location":"structmorapi__Binary.html#size","text":"morapi_Int32 size size of binary.","title":"size"},{"location":"structmorapi__Binary.html#data","text":"morapi_Uint8 * data binary data.","title":"data"},{"location":"structmorapi__BinaryLib.html","text":"morapi_BinaryLib Struct Reference dnn \u00bb binary Binary library. More... #include <morapi_softneuro.h> Public Member Functions morapi_Binary * morapi_BinaryLib_add ( morapi_BinaryLib *self, morapi_Uint64 i_id, morapi_Int32 i_size) morapi_Binary * morapi_BinaryLib_find ( morapi_BinaryLib *self, morapi_Uint64 i_id) Detailed Description Binary library. Member Function Documentation morapi_BinaryLib_add() morapi_Binary * morapi_BinaryLib_add ( morapi_BinaryLib * self, morapi_Uint64 i_id, morapi_Int32 i_size) Adds a binary. Parameters self : binary library i_id : new binary id i_size : new binary size morapi_BinaryLib_find() morapi_Binary * morapi_BinaryLib_find ( morapi_BinaryLib * self, morapi_Uint64 i_id) Finds the binary. If it doesn't exist, returns NULL. Parameters self : binary library i_id : binary id","title":"morapi_BinaryLib"},{"location":"structmorapi__BinaryLib.html#morapi_binarylib-struct-reference","text":"dnn \u00bb binary Binary library. More... #include <morapi_softneuro.h>","title":"morapi_BinaryLib Struct Reference"},{"location":"structmorapi__BinaryLib.html#public-member-functions","text":"morapi_Binary * morapi_BinaryLib_add ( morapi_BinaryLib *self, morapi_Uint64 i_id, morapi_Int32 i_size) morapi_Binary * morapi_BinaryLib_find ( morapi_BinaryLib *self, morapi_Uint64 i_id)","title":"Public Member Functions"},{"location":"structmorapi__BinaryLib.html#detailed-description","text":"Binary library.","title":"Detailed Description"},{"location":"structmorapi__BinaryLib.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__BinaryLib.html#morapi_binarylib_add","text":"morapi_Binary * morapi_BinaryLib_add ( morapi_BinaryLib * self, morapi_Uint64 i_id, morapi_Int32 i_size) Adds a binary. Parameters self : binary library i_id : new binary id i_size : new binary size","title":"morapi_BinaryLib_add()"},{"location":"structmorapi__BinaryLib.html#morapi_binarylib_find","text":"morapi_Binary * morapi_BinaryLib_find ( morapi_BinaryLib * self, morapi_Uint64 i_id) Finds the binary. If it doesn't exist, returns NULL. Parameters self : binary library i_id : binary id","title":"morapi_BinaryLib_find()"},{"location":"structmorapi__ByteArray.html","text":"morapi_ByteArray Struct Reference core \u00bb byte_array A byte array. More... #include <morapi_core_old.h> Public Member Functions Construction and destruction morapi_ByteArray * morapi_create_ByteArray ( morapi_Env *io_env) morapi_Result morapi_destroy_ByteArray ( morapi_Env *io_env, morapi_ByteArray *self) morapi_Result morapi_ByteArray_initialize ( morapi_ByteArray *self) morapi_Result morapi_ByteArray_init ( morapi_ByteArray *self, morapi_Size i_alloc_size, void *i_data) morapi_Result morapi_ByteArray_cleanup ( morapi_ByteArray *self) Operation morapi_Result morapi_ByteArray_clear ( morapi_ByteArray *self) morapi_Result morapi_ByteArray_resize ( morapi_ByteArray *self, morapi_Size i_size) morapi_Result morapi_ByteArray_insert ( morapi_ByteArray *self, morapi_Pos i_ins_pos, const morapi_Uint8 *i_data, morapi_Size i_data_size) morapi_Result morapi_ByteArray_set ( morapi_ByteArray *self, const morapi_Uint8 *i_data, morapi_Size i_data_size) morapi_Result morapi_ByteArray_append ( morapi_ByteArray *self, const morapi_Uint8 *i_data, morapi_Size i_data_size) morapi_Result morapi_ByteArray_appendUint8 ( morapi_ByteArray *self, morapi_Uint8 i_u8) morapi_Result morapi_ByteArray_overwrite ( morapi_ByteArray *self, morapi_Pos i_pos, const morapi_Uint8 *i_data, morapi_Size i_data_size) morapi_Result morapi_ByteArray_remove ( morapi_ByteArray *self, morapi_Pos i_begi, morapi_Pos i_endi) Getters morapi_Env * morapi_ByteArray_getEnv ( morapi_ByteArray *self) morapi_Size morapi_ByteArray_getSize (const morapi_ByteArray *self) morapi_Size morapi_ByteArray_getAllocSize (const morapi_ByteArray *self) morapi_Uint8 * morapi_ByteArray_get ( morapi_ByteArray *self) Detailed Description A byte array. Member Function Documentation morapi_create_ByteArray() morapi_ByteArray * morapi_create_ByteArray ( morapi_Env * io_env) Creates. morapi_destroy_ByteArray() morapi_Result morapi_destroy_ByteArray ( morapi_Env * io_env, morapi_ByteArray * self) Destroys. morapi_ByteArray_initialize() morapi_Result morapi_ByteArray_initialize ( morapi_ByteArray * self) Initializes with default parameters. morapi_ByteArray_init() morapi_Result morapi_ByteArray_init ( morapi_ByteArray * self, morapi_Size i_alloc_size, void * i_data) Initializes a byte array. If i_data is not NULL, allocation size and the memory are fixed to i_alloc_size and i_data respectively. Note that the size of the byte array is always 0 just after morapi_ByteArray_init() . If you want to have the byte array as a shallow copy of i_data, calls morapi_ByteArray_borrow(). If i_data is NULL, required memory is allocated internally as necessary. morapi_ByteArray_cleanup() morapi_Result morapi_ByteArray_cleanup ( morapi_ByteArray * self) Cleans up a byte array. morapi_ByteArray_clear() morapi_Result morapi_ByteArray_clear ( morapi_ByteArray * self) Clears a byte array. morapi_ByteArray_resize() morapi_Result morapi_ByteArray_resize ( morapi_ByteArray * self, morapi_Size i_size) Resizes a byte array. Newly assigned memory is NOT initialized; i.e. the value is undefined. morapi_ByteArray_insert() morapi_Result morapi_ByteArray_insert ( morapi_ByteArray * self, morapi_Pos i_ins_pos, const morapi_Uint8 * i_data, morapi_Size i_data_size) Inserts data into a byte array. morapi_ByteArray_set() morapi_Result morapi_ByteArray_set ( morapi_ByteArray * self, const morapi_Uint8 * i_data, morapi_Size i_data_size) Sets a byte array i_data. morapi_ByteArray_append() morapi_Result morapi_ByteArray_append ( morapi_ByteArray * self, const morapi_Uint8 * i_data, morapi_Size i_data_size) Appends i_data to an end of a byte array. morapi_ByteArray_appendUint8() morapi_Result morapi_ByteArray_appendUint8 ( morapi_ByteArray * self, morapi_Uint8 i_u8) Appends i_u8 to an end of a byte array. morapi_ByteArray_overwrite() morapi_Result morapi_ByteArray_overwrite ( morapi_ByteArray * self, morapi_Pos i_pos, const morapi_Uint8 * i_data, morapi_Size i_data_size) Overwrites i_data at position i_pos in a byte array. It automatically stretch the size of the byte array if needed. morapi_ByteArray_remove() morapi_Result morapi_ByteArray_remove ( morapi_ByteArray * self, morapi_Pos i_begi, morapi_Pos i_endi) Removes data from a byte array. morapi_ByteArray_getEnv() morapi_Env * morapi_ByteArray_getEnv ( morapi_ByteArray * self) Gets an environment. morapi_ByteArray_getSize() morapi_Size morapi_ByteArray_getSize (const morapi_ByteArray * self) Geta a size of a byte array. morapi_ByteArray_getAllocSize() morapi_Size morapi_ByteArray_getAllocSize (const morapi_ByteArray * self) Gets an allocated size of a byte array. morapi_ByteArray_get() morapi_Uint8 * morapi_ByteArray_get ( morapi_ByteArray * self) Gets a head pointer to data.","title":"morapi_ByteArray Struct Reference"},{"location":"structmorapi__ByteArray.html#morapi_bytearray-struct-reference","text":"core \u00bb byte_array A byte array. More... #include <morapi_core_old.h>","title":"morapi_ByteArray Struct Reference"},{"location":"structmorapi__ByteArray.html#public-member-functions","text":"","title":"Public Member Functions"},{"location":"structmorapi__ByteArray.html#construction-and-destruction","text":"morapi_ByteArray * morapi_create_ByteArray ( morapi_Env *io_env) morapi_Result morapi_destroy_ByteArray ( morapi_Env *io_env, morapi_ByteArray *self) morapi_Result morapi_ByteArray_initialize ( morapi_ByteArray *self) morapi_Result morapi_ByteArray_init ( morapi_ByteArray *self, morapi_Size i_alloc_size, void *i_data) morapi_Result morapi_ByteArray_cleanup ( morapi_ByteArray *self)","title":"Construction and destruction"},{"location":"structmorapi__ByteArray.html#operation","text":"morapi_Result morapi_ByteArray_clear ( morapi_ByteArray *self) morapi_Result morapi_ByteArray_resize ( morapi_ByteArray *self, morapi_Size i_size) morapi_Result morapi_ByteArray_insert ( morapi_ByteArray *self, morapi_Pos i_ins_pos, const morapi_Uint8 *i_data, morapi_Size i_data_size) morapi_Result morapi_ByteArray_set ( morapi_ByteArray *self, const morapi_Uint8 *i_data, morapi_Size i_data_size) morapi_Result morapi_ByteArray_append ( morapi_ByteArray *self, const morapi_Uint8 *i_data, morapi_Size i_data_size) morapi_Result morapi_ByteArray_appendUint8 ( morapi_ByteArray *self, morapi_Uint8 i_u8) morapi_Result morapi_ByteArray_overwrite ( morapi_ByteArray *self, morapi_Pos i_pos, const morapi_Uint8 *i_data, morapi_Size i_data_size) morapi_Result morapi_ByteArray_remove ( morapi_ByteArray *self, morapi_Pos i_begi, morapi_Pos i_endi)","title":"Operation"},{"location":"structmorapi__ByteArray.html#getters","text":"morapi_Env * morapi_ByteArray_getEnv ( morapi_ByteArray *self) morapi_Size morapi_ByteArray_getSize (const morapi_ByteArray *self) morapi_Size morapi_ByteArray_getAllocSize (const morapi_ByteArray *self) morapi_Uint8 * morapi_ByteArray_get ( morapi_ByteArray *self)","title":"Getters"},{"location":"structmorapi__ByteArray.html#detailed-description","text":"A byte array.","title":"Detailed Description"},{"location":"structmorapi__ByteArray.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__ByteArray.html#morapi_create_bytearray","text":"morapi_ByteArray * morapi_create_ByteArray ( morapi_Env * io_env) Creates.","title":"morapi_create_ByteArray()"},{"location":"structmorapi__ByteArray.html#morapi_destroy_bytearray","text":"morapi_Result morapi_destroy_ByteArray ( morapi_Env * io_env, morapi_ByteArray * self) Destroys.","title":"morapi_destroy_ByteArray()"},{"location":"structmorapi__ByteArray.html#morapi_bytearray_initialize","text":"morapi_Result morapi_ByteArray_initialize ( morapi_ByteArray * self) Initializes with default parameters.","title":"morapi_ByteArray_initialize()"},{"location":"structmorapi__ByteArray.html#morapi_bytearray_init","text":"morapi_Result morapi_ByteArray_init ( morapi_ByteArray * self, morapi_Size i_alloc_size, void * i_data) Initializes a byte array. If i_data is not NULL, allocation size and the memory are fixed to i_alloc_size and i_data respectively. Note that the size of the byte array is always 0 just after morapi_ByteArray_init() . If you want to have the byte array as a shallow copy of i_data, calls morapi_ByteArray_borrow(). If i_data is NULL, required memory is allocated internally as necessary.","title":"morapi_ByteArray_init()"},{"location":"structmorapi__ByteArray.html#morapi_bytearray_cleanup","text":"morapi_Result morapi_ByteArray_cleanup ( morapi_ByteArray * self) Cleans up a byte array.","title":"morapi_ByteArray_cleanup()"},{"location":"structmorapi__ByteArray.html#morapi_bytearray_clear","text":"morapi_Result morapi_ByteArray_clear ( morapi_ByteArray * self) Clears a byte array.","title":"morapi_ByteArray_clear()"},{"location":"structmorapi__ByteArray.html#morapi_bytearray_resize","text":"morapi_Result morapi_ByteArray_resize ( morapi_ByteArray * self, morapi_Size i_size) Resizes a byte array. Newly assigned memory is NOT initialized; i.e. the value is undefined.","title":"morapi_ByteArray_resize()"},{"location":"structmorapi__ByteArray.html#morapi_bytearray_insert","text":"morapi_Result morapi_ByteArray_insert ( morapi_ByteArray * self, morapi_Pos i_ins_pos, const morapi_Uint8 * i_data, morapi_Size i_data_size) Inserts data into a byte array.","title":"morapi_ByteArray_insert()"},{"location":"structmorapi__ByteArray.html#morapi_bytearray_set","text":"morapi_Result morapi_ByteArray_set ( morapi_ByteArray * self, const morapi_Uint8 * i_data, morapi_Size i_data_size) Sets a byte array i_data.","title":"morapi_ByteArray_set()"},{"location":"structmorapi__ByteArray.html#morapi_bytearray_append","text":"morapi_Result morapi_ByteArray_append ( morapi_ByteArray * self, const morapi_Uint8 * i_data, morapi_Size i_data_size) Appends i_data to an end of a byte array.","title":"morapi_ByteArray_append()"},{"location":"structmorapi__ByteArray.html#morapi_bytearray_appenduint8","text":"morapi_Result morapi_ByteArray_appendUint8 ( morapi_ByteArray * self, morapi_Uint8 i_u8) Appends i_u8 to an end of a byte array.","title":"morapi_ByteArray_appendUint8()"},{"location":"structmorapi__ByteArray.html#morapi_bytearray_overwrite","text":"morapi_Result morapi_ByteArray_overwrite ( morapi_ByteArray * self, morapi_Pos i_pos, const morapi_Uint8 * i_data, morapi_Size i_data_size) Overwrites i_data at position i_pos in a byte array. It automatically stretch the size of the byte array if needed.","title":"morapi_ByteArray_overwrite()"},{"location":"structmorapi__ByteArray.html#morapi_bytearray_remove","text":"morapi_Result morapi_ByteArray_remove ( morapi_ByteArray * self, morapi_Pos i_begi, morapi_Pos i_endi) Removes data from a byte array.","title":"morapi_ByteArray_remove()"},{"location":"structmorapi__ByteArray.html#morapi_bytearray_getenv","text":"morapi_Env * morapi_ByteArray_getEnv ( morapi_ByteArray * self) Gets an environment.","title":"morapi_ByteArray_getEnv()"},{"location":"structmorapi__ByteArray.html#morapi_bytearray_getsize","text":"morapi_Size morapi_ByteArray_getSize (const morapi_ByteArray * self) Geta a size of a byte array.","title":"morapi_ByteArray_getSize()"},{"location":"structmorapi__ByteArray.html#morapi_bytearray_getallocsize","text":"morapi_Size morapi_ByteArray_getAllocSize (const morapi_ByteArray * self) Gets an allocated size of a byte array.","title":"morapi_ByteArray_getAllocSize()"},{"location":"structmorapi__ByteArray.html#morapi_bytearray_get","text":"morapi_Uint8 * morapi_ByteArray_get ( morapi_ByteArray * self) Gets a head pointer to data.","title":"morapi_ByteArray_get()"},{"location":"structmorapi__Device.html","text":"morapi_Device Struct Reference dnn \u00bb device Device information. More... #include <morapi_softneuro.h> Public Member Functions void * morapi_Device_getObj (const morapi_Device *self) const morapi_Char * morapi_Device_getName (const morapi_Device *self) morapi_Int32 morapi_Device_getIndex (const morapi_Device *self) morapi_Result morapi_Device_setArchID ( morapi_Device *self, morapi_Uint64 i_arch_id) morapi_Uint64 morapi_Device_getArchID (const morapi_Device *self) morapi_Result morapi_Device_setMemoryModel ( morapi_Device *self, morapi_DeviceMemoryModel i_memory_model) morapi_DeviceMemoryModel morapi_Device_getMemoryModel (const morapi_Device *self) morapi_Result morapi_Device_setThreadModel ( morapi_Device *self, morapi_DeviceThreadModel i_thread_model) morapi_DeviceThreadModel morapi_Device_getThreadModel (const morapi_Device *self) morapi_Result morapi_Device_setCacheLineSize ( morapi_Device *self, morapi_Int32 i_cache_line_size) morapi_Int32 morapi_Device_getCacheLineSize (const morapi_Device *self) morapi_Int32 morapi_Device_getFeatureNum (const morapi_Device *self) const morapi_Char ** morapi_Device_getFeatures (const morapi_Device *self) Related Functions morapi_Int32 morapi_Dnn_static_getDeviceNum ( morapi_Env *env) const morapi_Device * morapi_Dnn_static_getDevice ( morapi_Env *env, morapi_Int32 i_index) const morapi_Device * morapi_Dnn_static_findDevice ( morapi_Env *env, const morapi_Char *i_device_name) Detailed Description Device information. This structure holds device specific information such as memory model, thread model, cache line size and so on. See also morapi_DeviceCB , MORAPI_INSTALL_DEVICE() Member Function Documentation morapi_Device_getObj() void * morapi_Device_getObj (const morapi_Device * self) Gets the device object. Parameters self : device module morapi_Device_getName() const morapi_Char * morapi_Device_getName (const morapi_Device * self) Gets the device name. Parameters self : device module morapi_Device_getIndex() morapi_Int32 morapi_Device_getIndex (const morapi_Device * self) Gets the index. Parameters self : device module morapi_Device_setArchID() morapi_Result morapi_Device_setArchID ( morapi_Device * self, morapi_Uint64 i_arch_id) Sets the architecture ID. Parameters self : device module i_arch_id : architecture id morapi_Device_getArchID() morapi_Uint64 morapi_Device_getArchID (const morapi_Device * self) Gets the device architecture ID. Parameters self : device module morapi_Device_setMemoryModel() morapi_Result morapi_Device_setMemoryModel ( morapi_Device * self, morapi_DeviceMemoryModel i_memory_model) Sets the device memory model. The default is MORAPI_DEVICE_MEMORY_MODEL_DEDICATED. Parameters self : device module i_memory_model : memory model morapi_Device_getMemoryModel() morapi_DeviceMemoryModel morapi_Device_getMemoryModel (const morapi_Device * self) Gets the device memory model. Parameters self : device module morapi_Device_setThreadModel() morapi_Result morapi_Device_setThreadModel ( morapi_Device * self, morapi_DeviceThreadModel i_thread_model) Sets the device thread model. The default is MORAPI_DEVICE_THREAD_MODEL_UNSHARED. Parameters self : device module i_thread_model : thread model morapi_Device_getThreadModel() morapi_DeviceThreadModel morapi_Device_getThreadModel (const morapi_Device * self) Gets the device thread model. Parameters self : device model morapi_Device_setCacheLineSize() morapi_Result morapi_Device_setCacheLineSize ( morapi_Device * self, morapi_Int32 i_cache_line_size) Sets the cache line size. The default is 64 (arm and intel cpu). Parameters self : device. i_cache_line_size : cache line size. morapi_Device_getCacheLineSize() morapi_Int32 morapi_Device_getCacheLineSize (const morapi_Device * self) Gets the cache line size. The default is 64 (arm and intel cpu). Parameters self : device. morapi_Device_getFeatureNum() morapi_Int32 morapi_Device_getFeatureNum (const morapi_Device * self) Gets the number of features. morapi_Device_getFeatures() const morapi_Char ** morapi_Device_getFeatures (const morapi_Device * self) Gets the features. Friends And Related Function Documentation morapi_Dnn_static_getDeviceNum() morapi_Int32 morapi_Dnn_static_getDeviceNum ( morapi_Env * env) Gets the number of devices. morapi_Dnn_static_getDevice() const morapi_Device * morapi_Dnn_static_getDevice ( morapi_Env * env, morapi_Int32 i_index) Gets devices. morapi_Dnn_static_findDevice() const morapi_Device * morapi_Dnn_static_findDevice ( morapi_Env * env, const morapi_Char * i_device_name) Finds a device.","title":"morapi_Device"},{"location":"structmorapi__Device.html#morapi_device-struct-reference","text":"dnn \u00bb device Device information. More... #include <morapi_softneuro.h>","title":"morapi_Device Struct Reference"},{"location":"structmorapi__Device.html#public-member-functions","text":"void * morapi_Device_getObj (const morapi_Device *self) const morapi_Char * morapi_Device_getName (const morapi_Device *self) morapi_Int32 morapi_Device_getIndex (const morapi_Device *self) morapi_Result morapi_Device_setArchID ( morapi_Device *self, morapi_Uint64 i_arch_id) morapi_Uint64 morapi_Device_getArchID (const morapi_Device *self) morapi_Result morapi_Device_setMemoryModel ( morapi_Device *self, morapi_DeviceMemoryModel i_memory_model) morapi_DeviceMemoryModel morapi_Device_getMemoryModel (const morapi_Device *self) morapi_Result morapi_Device_setThreadModel ( morapi_Device *self, morapi_DeviceThreadModel i_thread_model) morapi_DeviceThreadModel morapi_Device_getThreadModel (const morapi_Device *self) morapi_Result morapi_Device_setCacheLineSize ( morapi_Device *self, morapi_Int32 i_cache_line_size) morapi_Int32 morapi_Device_getCacheLineSize (const morapi_Device *self) morapi_Int32 morapi_Device_getFeatureNum (const morapi_Device *self) const morapi_Char ** morapi_Device_getFeatures (const morapi_Device *self)","title":"Public Member Functions"},{"location":"structmorapi__Device.html#related-functions","text":"morapi_Int32 morapi_Dnn_static_getDeviceNum ( morapi_Env *env) const morapi_Device * morapi_Dnn_static_getDevice ( morapi_Env *env, morapi_Int32 i_index) const morapi_Device * morapi_Dnn_static_findDevice ( morapi_Env *env, const morapi_Char *i_device_name)","title":"Related Functions"},{"location":"structmorapi__Device.html#detailed-description","text":"Device information. This structure holds device specific information such as memory model, thread model, cache line size and so on. See also morapi_DeviceCB , MORAPI_INSTALL_DEVICE()","title":"Detailed Description"},{"location":"structmorapi__Device.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__Device.html#morapi_device_getobj","text":"void * morapi_Device_getObj (const morapi_Device * self) Gets the device object. Parameters self : device module","title":"morapi_Device_getObj()"},{"location":"structmorapi__Device.html#morapi_device_getname","text":"const morapi_Char * morapi_Device_getName (const morapi_Device * self) Gets the device name. Parameters self : device module","title":"morapi_Device_getName()"},{"location":"structmorapi__Device.html#morapi_device_getindex","text":"morapi_Int32 morapi_Device_getIndex (const morapi_Device * self) Gets the index. Parameters self : device module","title":"morapi_Device_getIndex()"},{"location":"structmorapi__Device.html#morapi_device_setarchid","text":"morapi_Result morapi_Device_setArchID ( morapi_Device * self, morapi_Uint64 i_arch_id) Sets the architecture ID. Parameters self : device module i_arch_id : architecture id","title":"morapi_Device_setArchID()"},{"location":"structmorapi__Device.html#morapi_device_getarchid","text":"morapi_Uint64 morapi_Device_getArchID (const morapi_Device * self) Gets the device architecture ID. Parameters self : device module","title":"morapi_Device_getArchID()"},{"location":"structmorapi__Device.html#morapi_device_setmemorymodel","text":"morapi_Result morapi_Device_setMemoryModel ( morapi_Device * self, morapi_DeviceMemoryModel i_memory_model) Sets the device memory model. The default is MORAPI_DEVICE_MEMORY_MODEL_DEDICATED. Parameters self : device module i_memory_model : memory model","title":"morapi_Device_setMemoryModel()"},{"location":"structmorapi__Device.html#morapi_device_getmemorymodel","text":"morapi_DeviceMemoryModel morapi_Device_getMemoryModel (const morapi_Device * self) Gets the device memory model. Parameters self : device module","title":"morapi_Device_getMemoryModel()"},{"location":"structmorapi__Device.html#morapi_device_setthreadmodel","text":"morapi_Result morapi_Device_setThreadModel ( morapi_Device * self, morapi_DeviceThreadModel i_thread_model) Sets the device thread model. The default is MORAPI_DEVICE_THREAD_MODEL_UNSHARED. Parameters self : device module i_thread_model : thread model","title":"morapi_Device_setThreadModel()"},{"location":"structmorapi__Device.html#morapi_device_getthreadmodel","text":"morapi_DeviceThreadModel morapi_Device_getThreadModel (const morapi_Device * self) Gets the device thread model. Parameters self : device model","title":"morapi_Device_getThreadModel()"},{"location":"structmorapi__Device.html#morapi_device_setcachelinesize","text":"morapi_Result morapi_Device_setCacheLineSize ( morapi_Device * self, morapi_Int32 i_cache_line_size) Sets the cache line size. The default is 64 (arm and intel cpu). Parameters self : device. i_cache_line_size : cache line size.","title":"morapi_Device_setCacheLineSize()"},{"location":"structmorapi__Device.html#morapi_device_getcachelinesize","text":"morapi_Int32 morapi_Device_getCacheLineSize (const morapi_Device * self) Gets the cache line size. The default is 64 (arm and intel cpu). Parameters self : device.","title":"morapi_Device_getCacheLineSize()"},{"location":"structmorapi__Device.html#morapi_device_getfeaturenum","text":"morapi_Int32 morapi_Device_getFeatureNum (const morapi_Device * self) Gets the number of features.","title":"morapi_Device_getFeatureNum()"},{"location":"structmorapi__Device.html#morapi_device_getfeatures","text":"const morapi_Char ** morapi_Device_getFeatures (const morapi_Device * self) Gets the features.","title":"morapi_Device_getFeatures()"},{"location":"structmorapi__Device.html#friends-and-related-function-documentation","text":"","title":"Friends And Related Function Documentation"},{"location":"structmorapi__Device.html#morapi_dnn_static_getdevicenum","text":"morapi_Int32 morapi_Dnn_static_getDeviceNum ( morapi_Env * env) Gets the number of devices.","title":"morapi_Dnn_static_getDeviceNum()"},{"location":"structmorapi__Device.html#morapi_dnn_static_getdevice","text":"const morapi_Device * morapi_Dnn_static_getDevice ( morapi_Env * env, morapi_Int32 i_index) Gets devices.","title":"morapi_Dnn_static_getDevice()"},{"location":"structmorapi__Device.html#morapi_dnn_static_finddevice","text":"const morapi_Device * morapi_Dnn_static_findDevice ( morapi_Env * env, const morapi_Char * i_device_name) Finds a device.","title":"morapi_Dnn_static_findDevice()"},{"location":"structmorapi__DeviceBuf.html","text":"morapi_DeviceBuf Struct Reference dnn \u00bb device Device buffer. More... #include <morapi_softneuro.h> Public Member Functions void * morapi_DeviceBuf_getObj (const morapi_DeviceBuf *self) morapi_Size morapi_DeviceBuf_getSize (const morapi_DeviceBuf *self) const morapi_Device * morapi_DeviceBuf_getDevice (const morapi_DeviceBuf *self) const morapi_DeviceBuf * morapi_DeviceBuf_getCpuBuf (const morapi_DeviceBuf *self) morapi_Size morapi_DeviceBuf_getOffset (const morapi_DeviceBuf *self) Detailed Description Device buffer. Member Function Documentation morapi_DeviceBuf_getObj() void * morapi_DeviceBuf_getObj (const morapi_DeviceBuf * self) Gets the device buffer object. Parameters self : device buffer object morapi_DeviceBuf_getSize() morapi_Size morapi_DeviceBuf_getSize (const morapi_DeviceBuf * self) Gets the size. Parameters self : device buffer object morapi_DeviceBuf_getDevice() const morapi_Device * morapi_DeviceBuf_getDevice (const morapi_DeviceBuf * self) Gets the device. Parameters self : device buffer object morapi_DeviceBuf_getCpuBuf() const morapi_DeviceBuf * morapi_DeviceBuf_getCpuBuf (const morapi_DeviceBuf * self) Gets the cpu buffer. Parameters self : device buffer object morapi_DeviceBuf_getOffset() morapi_Size morapi_DeviceBuf_getOffset (const morapi_DeviceBuf * self) Gets the offset. Parameters self : device buffer object","title":"morapi_DeviceBuf"},{"location":"structmorapi__DeviceBuf.html#morapi_devicebuf-struct-reference","text":"dnn \u00bb device Device buffer. More... #include <morapi_softneuro.h>","title":"morapi_DeviceBuf Struct Reference"},{"location":"structmorapi__DeviceBuf.html#public-member-functions","text":"void * morapi_DeviceBuf_getObj (const morapi_DeviceBuf *self) morapi_Size morapi_DeviceBuf_getSize (const morapi_DeviceBuf *self) const morapi_Device * morapi_DeviceBuf_getDevice (const morapi_DeviceBuf *self) const morapi_DeviceBuf * morapi_DeviceBuf_getCpuBuf (const morapi_DeviceBuf *self) morapi_Size morapi_DeviceBuf_getOffset (const morapi_DeviceBuf *self)","title":"Public Member Functions"},{"location":"structmorapi__DeviceBuf.html#detailed-description","text":"Device buffer.","title":"Detailed Description"},{"location":"structmorapi__DeviceBuf.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__DeviceBuf.html#morapi_devicebuf_getobj","text":"void * morapi_DeviceBuf_getObj (const morapi_DeviceBuf * self) Gets the device buffer object. Parameters self : device buffer object","title":"morapi_DeviceBuf_getObj()"},{"location":"structmorapi__DeviceBuf.html#morapi_devicebuf_getsize","text":"morapi_Size morapi_DeviceBuf_getSize (const morapi_DeviceBuf * self) Gets the size. Parameters self : device buffer object","title":"morapi_DeviceBuf_getSize()"},{"location":"structmorapi__DeviceBuf.html#morapi_devicebuf_getdevice","text":"const morapi_Device * morapi_DeviceBuf_getDevice (const morapi_DeviceBuf * self) Gets the device. Parameters self : device buffer object","title":"morapi_DeviceBuf_getDevice()"},{"location":"structmorapi__DeviceBuf.html#morapi_devicebuf_getcpubuf","text":"const morapi_DeviceBuf * morapi_DeviceBuf_getCpuBuf (const morapi_DeviceBuf * self) Gets the cpu buffer. Parameters self : device buffer object","title":"morapi_DeviceBuf_getCpuBuf()"},{"location":"structmorapi__DeviceBuf.html#morapi_devicebuf_getoffset","text":"morapi_Size morapi_DeviceBuf_getOffset (const morapi_DeviceBuf * self) Gets the offset. Parameters self : device buffer object","title":"morapi_DeviceBuf_getOffset()"},{"location":"structmorapi__DeviceBufCB.html","text":"morapi_DeviceBufCB Struct Reference dnn \u00bb device Callback functions for device buffer. More... #include <morapi_softneuro.h> Public Types typedef void *(* morapi_Create_DeviceBufCB ) ( morapi_Env *io_env) typedef morapi_Result (* morapi_Destroy_DeviceBufCB ) ( morapi_Env *io_env, void *obj) typedef morapi_Result (* morapi_DeviceBufCB_Malloc ) (void *obj, const morapi_Device *i_dev, morapi_Size i_size) typedef morapi_Result (* morapi_DeviceBufCB_Free ) (void *obj) typedef morapi_Result (* morapi_DeviceBufCB_MemcpyCpuToDevice ) (void *obj, void *i_src, morapi_Size i_offset, morapi_Size i_size) typedef morapi_Result (* morapi_DeviceBufCB_MemcpyDeviceToCpu ) (void *obj, void *o_dst, morapi_Size i_offset, morapi_Size i_size) Public Member Functions morapi_Result morapi_DeviceBufCB_clear ( morapi_DeviceBufCB *self) Data Fields morapi_Create_DeviceBufCB create morapi_Destroy_DeviceBufCB destroy morapi_DeviceBufCB_Malloc malloc morapi_DeviceBufCB_Free free morapi_DeviceBufCB_MemcpyCpuToDevice memcpy_cpu_to_device morapi_DeviceBufCB_MemcpyDeviceToCpu memcpy_device_to_cpu Related Functions morapi_DeviceBufCB * morapi_installDeviceBufCB ( morapi_Env *env, const morapi_Char *i_name, const morapi_DeviceBufCB *i_cb) Detailed Description Callback functions for device buffer. Member Typedef Documentation morapi_Create_DeviceBufCB typedef void*(* morapi_Create_DeviceBufCB) ( morapi_Env *io_env) Creates a device buffer object. Parameters io_env : environment where the object will be created morapi_Destroy_DeviceBufCB typedef morapi_Result (* morapi_Destroy_DeviceBufCB) ( morapi_Env *io_env, void *obj) Destroys the device buffer object. Parameters io_env : environment where the object was created obj : object to be destroyed morapi_DeviceBufCB_Malloc typedef morapi_Result (* morapi_DeviceBufCB_Malloc) (void *obj, const morapi_Device *i_dev, morapi_Size i_size) Allocates the device buffer with i_size. Parameters obj : device buffer object i_dev : device buffer to be allocated i_size : buffer size morapi_DeviceBufCB_Free typedef morapi_Result (* morapi_DeviceBufCB_Free) (void *obj) Free the device buffer. Parameters obj : device buffer object morapi_DeviceBufCB_MemcpyCpuToDevice typedef morapi_Result (* morapi_DeviceBufCB_MemcpyCpuToDevice) (void *obj, void *i_src, morapi_Size i_offset, morapi_Size i_size) Copy data from a cpu to a device. Parameters obj : device buffer object i_src : data source i_offset : data offset i_size : data size morapi_DeviceBufCB_MemcpyDeviceToCpu typedef morapi_Result (* morapi_DeviceBufCB_MemcpyDeviceToCpu) (void *obj, void *o_dst, morapi_Size i_offset, morapi_Size i_size) Copy data from a device to a cpu. Parameters obj : device buffer object o_dst : data destination i_offset : data offset i_size : data size Member Function Documentation morapi_DeviceBufCB_clear() morapi_Result morapi_DeviceBufCB_clear ( morapi_DeviceBufCB * self) Clears callback functions. Parameters self : device buffer callbacks object Friends And Related Function Documentation morapi_installDeviceBufCB() morapi_DeviceBufCB * morapi_installDeviceBufCB ( morapi_Env * env, const morapi_Char * i_name, const morapi_DeviceBufCB * i_cb) Installs callback functions for device buffer. Use MORAPI_INSTALL_DEVICE_BUF instead of calling this function directly. Parameters env : environment where the buffer was created i_name : callbacks name i_cb : device buffer callbacks object Field Documentation create morapi_Create_DeviceBufCB morapi_DeviceBufCB::create Creates a device buffer object. destroy morapi_Destroy_DeviceBufCB morapi_DeviceBufCB::destroy Destroys the device buffer object. malloc morapi_DeviceBufCB_Malloc morapi_DeviceBufCB::malloc Allocates the device buffer. free morapi_DeviceBufCB_Free morapi_DeviceBufCB::free Frees the device buffer. memcpy_cpu_to_device morapi_DeviceBufCB_MemcpyCpuToDevice morapi_DeviceBufCB::memcpy_cpu_to_device Write data to the device buffer from cpu memory. memcpy_device_to_cpu morapi_DeviceBufCB_MemcpyDeviceToCpu morapi_DeviceBufCB::memcpy_device_to_cpu Read data to cpu memory from the device buffer.","title":"morapi_DeviceBufCB"},{"location":"structmorapi__DeviceBufCB.html#morapi_devicebufcb-struct-reference","text":"dnn \u00bb device Callback functions for device buffer. More... #include <morapi_softneuro.h>","title":"morapi_DeviceBufCB Struct Reference"},{"location":"structmorapi__DeviceBufCB.html#public-types","text":"typedef void *(* morapi_Create_DeviceBufCB ) ( morapi_Env *io_env) typedef morapi_Result (* morapi_Destroy_DeviceBufCB ) ( morapi_Env *io_env, void *obj) typedef morapi_Result (* morapi_DeviceBufCB_Malloc ) (void *obj, const morapi_Device *i_dev, morapi_Size i_size) typedef morapi_Result (* morapi_DeviceBufCB_Free ) (void *obj) typedef morapi_Result (* morapi_DeviceBufCB_MemcpyCpuToDevice ) (void *obj, void *i_src, morapi_Size i_offset, morapi_Size i_size) typedef morapi_Result (* morapi_DeviceBufCB_MemcpyDeviceToCpu ) (void *obj, void *o_dst, morapi_Size i_offset, morapi_Size i_size)","title":"Public Types"},{"location":"structmorapi__DeviceBufCB.html#public-member-functions","text":"morapi_Result morapi_DeviceBufCB_clear ( morapi_DeviceBufCB *self)","title":"Public Member Functions"},{"location":"structmorapi__DeviceBufCB.html#data-fields","text":"morapi_Create_DeviceBufCB create morapi_Destroy_DeviceBufCB destroy morapi_DeviceBufCB_Malloc malloc morapi_DeviceBufCB_Free free morapi_DeviceBufCB_MemcpyCpuToDevice memcpy_cpu_to_device morapi_DeviceBufCB_MemcpyDeviceToCpu memcpy_device_to_cpu","title":"Data Fields"},{"location":"structmorapi__DeviceBufCB.html#related-functions","text":"morapi_DeviceBufCB * morapi_installDeviceBufCB ( morapi_Env *env, const morapi_Char *i_name, const morapi_DeviceBufCB *i_cb)","title":"Related Functions"},{"location":"structmorapi__DeviceBufCB.html#detailed-description","text":"Callback functions for device buffer.","title":"Detailed Description"},{"location":"structmorapi__DeviceBufCB.html#member-typedef-documentation","text":"","title":"Member Typedef Documentation"},{"location":"structmorapi__DeviceBufCB.html#morapi_create_devicebufcb","text":"typedef void*(* morapi_Create_DeviceBufCB) ( morapi_Env *io_env) Creates a device buffer object. Parameters io_env : environment where the object will be created","title":"morapi_Create_DeviceBufCB"},{"location":"structmorapi__DeviceBufCB.html#morapi_destroy_devicebufcb","text":"typedef morapi_Result (* morapi_Destroy_DeviceBufCB) ( morapi_Env *io_env, void *obj) Destroys the device buffer object. Parameters io_env : environment where the object was created obj : object to be destroyed","title":"morapi_Destroy_DeviceBufCB"},{"location":"structmorapi__DeviceBufCB.html#morapi_devicebufcb_malloc","text":"typedef morapi_Result (* morapi_DeviceBufCB_Malloc) (void *obj, const morapi_Device *i_dev, morapi_Size i_size) Allocates the device buffer with i_size. Parameters obj : device buffer object i_dev : device buffer to be allocated i_size : buffer size","title":"morapi_DeviceBufCB_Malloc"},{"location":"structmorapi__DeviceBufCB.html#morapi_devicebufcb_free","text":"typedef morapi_Result (* morapi_DeviceBufCB_Free) (void *obj) Free the device buffer. Parameters obj : device buffer object","title":"morapi_DeviceBufCB_Free"},{"location":"structmorapi__DeviceBufCB.html#morapi_devicebufcb_memcpycputodevice","text":"typedef morapi_Result (* morapi_DeviceBufCB_MemcpyCpuToDevice) (void *obj, void *i_src, morapi_Size i_offset, morapi_Size i_size) Copy data from a cpu to a device. Parameters obj : device buffer object i_src : data source i_offset : data offset i_size : data size","title":"morapi_DeviceBufCB_MemcpyCpuToDevice"},{"location":"structmorapi__DeviceBufCB.html#morapi_devicebufcb_memcpydevicetocpu","text":"typedef morapi_Result (* morapi_DeviceBufCB_MemcpyDeviceToCpu) (void *obj, void *o_dst, morapi_Size i_offset, morapi_Size i_size) Copy data from a device to a cpu. Parameters obj : device buffer object o_dst : data destination i_offset : data offset i_size : data size","title":"morapi_DeviceBufCB_MemcpyDeviceToCpu"},{"location":"structmorapi__DeviceBufCB.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__DeviceBufCB.html#morapi_devicebufcb_clear","text":"morapi_Result morapi_DeviceBufCB_clear ( morapi_DeviceBufCB * self) Clears callback functions. Parameters self : device buffer callbacks object","title":"morapi_DeviceBufCB_clear()"},{"location":"structmorapi__DeviceBufCB.html#friends-and-related-function-documentation","text":"","title":"Friends And Related Function Documentation"},{"location":"structmorapi__DeviceBufCB.html#morapi_installdevicebufcb","text":"morapi_DeviceBufCB * morapi_installDeviceBufCB ( morapi_Env * env, const morapi_Char * i_name, const morapi_DeviceBufCB * i_cb) Installs callback functions for device buffer. Use MORAPI_INSTALL_DEVICE_BUF instead of calling this function directly. Parameters env : environment where the buffer was created i_name : callbacks name i_cb : device buffer callbacks object","title":"morapi_installDeviceBufCB()"},{"location":"structmorapi__DeviceBufCB.html#field-documentation","text":"","title":"Field Documentation"},{"location":"structmorapi__DeviceBufCB.html#create","text":"morapi_Create_DeviceBufCB morapi_DeviceBufCB::create Creates a device buffer object.","title":"create"},{"location":"structmorapi__DeviceBufCB.html#destroy","text":"morapi_Destroy_DeviceBufCB morapi_DeviceBufCB::destroy Destroys the device buffer object.","title":"destroy"},{"location":"structmorapi__DeviceBufCB.html#malloc","text":"morapi_DeviceBufCB_Malloc morapi_DeviceBufCB::malloc Allocates the device buffer.","title":"malloc"},{"location":"structmorapi__DeviceBufCB.html#free","text":"morapi_DeviceBufCB_Free morapi_DeviceBufCB::free Frees the device buffer.","title":"free"},{"location":"structmorapi__DeviceBufCB.html#memcpy_cpu_to_device","text":"morapi_DeviceBufCB_MemcpyCpuToDevice morapi_DeviceBufCB::memcpy_cpu_to_device Write data to the device buffer from cpu memory.","title":"memcpy_cpu_to_device"},{"location":"structmorapi__DeviceBufCB.html#memcpy_device_to_cpu","text":"morapi_DeviceBufCB_MemcpyDeviceToCpu morapi_DeviceBufCB::memcpy_device_to_cpu Read data to cpu memory from the device buffer.","title":"memcpy_device_to_cpu"},{"location":"structmorapi__DeviceCB.html","text":"morapi_DeviceCB Struct Reference dnn \u00bb device Callback functions for device. More... #include <morapi_softneuro.h> Public Types typedef void *(* morapi_Create_DeviceCB ) ( morapi_Env *env) typedef morapi_Result (* morapi_Destroy_DeviceCB ) ( morapi_Env *env, void *self) typedef morapi_Result (* morapi_DeviceCB_Init ) (void *self, morapi_Device *io_device) typedef morapi_Result (* morapi_DeviceCB_Cleanup ) (void *self) Public Member Functions morapi_Result morapi_DeviceCB_clear ( morapi_DeviceCB *self) Data Fields morapi_Create_DeviceCB create morapi_Destroy_DeviceCB destroy morapi_DeviceCB_Init init morapi_DeviceCB_Cleanup cleanup Detailed Description Callback functions for device. See also MORAPI_INSTALL_DEVICE() Member Typedef Documentation morapi_Create_DeviceCB typedef void*(* morapi_Create_DeviceCB) ( morapi_Env *env) Create a device callbacks object. Parameters env : environment where the object will be created morapi_Destroy_DeviceCB typedef morapi_Result (* morapi_Destroy_DeviceCB) ( morapi_Env *env, void *self) Destroy the device callbacks object. Parameters env : environment where the object was created self : device callbacks object to be destroyed morapi_DeviceCB_Init typedef morapi_Result (* morapi_DeviceCB_Init) (void *self, morapi_Device *io_device) Initialize the device callbacks object. Parameters self : device callbacks object io_device : device object morapi_DeviceCB_Cleanup typedef morapi_Result (* morapi_DeviceCB_Cleanup) (void *self) Clean up the device callbacks object. Parameters self : device callbacks object Member Function Documentation morapi_DeviceCB_clear() morapi_Result morapi_DeviceCB_clear ( morapi_DeviceCB * self) Clears the callback functions. Parameters self : device callbacks object Field Documentation create morapi_Create_DeviceCB create Create a device object. destroy morapi_Destroy_DeviceCB destroy Destroys the device object. init morapi_DeviceCB_Init init Initializes the device object. cleanup morapi_DeviceCB_Cleanup cleanup Cleans up the device object.","title":"morapi_DeviceCB"},{"location":"structmorapi__DeviceCB.html#morapi_devicecb-struct-reference","text":"dnn \u00bb device Callback functions for device. More... #include <morapi_softneuro.h>","title":"morapi_DeviceCB Struct Reference"},{"location":"structmorapi__DeviceCB.html#public-types","text":"typedef void *(* morapi_Create_DeviceCB ) ( morapi_Env *env) typedef morapi_Result (* morapi_Destroy_DeviceCB ) ( morapi_Env *env, void *self) typedef morapi_Result (* morapi_DeviceCB_Init ) (void *self, morapi_Device *io_device) typedef morapi_Result (* morapi_DeviceCB_Cleanup ) (void *self)","title":"Public Types"},{"location":"structmorapi__DeviceCB.html#public-member-functions","text":"morapi_Result morapi_DeviceCB_clear ( morapi_DeviceCB *self)","title":"Public Member Functions"},{"location":"structmorapi__DeviceCB.html#data-fields","text":"morapi_Create_DeviceCB create morapi_Destroy_DeviceCB destroy morapi_DeviceCB_Init init morapi_DeviceCB_Cleanup cleanup","title":"Data Fields"},{"location":"structmorapi__DeviceCB.html#detailed-description","text":"Callback functions for device. See also MORAPI_INSTALL_DEVICE()","title":"Detailed Description"},{"location":"structmorapi__DeviceCB.html#member-typedef-documentation","text":"","title":"Member Typedef Documentation"},{"location":"structmorapi__DeviceCB.html#morapi_create_devicecb","text":"typedef void*(* morapi_Create_DeviceCB) ( morapi_Env *env) Create a device callbacks object. Parameters env : environment where the object will be created","title":"morapi_Create_DeviceCB"},{"location":"structmorapi__DeviceCB.html#morapi_destroy_devicecb","text":"typedef morapi_Result (* morapi_Destroy_DeviceCB) ( morapi_Env *env, void *self) Destroy the device callbacks object. Parameters env : environment where the object was created self : device callbacks object to be destroyed","title":"morapi_Destroy_DeviceCB"},{"location":"structmorapi__DeviceCB.html#morapi_devicecb_init","text":"typedef morapi_Result (* morapi_DeviceCB_Init) (void *self, morapi_Device *io_device) Initialize the device callbacks object. Parameters self : device callbacks object io_device : device object","title":"morapi_DeviceCB_Init"},{"location":"structmorapi__DeviceCB.html#morapi_devicecb_cleanup","text":"typedef morapi_Result (* morapi_DeviceCB_Cleanup) (void *self) Clean up the device callbacks object. Parameters self : device callbacks object","title":"morapi_DeviceCB_Cleanup"},{"location":"structmorapi__DeviceCB.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__DeviceCB.html#morapi_devicecb_clear","text":"morapi_Result morapi_DeviceCB_clear ( morapi_DeviceCB * self) Clears the callback functions. Parameters self : device callbacks object","title":"morapi_DeviceCB_clear()"},{"location":"structmorapi__DeviceCB.html#field-documentation","text":"","title":"Field Documentation"},{"location":"structmorapi__DeviceCB.html#create","text":"morapi_Create_DeviceCB create Create a device object.","title":"create"},{"location":"structmorapi__DeviceCB.html#destroy","text":"morapi_Destroy_DeviceCB destroy Destroys the device object.","title":"destroy"},{"location":"structmorapi__DeviceCB.html#init","text":"morapi_DeviceCB_Init init Initializes the device object.","title":"init"},{"location":"structmorapi__DeviceCB.html#cleanup","text":"morapi_DeviceCB_Cleanup cleanup Cleans up the device object.","title":"cleanup"},{"location":"structmorapi__Dll.html","text":"morapi_Dll Struct Reference core \u00bb dll Dynamic linked library. More... #include <morapi_core.h> Public Member Functions morapi_Env * morapi_Dll_getEnv (const morapi_Dll *self) Detailed Description Dynamic linked library. Member Function Documentation morapi_Dll_getEnv() morapi_Env * morapi_Dll_getEnv (const morapi_Dll * self) Gets the environment.","title":"morapi_Dll"},{"location":"structmorapi__Dll.html#morapi_dll-struct-reference","text":"core \u00bb dll Dynamic linked library. More... #include <morapi_core.h>","title":"morapi_Dll Struct Reference"},{"location":"structmorapi__Dll.html#public-member-functions","text":"morapi_Env * morapi_Dll_getEnv (const morapi_Dll *self)","title":"Public Member Functions"},{"location":"structmorapi__Dll.html#detailed-description","text":"Dynamic linked library.","title":"Detailed Description"},{"location":"structmorapi__Dll.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__Dll.html#morapi_dll_getenv","text":"morapi_Env * morapi_Dll_getEnv (const morapi_Dll * self) Gets the environment.","title":"morapi_Dll_getEnv()"},{"location":"structmorapi__Dnn.html","text":"morapi_Dnn Struct Reference dnn Deep neural network. More... #include <morapi_softneuro.h> Public Member Functions Primary functions morapi_Dnn * morapi_create_Dnn ( morapi_Env *io_env) morapi_Result morapi_Dnn_initialize ( morapi_Dnn *self) morapi_Result morapi_Dnn_load ( morapi_Dnn *self, const morapi_Char *i_filename, const void *i_pass, morapi_Int32 i_pass_size, morapi_Bool i_is_lazy) morapi_Int32 morapi_Dnn_getInputNum (const morapi_Dnn *self) morapi_Tensor * morapi_Dnn_getInputBlob (const morapi_Dnn *self, morapi_Int32 i_input_index) morapi_Result morapi_Dnn_setInputImage ( morapi_Dnn *self, const morapi_Image *i_image, morapi_Int32 i_index, morapi_Int32 i_batch) morapi_Result morapi_Dnn_setInputImageWithOptions ( morapi_Dnn *self, const morapi_Image *i_image, morapi_Int32 i_index, morapi_Int32 i_batch, morapi_Bool i_keep_ar, morapi_DnnResizeMode i_resize_mode, morapi_Uint8 i_padding_color[3]) morapi_Params * morapi_Dnn_getInputAttrs (const morapi_Dnn *self, morapi_Int32 i_input_index) morapi_Result morapi_Dnn_forward ( morapi_Dnn *self) morapi_Int32 morapi_Dnn_getOutputNum (const morapi_Dnn *self) morapi_Params * morapi_Dnn_getOutputAttrs (const morapi_Dnn *self, morapi_Int32 i_output_index) morapi_Tensor * morapi_Dnn_getOutputBlob (const morapi_Dnn *self, morapi_Int32 i_output_index) morapi_Result morapi_Dnn_save ( morapi_Dnn *self, const morapi_Char *o_filename, const void *i_pass, morapi_Int32 i_pass_size, morapi_Bool i_is_secret) morapi_Result morapi_destroy_Dnn ( morapi_Env *io_env, morapi_Dnn *self) Optional settings morapi_Result morapi_Dnn_setThreadNum ( morapi_Dnn *self, morapi_Int32 i_thread_num) morapi_Int32 morapi_Dnn_getThreadNum (const morapi_Dnn *self) morapi_Result morapi_Dnn_setAffinityMask ( morapi_Dnn *self, morapi_Int32 i_thread_index, const morapi_Char *i_affinity_mask) morapi_Int32 morapi_Dnn_getAffinityMaskNum (const morapi_Dnn *self) const morapi_Char * morapi_Dnn_getAffinityMask ( morapi_Dnn *self, morapi_Int32 i_thread_index) morapi_Result morapi_Dnn_resetThreadNumAndAffinityMask ( morapi_Dnn *self) morapi_Result morapi_Dnn_setBoosted ( morapi_Dnn *self, morapi_Bool i_is_boosted) morapi_Bool morapi_Dnn_isBoosted (const morapi_Dnn *self) morapi_Result morapi_Dnn_setBatchSize ( morapi_Dnn *self, morapi_Int32 i_batch_size) morapi_Int32 morapi_Dnn_getBatchSize (const morapi_Dnn *self) morapi_Result morapi_Dnn_setInputShape ( morapi_Dnn *self, morapi_Int32 i_input_index, morapi_Int32 i_rank, const morapi_Int32 *i_shape) morapi_Result morapi_Dnn_setBufOptEnabled ( morapi_Dnn *self, const morapi_Device *i_device, morapi_Bool i_is_enabled) morapi_Bool morapi_Dnn_isBufOptEnabled (const morapi_Dnn *self, const morapi_Device *i_device) morapi_Result morapi_Dnn_setDumpEnabled ( morapi_Dnn *self, morapi_Bool i_is_dump_enabled) morapi_Bool morapi_Dnn_isDumpEnabled (const morapi_Dnn *self) morapi_Result morapi_Dnn_setDumpDir ( morapi_Dnn *self, const morapi_Char *i_dump_dir) morapi_Result morapi_Dnn_setModelText ( morapi_Dnn *self, const morapi_Char *i_text) morapi_Int32 morapi_Dnn_getModelTextSize ( morapi_Dnn *self) morapi_Result morapi_Dnn_getModelText ( morapi_Dnn *self, morapi_Char *o_text, morapi_Int32 i_text_size) Tensor operations morapi_Tensor * morapi_Dnn_addTensor ( morapi_Dnn *self, const morapi_Char *i_name) morapi_Result morapi_Dnn_removeTensor ( morapi_Dnn *self, morapi_Tensor *io_tensor) morapi_Int32 morapi_Dnn_getTensorNum (const morapi_Dnn *self) morapi_Tensor * morapi_Dnn_getTensor (const morapi_Dnn *self, morapi_Int32 i_index) morapi_Tensor * morapi_Dnn_findTensor (const morapi_Dnn *self, const morapi_Char *i_name) Net operations morapi_Int32 morapi_Dnn_getNetNum (const morapi_Dnn *self) morapi_DnnNet * morapi_Dnn_getNet (const morapi_Dnn *self, morapi_Int32 i_index) morapi_DnnNet * morapi_Dnn_findMainNet (const morapi_Dnn *self) morapi_DnnNet * morapi_Dnn_addNet ( morapi_Dnn *self, const morapi_Char *i_name) morapi_Result morapi_Dnn_removeNet ( morapi_Dnn *self, morapi_DnnNet *io_net) morapi_DnnNet * morapi_Dnn_findNet (const morapi_Dnn *self, const morapi_Char *i_name) Other functions morapi_Result morapi_Dnn_parse ( morapi_Dnn *self) morapi_Result morapi_Dnn_compile ( morapi_Dnn *self) morapi_Result morapi_Dnn_cleanup ( morapi_Dnn *self) morapi_DnnState morapi_Dnn_getState (const morapi_Dnn *self) morapi_Bool morapi_Dnn_isFailed (const morapi_Dnn *self) morapi_Result morapi_Dnn_clear ( morapi_Dnn *self) morapi_Bool morapi_Dnn_isEmpty (const morapi_Dnn *self) morapi_Result morapi_Dnn_loadFromMemory ( morapi_Dnn *self, morapi_Uint8 *i_model_buf, morapi_Int64 i_model_size) morapi_Bool morapi_Dnn_isSecret (const morapi_Dnn *self) morapi_Bool morapi_Dnn_isPasswordProtected (const morapi_Dnn *self) morapi_Bool morapi_Dnn_isLazy (const morapi_Dnn *self) morapi_Bool morapi_Dnn_setBinaryLibEmbedded ( morapi_Dnn *self, morapi_Bool i_is_embedded) morapi_Bool morapi_Dnn_isBinaryLibEmbedded (const morapi_Dnn *self) morapi_Result morapi_Dnn_saveBinaryLib ( morapi_Dnn *self, const morapi_Char *i_file_name, morapi_Bool i_saves_only_when_changed) morapi_Result morapi_Dnn_loadBinaryLib ( morapi_Dnn *self, const morapi_Char *i_file_name) morapi_Result morapi_Dnn_tune ( morapi_Dnn *self, const morapi_DnnRecipe *i_recipe) morapi_Bool morapi_Dnn_isTuned (const morapi_Dnn *self) const morapi_Params * morapi_Dnn_getTuneParams (const morapi_Dnn *self) morapi_Result morapi_Dnn_recycle ( morapi_Dnn *self) morapi_Tensor * morapi_Dnn_getInput (const morapi_Dnn *self, morapi_Int32 i_input_index) morapi_Tensor * morapi_Dnn_getOutput (const morapi_Dnn *self, morapi_Int32 i_output_index) morapi_Result morapi_Dnn_reset ( morapi_Dnn *self) morapi_Result morapi_Dnn_squashNet ( morapi_Dnn *self, morapi_DnnNet *io_net, const morapi_Char *i_name) Related Functions morapi_Result morapi_Dnn_static_installRoutineSchema ( morapi_Env *env, const morapi_Char *i_schema) morapi_Int32 morapi_Dnn_static_getRoutineSchemaNum ( morapi_Env *env) const morapi_Char ** morapi_Dnn_static_getRoutineSchemas ( morapi_Env *env) Detailed Description Deep neural network. This structure contains all data needed to operate a dnn. test_decompose_api.c , test_dnn_api.c , and test_prof_api.c . Member Function Documentation morapi_create_Dnn() morapi_Dnn * morapi_create_Dnn ( morapi_Env * io_env) Creates a Dnn module. Parameters io_env : the environment data Returns the created dnn module test_decompose_api.c , test_dnn_api.c , and test_prof_api.c . morapi_Dnn_initialize() morapi_Result morapi_Dnn_initialize ( morapi_Dnn * self) Initializes the Dnn module. Parameters self : the dnn. test_dnn_api.c . morapi_Dnn_load() morapi_Result morapi_Dnn_load ( morapi_Dnn * self, const morapi_Char * i_filename, const void * i_pass, morapi_Int32 i_pass_size, morapi_Bool i_is_lazy) Reads the dnn from a file. Parameters self : the dnn module i_filename : the path of the dnn file i_pass : the password of the dnn file, use NULL for the dnn file without password i_pass_size : the size of the password i_is_lazy : lazy loading or not. test_decompose_api.c , test_dnn_api.c , and test_prof_api.c . morapi_Dnn_getInputNum() morapi_Int32 morapi_Dnn_getInputNum (const morapi_Dnn * self) Get the number of inputs for Dnn. Parameters self : the dnn module morapi_Dnn_getInputBlob() morapi_Tensor * morapi_Dnn_getInputBlob (const morapi_Dnn * self, morapi_Int32 i_input_index) Gets the i_input_index-th input blob. Valid after compiled. Parameters self : the dnn module i_input_index : input index morapi_Dnn_setInputImage() morapi_Result morapi_Dnn_setInputImage ( morapi_Dnn * self, const morapi_Image * i_image, morapi_Int32 i_index, morapi_Int32 i_batch) Sets an image to the i_batch-th batch of i_input_index-th input. Uses the dnn input attrs (keep_ar, padding_color, resize_mode) for the resize settings, if available. Defaults to Bilinear resize and doesn't keep image aspect ratio (no padding). Parameters self : the dnn module i_image : image to be set as input i_index : input index to set the image at i_batch : batch to set the image at test_dnn_api.c . morapi_Dnn_setInputImageWithOptions() morapi_Result morapi_Dnn_setInputImageWithOptions ( morapi_Dnn * self, const morapi_Image * i_image, morapi_Int32 i_index, morapi_Int32 i_batch, morapi_Bool i_keep_ar, morapi_DnnResizeMode i_resize_mode, morapi_Uint8 i_padding_color[3]) Sets an image to the i_batch-th batch of i_input_index-th input using the given resize mode and padding to keep aspect ratio if set. Parameters self : the dnn module i_image : image to be set as input i_index : input index to set the image at i_batch : batch to set the image at i_keep_ar : whether or not to keep aspect ratio if resizing the image i_resize_mode : image resize mode, either MORAPI_DNN_RESIZE_MODE_BILINEAR or MORAPI_DNN_RESIZE_MODE_NEAREST i_padding_color : 0-255 RGB values to use as padding when resizing with keep aspect ratio on, NULL for zero padding morapi_Dnn_getInputAttrs() morapi_Params * morapi_Dnn_getInputAttrs (const morapi_Dnn * self, morapi_Int32 i_input_index) Gets the i_input_index-th input attributes. Parameters self : the dnn module i_input_index : input index morapi_Dnn_forward() morapi_Result morapi_Dnn_forward ( morapi_Dnn * self) Executes forward propagation once on the network. Parameters self : the dnn module test_dnn_api.c . morapi_Dnn_getOutputNum() morapi_Int32 morapi_Dnn_getOutputNum (const morapi_Dnn * self) Gets the number of outputs. Parameters self : the dnn module morapi_Dnn_getOutputAttrs() morapi_Params * morapi_Dnn_getOutputAttrs (const morapi_Dnn * self, morapi_Int32 i_output_index) Gets attributes from the i_output_index-th output. Parameters self : the dnn module i_output_index : output tensor index Returns morapi_Params object test_dnn_api.c . morapi_Dnn_getOutputBlob() morapi_Tensor * morapi_Dnn_getOutputBlob (const morapi_Dnn * self, morapi_Int32 i_output_index) Gets tensor blob from the i_output_index-th output. Valid after compiled. Returns morapi_Tensor object test_dnn_api.c . morapi_Dnn_save() morapi_Result morapi_Dnn_save ( morapi_Dnn * self, const morapi_Char * o_filename, const void * i_pass, morapi_Int32 i_pass_size, morapi_Bool i_is_secret) Writes the dnn to a file. It does nothing and returns MORAPI_ERROR_STATE if self is secret. Parameters self : the dnn module o_filename : output file name i_pass : encryption password, if needed i_pass_size : encryption password size i_is_secret : whether makes the dnn secret or not. test_decompose_api.c , and test_prof_api.c . morapi_destroy_Dnn() morapi_Result morapi_destroy_Dnn ( morapi_Env * io_env, morapi_Dnn * self) Destroys the Dnn module to free memory. Parameters io_env : the envitonment data self : the dnn module to be destroyed test_decompose_api.c , test_dnn_api.c , and test_prof_api.c . morapi_Dnn_setThreadNum() morapi_Result morapi_Dnn_setThreadNum ( morapi_Dnn * self, morapi_Int32 i_thread_num) Sets the number of threads for forward propagation. It clears affinity masks set by morapi_Dnn_setAffinityMask() . If i_thread_num=0, the number of threads gets equal to the number of logical CPU cores. Parameters self : the dnn module i_thread_num : number of threads to be used test_dnn_api.c . morapi_Dnn_getThreadNum() morapi_Int32 morapi_Dnn_getThreadNum (const morapi_Dnn * self) Gets the number of CPU threads for forward propagation. If 0 is set by morapi_Dnn_setThreadNum() , returns the number of logical CPU cores. Parameters self : the dnn module morapi_Dnn_setAffinityMask() morapi_Result morapi_Dnn_setAffinityMask ( morapi_Dnn * self, morapi_Int32 i_thread_index, const morapi_Char * i_affinity_mask) Sets an affinity mask. Parameters self : the dnn module i_thread_index : thread index for which affinity mask will be set i_affinity_mask : an affinity mask represented in hex (\"0x..\") or binary (\"0b..\") form. morapi_Dnn_getAffinityMaskNum() morapi_Int32 morapi_Dnn_getAffinityMaskNum (const morapi_Dnn * self) Gets the number of affinity masks. Parameters self : the dnn module morapi_Dnn_getAffinityMask() const morapi_Char * morapi_Dnn_getAffinityMask ( morapi_Dnn * self, morapi_Int32 i_thread_index) Gets an affinity mask in hex (\"0x..) form. Parameters self : the dnn module i_thread_index : thread index for which affinity mask will be get morapi_Dnn_resetThreadNumAndAffinityMask() morapi_Result morapi_Dnn_resetThreadNumAndAffinityMask ( morapi_Dnn * self) Resets the number of threads and affinity mask to the default. Parameters self : the dnn module. morapi_Dnn_setBoosted() morapi_Result morapi_Dnn_setBoosted ( morapi_Dnn * self, morapi_Bool i_is_boosted) Sets boosted multi-threads (MORAPI_TRUE) or not (MORAPI_FALSE). Boosted multi-thread mode allows to 'busy wait' the other threads. The default is MORAPI_TRUE. Parameters self : the dnn module i_is_boosted : whether boosted or not. morapi_Dnn_isBoosted() morapi_Bool morapi_Dnn_isBoosted (const morapi_Dnn * self) Gets whether boosted multi-thread mode or not. Parameters self : the dnn module Returns whether boosted or not. morapi_Dnn_setBatchSize() morapi_Result morapi_Dnn_setBatchSize ( morapi_Dnn * self, morapi_Int32 i_batch_size) Sets the batch size for forward propagation. Parameters self : the dnn module i_batch_size : batch size test_dnn_api.c . morapi_Dnn_getBatchSize() morapi_Int32 morapi_Dnn_getBatchSize (const morapi_Dnn * self) Gets the batch size for forward propagation. Parameters self : the dnn module morapi_Dnn_setInputShape() morapi_Result morapi_Dnn_setInputShape ( morapi_Dnn * self, morapi_Int32 i_input_index, morapi_Int32 i_rank, const morapi_Int32 * i_shape) Sets the i_input_index-th input shape. Parameters self : the dnn module i_input_index : input index i_rank : input rank i_shape : shape to be set morapi_Dnn_setBufOptEnabled() morapi_Result morapi_Dnn_setBufOptEnabled ( morapi_Dnn * self, const morapi_Device * i_device, morapi_Bool i_is_enabled) Enables or disables buffer optimization. Buffer optimization reduces memory usage during forward propagation. Parameters self : the dnn module i_device : device for which buffer optimization will be enabled/disabled i_is_enabled : boolean indicating whether it will be enabled (true) or disabled (false) morapi_Dnn_isBufOptEnabled() morapi_Bool morapi_Dnn_isBufOptEnabled (const morapi_Dnn * self, const morapi_Device * i_device) Returns whether buffer optimization is enabled or not. Parameters self : the dnn module i_device : device to be checked morapi_Dnn_setDumpEnabled() morapi_Result morapi_Dnn_setDumpEnabled ( morapi_Dnn * self, morapi_Bool i_is_dump_enabled) Enables or disables data dump of layer outputs by morapi_Dnn_dump(). Precondition Call this before morapi_Dnn_compile() . This method automatically uncompiles if already compiled. Parameters self : the dnn module i_is_dump_enabled : false to disable dump, true to enable it morapi_Dnn_isDumpEnabled() morapi_Bool morapi_Dnn_isDumpEnabled (const morapi_Dnn * self) Returns whether data dump is enabled or not. Parameters self : the dnn module morapi_Dnn_setDumpDir() morapi_Result morapi_Dnn_setDumpDir ( morapi_Dnn * self, const morapi_Char * i_dump_dir) Sets the dump directory. If NULL or empty, no file is dumped. Parameters self : the dnn module i_dump_dir : dump directory morapi_Dnn_setModelText() morapi_Result morapi_Dnn_setModelText ( morapi_Dnn * self, const morapi_Char * i_text) Sets the model text. Parameters self : the dnn module i_text : text to be set morapi_Dnn_getModelTextSize() morapi_Int32 morapi_Dnn_getModelTextSize ( morapi_Dnn * self) Gets the length of JSON text data for the Dnn network structure. Parameters self : the dnn module morapi_Dnn_getModelText() morapi_Result morapi_Dnn_getModelText ( morapi_Dnn * self, morapi_Char * o_text, morapi_Int32 i_text_size) Gets the JSON text data for Dnn network structure. Parameters self : the dnn module o_text : output model text i_text_size : text size morapi_Dnn_addTensor() morapi_Tensor * morapi_Dnn_addTensor ( morapi_Dnn * self, const morapi_Char * i_name) Adds a new tensor to the Dnn module. Parameters self : the dnn module i_name : tensor name morapi_Dnn_removeTensor() morapi_Result morapi_Dnn_removeTensor ( morapi_Dnn * self, morapi_Tensor * io_tensor) Removes the tensor from the Dnn. Parameters self : the dnn module io_tensor : tensor to be removed morapi_Dnn_getTensorNum() morapi_Int32 morapi_Dnn_getTensorNum (const morapi_Dnn * self) Gets the number of named tensors stored in the Dnn. Parameters self : the dnn module morapi_Dnn_getTensor() morapi_Tensor * morapi_Dnn_getTensor (const morapi_Dnn * self, morapi_Int32 i_index) Gets the i_index-th named tensor in the Dnn. Parameters self : the dnn module i_index : tensor index morapi_Dnn_findTensor() morapi_Tensor * morapi_Dnn_findTensor (const morapi_Dnn * self, const morapi_Char * i_name) Finds a tensor in the Dnn by name. Parameters self : the dnn module i_name : tensor name morapi_Dnn_getNetNum() morapi_Int32 morapi_Dnn_getNetNum (const morapi_Dnn * self) Gets the number of DnnNet subnetworks in the Dnn. Parameters self : the dnn module Returns the number of DnnNet test_dnn_api.c . morapi_Dnn_getNet() morapi_DnnNet * morapi_Dnn_getNet (const morapi_Dnn * self, morapi_Int32 i_index) Gets the i_index-th DnnNet subnetwork in the Dnn. Parameters self : the dnn module i_index : net index Returns the i_index-th DnnNet test_dnn_api.c . morapi_Dnn_findMainNet() morapi_DnnNet * morapi_Dnn_findMainNet (const morapi_Dnn * self) Finds the main subnetwork in the Dnn. Parameters self : the dnn module Returns the biggest subnetwork test_decompose_api.c . morapi_Dnn_addNet() morapi_DnnNet * morapi_Dnn_addNet ( morapi_Dnn * self, const morapi_Char * i_name) Adds a net. Parameters self : the dnn module i_name : net name Returns the resulted DnnNet module morapi_Dnn_removeNet() morapi_Result morapi_Dnn_removeNet ( morapi_Dnn * self, morapi_DnnNet * io_net) Removes the net. Parameters self : the dnn module io_net : net to be removed test_decompose_api.c . morapi_Dnn_findNet() morapi_DnnNet * morapi_Dnn_findNet (const morapi_Dnn * self, const morapi_Char * i_name) Finds the net named i_name. Parameters self : the dnn module i_name : name of the net to be found Returns pointer to the DnnNet module morapi_Dnn_parse() morapi_Result morapi_Dnn_parse ( morapi_Dnn * self) Parses the dnn. Parameters self : the dnn module morapi_Dnn_compile() morapi_Result morapi_Dnn_compile ( morapi_Dnn * self) Compiles the dnn to run forward propagation. Parameters self : the dnn module test_dnn_api.c . morapi_Dnn_cleanup() morapi_Result morapi_Dnn_cleanup ( morapi_Dnn * self) Cleans up. Parameters self : the dnn module to be cleaned up morapi_Dnn_getState() morapi_DnnState morapi_Dnn_getState (const morapi_Dnn * self) Gets the state. Parameters self : the dnn module morapi_Dnn_isFailed() morapi_Bool morapi_Dnn_isFailed (const morapi_Dnn * self) Returns whether self is failed or not. Parameters self : the dnn module morapi_Dnn_clear() morapi_Result morapi_Dnn_clear ( morapi_Dnn * self) Removes all tensors and nets. Parameters self : the dnn module morapi_Dnn_isEmpty() morapi_Bool morapi_Dnn_isEmpty (const morapi_Dnn * self) Returns whether self is empty or not. morapi_Dnn_loadFromMemory() morapi_Result morapi_Dnn_loadFromMemory ( morapi_Dnn * self, morapi_Uint8 * i_model_buf, morapi_Int64 i_model_size) load the dnn from memory. Parameters self : the dnn module i_model_buf : input model buffer i_model_size : input model size morapi_Dnn_isSecret() morapi_Bool morapi_Dnn_isSecret (const morapi_Dnn * self) Returns whether the dnn is secret or not. Parameters self : the dnn module morapi_Dnn_isPasswordProtected() morapi_Bool morapi_Dnn_isPasswordProtected (const morapi_Dnn * self) Returns whether self is password-protected or not. morapi_Dnn_isLazy() morapi_Bool morapi_Dnn_isLazy (const morapi_Dnn * self) Returns whether the dnn is lazy loaded or not. Parameters self : the dnn module morapi_Dnn_setBinaryLibEmbedded() morapi_Bool morapi_Dnn_setBinaryLibEmbedded ( morapi_Dnn * self, morapi_Bool i_is_embedded) Sets whether the binary lib is embedded when serialization. Parameters self : the dnn object. i_is_embedded : whether the binary lib is embedded or not. morapi_Dnn_isBinaryLibEmbedded() morapi_Bool morapi_Dnn_isBinaryLibEmbedded (const morapi_Dnn * self) Returns whether the binary lib is embedded when serialization. Parameters self : the dnn object. morapi_Dnn_saveBinaryLib() morapi_Result morapi_Dnn_saveBinaryLib ( morapi_Dnn * self, const morapi_Char * i_file_name, morapi_Bool i_saves_only_when_changed) Saves the binary lib to a file. Parameters self : the dnn object. i_file_name : the file name. i_saves_only_when_changed : whether to save the binary library only when it is changed. morapi_Dnn_loadBinaryLib() morapi_Result morapi_Dnn_loadBinaryLib ( morapi_Dnn * self, const morapi_Char * i_file_name) Loads the binary lib from a file. morapi_Dnn_tune() morapi_Result morapi_Dnn_tune ( morapi_Dnn * self, const morapi_DnnRecipe * i_recipe) Tune the dnn by the tuning recipe. Parameters self : the dnn module i_recipe : tuning recipe test_prof_api.c . morapi_Dnn_isTuned() morapi_Bool morapi_Dnn_isTuned (const morapi_Dnn * self) Returns whether the dnn is tuned or not. Parameters self : the dnn module morapi_Dnn_getTuneParams() const morapi_Params * morapi_Dnn_getTuneParams (const morapi_Dnn * self) Gets tuning parameters. morapi_Dnn_recycle() morapi_Result morapi_Dnn_recycle ( morapi_Dnn * self) Recycles the dnn by decompiling and unparsing. Parameters self : the dnn module morapi_Dnn_getInput() morapi_Tensor * morapi_Dnn_getInput (const morapi_Dnn * self, morapi_Int32 i_input_index) Gets the i_input_index-th input tensor. Parameters self : the dnn module i_input_index : input tensor index morapi_Dnn_getOutput() morapi_Tensor * morapi_Dnn_getOutput (const morapi_Dnn * self, morapi_Int32 i_output_index) Gets the i_output_index-th output tensor. Parameters self : the dnn module i_output_index : output tensor index morapi_Dnn_reset() morapi_Result morapi_Dnn_reset ( morapi_Dnn * self) Resets the network state for cases where weights change during execution. Parameters self : the dnn module morapi_Dnn_squashNet() morapi_Result morapi_Dnn_squashNet ( morapi_Dnn * self, morapi_DnnNet * io_net, const morapi_Char * i_name) Squashes the net. test_decompose_api.c . Friends And Related Function Documentation morapi_Dnn_static_installRoutineSchema() morapi_Result morapi_Dnn_static_installRoutineSchema ( morapi_Env * env, const morapi_Char * i_schema) Installs a routine schema. morapi_Dnn_static_getRoutineSchemaNum() morapi_Int32 morapi_Dnn_static_getRoutineSchemaNum ( morapi_Env * env) Gets the number of installed routine schemas. Parameters env : environment where the routine are installed. morapi_Dnn_static_getRoutineSchemas() const morapi_Char ** morapi_Dnn_static_getRoutineSchemas ( morapi_Env * env) Gets the installed routine schemas. Parameters env : environment where the routines are installed.","title":"morapi_Dnn"},{"location":"structmorapi__Dnn.html#morapi_dnn-struct-reference","text":"dnn Deep neural network. More... #include <morapi_softneuro.h>","title":"morapi_Dnn Struct Reference"},{"location":"structmorapi__Dnn.html#public-member-functions","text":"","title":"Public Member Functions"},{"location":"structmorapi__Dnn.html#primary-functions","text":"morapi_Dnn * morapi_create_Dnn ( morapi_Env *io_env) morapi_Result morapi_Dnn_initialize ( morapi_Dnn *self) morapi_Result morapi_Dnn_load ( morapi_Dnn *self, const morapi_Char *i_filename, const void *i_pass, morapi_Int32 i_pass_size, morapi_Bool i_is_lazy) morapi_Int32 morapi_Dnn_getInputNum (const morapi_Dnn *self) morapi_Tensor * morapi_Dnn_getInputBlob (const morapi_Dnn *self, morapi_Int32 i_input_index) morapi_Result morapi_Dnn_setInputImage ( morapi_Dnn *self, const morapi_Image *i_image, morapi_Int32 i_index, morapi_Int32 i_batch) morapi_Result morapi_Dnn_setInputImageWithOptions ( morapi_Dnn *self, const morapi_Image *i_image, morapi_Int32 i_index, morapi_Int32 i_batch, morapi_Bool i_keep_ar, morapi_DnnResizeMode i_resize_mode, morapi_Uint8 i_padding_color[3]) morapi_Params * morapi_Dnn_getInputAttrs (const morapi_Dnn *self, morapi_Int32 i_input_index) morapi_Result morapi_Dnn_forward ( morapi_Dnn *self) morapi_Int32 morapi_Dnn_getOutputNum (const morapi_Dnn *self) morapi_Params * morapi_Dnn_getOutputAttrs (const morapi_Dnn *self, morapi_Int32 i_output_index) morapi_Tensor * morapi_Dnn_getOutputBlob (const morapi_Dnn *self, morapi_Int32 i_output_index) morapi_Result morapi_Dnn_save ( morapi_Dnn *self, const morapi_Char *o_filename, const void *i_pass, morapi_Int32 i_pass_size, morapi_Bool i_is_secret) morapi_Result morapi_destroy_Dnn ( morapi_Env *io_env, morapi_Dnn *self)","title":"Primary functions"},{"location":"structmorapi__Dnn.html#optional-settings","text":"morapi_Result morapi_Dnn_setThreadNum ( morapi_Dnn *self, morapi_Int32 i_thread_num) morapi_Int32 morapi_Dnn_getThreadNum (const morapi_Dnn *self) morapi_Result morapi_Dnn_setAffinityMask ( morapi_Dnn *self, morapi_Int32 i_thread_index, const morapi_Char *i_affinity_mask) morapi_Int32 morapi_Dnn_getAffinityMaskNum (const morapi_Dnn *self) const morapi_Char * morapi_Dnn_getAffinityMask ( morapi_Dnn *self, morapi_Int32 i_thread_index) morapi_Result morapi_Dnn_resetThreadNumAndAffinityMask ( morapi_Dnn *self) morapi_Result morapi_Dnn_setBoosted ( morapi_Dnn *self, morapi_Bool i_is_boosted) morapi_Bool morapi_Dnn_isBoosted (const morapi_Dnn *self) morapi_Result morapi_Dnn_setBatchSize ( morapi_Dnn *self, morapi_Int32 i_batch_size) morapi_Int32 morapi_Dnn_getBatchSize (const morapi_Dnn *self) morapi_Result morapi_Dnn_setInputShape ( morapi_Dnn *self, morapi_Int32 i_input_index, morapi_Int32 i_rank, const morapi_Int32 *i_shape) morapi_Result morapi_Dnn_setBufOptEnabled ( morapi_Dnn *self, const morapi_Device *i_device, morapi_Bool i_is_enabled) morapi_Bool morapi_Dnn_isBufOptEnabled (const morapi_Dnn *self, const morapi_Device *i_device) morapi_Result morapi_Dnn_setDumpEnabled ( morapi_Dnn *self, morapi_Bool i_is_dump_enabled) morapi_Bool morapi_Dnn_isDumpEnabled (const morapi_Dnn *self) morapi_Result morapi_Dnn_setDumpDir ( morapi_Dnn *self, const morapi_Char *i_dump_dir) morapi_Result morapi_Dnn_setModelText ( morapi_Dnn *self, const morapi_Char *i_text) morapi_Int32 morapi_Dnn_getModelTextSize ( morapi_Dnn *self) morapi_Result morapi_Dnn_getModelText ( morapi_Dnn *self, morapi_Char *o_text, morapi_Int32 i_text_size)","title":"Optional settings"},{"location":"structmorapi__Dnn.html#tensor-operations","text":"morapi_Tensor * morapi_Dnn_addTensor ( morapi_Dnn *self, const morapi_Char *i_name) morapi_Result morapi_Dnn_removeTensor ( morapi_Dnn *self, morapi_Tensor *io_tensor) morapi_Int32 morapi_Dnn_getTensorNum (const morapi_Dnn *self) morapi_Tensor * morapi_Dnn_getTensor (const morapi_Dnn *self, morapi_Int32 i_index) morapi_Tensor * morapi_Dnn_findTensor (const morapi_Dnn *self, const morapi_Char *i_name)","title":"Tensor operations"},{"location":"structmorapi__Dnn.html#net-operations","text":"morapi_Int32 morapi_Dnn_getNetNum (const morapi_Dnn *self) morapi_DnnNet * morapi_Dnn_getNet (const morapi_Dnn *self, morapi_Int32 i_index) morapi_DnnNet * morapi_Dnn_findMainNet (const morapi_Dnn *self) morapi_DnnNet * morapi_Dnn_addNet ( morapi_Dnn *self, const morapi_Char *i_name) morapi_Result morapi_Dnn_removeNet ( morapi_Dnn *self, morapi_DnnNet *io_net) morapi_DnnNet * morapi_Dnn_findNet (const morapi_Dnn *self, const morapi_Char *i_name)","title":"Net operations"},{"location":"structmorapi__Dnn.html#other-functions","text":"morapi_Result morapi_Dnn_parse ( morapi_Dnn *self) morapi_Result morapi_Dnn_compile ( morapi_Dnn *self) morapi_Result morapi_Dnn_cleanup ( morapi_Dnn *self) morapi_DnnState morapi_Dnn_getState (const morapi_Dnn *self) morapi_Bool morapi_Dnn_isFailed (const morapi_Dnn *self) morapi_Result morapi_Dnn_clear ( morapi_Dnn *self) morapi_Bool morapi_Dnn_isEmpty (const morapi_Dnn *self) morapi_Result morapi_Dnn_loadFromMemory ( morapi_Dnn *self, morapi_Uint8 *i_model_buf, morapi_Int64 i_model_size) morapi_Bool morapi_Dnn_isSecret (const morapi_Dnn *self) morapi_Bool morapi_Dnn_isPasswordProtected (const morapi_Dnn *self) morapi_Bool morapi_Dnn_isLazy (const morapi_Dnn *self) morapi_Bool morapi_Dnn_setBinaryLibEmbedded ( morapi_Dnn *self, morapi_Bool i_is_embedded) morapi_Bool morapi_Dnn_isBinaryLibEmbedded (const morapi_Dnn *self) morapi_Result morapi_Dnn_saveBinaryLib ( morapi_Dnn *self, const morapi_Char *i_file_name, morapi_Bool i_saves_only_when_changed) morapi_Result morapi_Dnn_loadBinaryLib ( morapi_Dnn *self, const morapi_Char *i_file_name) morapi_Result morapi_Dnn_tune ( morapi_Dnn *self, const morapi_DnnRecipe *i_recipe) morapi_Bool morapi_Dnn_isTuned (const morapi_Dnn *self) const morapi_Params * morapi_Dnn_getTuneParams (const morapi_Dnn *self) morapi_Result morapi_Dnn_recycle ( morapi_Dnn *self) morapi_Tensor * morapi_Dnn_getInput (const morapi_Dnn *self, morapi_Int32 i_input_index) morapi_Tensor * morapi_Dnn_getOutput (const morapi_Dnn *self, morapi_Int32 i_output_index) morapi_Result morapi_Dnn_reset ( morapi_Dnn *self) morapi_Result morapi_Dnn_squashNet ( morapi_Dnn *self, morapi_DnnNet *io_net, const morapi_Char *i_name)","title":"Other functions"},{"location":"structmorapi__Dnn.html#related-functions","text":"morapi_Result morapi_Dnn_static_installRoutineSchema ( morapi_Env *env, const morapi_Char *i_schema) morapi_Int32 morapi_Dnn_static_getRoutineSchemaNum ( morapi_Env *env) const morapi_Char ** morapi_Dnn_static_getRoutineSchemas ( morapi_Env *env)","title":"Related Functions"},{"location":"structmorapi__Dnn.html#detailed-description","text":"Deep neural network. This structure contains all data needed to operate a dnn. test_decompose_api.c , test_dnn_api.c , and test_prof_api.c .","title":"Detailed Description"},{"location":"structmorapi__Dnn.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__Dnn.html#morapi_create_dnn","text":"morapi_Dnn * morapi_create_Dnn ( morapi_Env * io_env) Creates a Dnn module. Parameters io_env : the environment data Returns the created dnn module test_decompose_api.c , test_dnn_api.c , and test_prof_api.c .","title":"morapi_create_Dnn()"},{"location":"structmorapi__Dnn.html#morapi_dnn_initialize","text":"morapi_Result morapi_Dnn_initialize ( morapi_Dnn * self) Initializes the Dnn module. Parameters self : the dnn. test_dnn_api.c .","title":"morapi_Dnn_initialize()"},{"location":"structmorapi__Dnn.html#morapi_dnn_load","text":"morapi_Result morapi_Dnn_load ( morapi_Dnn * self, const morapi_Char * i_filename, const void * i_pass, morapi_Int32 i_pass_size, morapi_Bool i_is_lazy) Reads the dnn from a file. Parameters self : the dnn module i_filename : the path of the dnn file i_pass : the password of the dnn file, use NULL for the dnn file without password i_pass_size : the size of the password i_is_lazy : lazy loading or not. test_decompose_api.c , test_dnn_api.c , and test_prof_api.c .","title":"morapi_Dnn_load()"},{"location":"structmorapi__Dnn.html#morapi_dnn_getinputnum","text":"morapi_Int32 morapi_Dnn_getInputNum (const morapi_Dnn * self) Get the number of inputs for Dnn. Parameters self : the dnn module","title":"morapi_Dnn_getInputNum()"},{"location":"structmorapi__Dnn.html#morapi_dnn_getinputblob","text":"morapi_Tensor * morapi_Dnn_getInputBlob (const morapi_Dnn * self, morapi_Int32 i_input_index) Gets the i_input_index-th input blob. Valid after compiled. Parameters self : the dnn module i_input_index : input index","title":"morapi_Dnn_getInputBlob()"},{"location":"structmorapi__Dnn.html#morapi_dnn_setinputimage","text":"morapi_Result morapi_Dnn_setInputImage ( morapi_Dnn * self, const morapi_Image * i_image, morapi_Int32 i_index, morapi_Int32 i_batch) Sets an image to the i_batch-th batch of i_input_index-th input. Uses the dnn input attrs (keep_ar, padding_color, resize_mode) for the resize settings, if available. Defaults to Bilinear resize and doesn't keep image aspect ratio (no padding). Parameters self : the dnn module i_image : image to be set as input i_index : input index to set the image at i_batch : batch to set the image at test_dnn_api.c .","title":"morapi_Dnn_setInputImage()"},{"location":"structmorapi__Dnn.html#morapi_dnn_setinputimagewithoptions","text":"morapi_Result morapi_Dnn_setInputImageWithOptions ( morapi_Dnn * self, const morapi_Image * i_image, morapi_Int32 i_index, morapi_Int32 i_batch, morapi_Bool i_keep_ar, morapi_DnnResizeMode i_resize_mode, morapi_Uint8 i_padding_color[3]) Sets an image to the i_batch-th batch of i_input_index-th input using the given resize mode and padding to keep aspect ratio if set. Parameters self : the dnn module i_image : image to be set as input i_index : input index to set the image at i_batch : batch to set the image at i_keep_ar : whether or not to keep aspect ratio if resizing the image i_resize_mode : image resize mode, either MORAPI_DNN_RESIZE_MODE_BILINEAR or MORAPI_DNN_RESIZE_MODE_NEAREST i_padding_color : 0-255 RGB values to use as padding when resizing with keep aspect ratio on, NULL for zero padding","title":"morapi_Dnn_setInputImageWithOptions()"},{"location":"structmorapi__Dnn.html#morapi_dnn_getinputattrs","text":"morapi_Params * morapi_Dnn_getInputAttrs (const morapi_Dnn * self, morapi_Int32 i_input_index) Gets the i_input_index-th input attributes. Parameters self : the dnn module i_input_index : input index","title":"morapi_Dnn_getInputAttrs()"},{"location":"structmorapi__Dnn.html#morapi_dnn_forward","text":"morapi_Result morapi_Dnn_forward ( morapi_Dnn * self) Executes forward propagation once on the network. Parameters self : the dnn module test_dnn_api.c .","title":"morapi_Dnn_forward()"},{"location":"structmorapi__Dnn.html#morapi_dnn_getoutputnum","text":"morapi_Int32 morapi_Dnn_getOutputNum (const morapi_Dnn * self) Gets the number of outputs. Parameters self : the dnn module","title":"morapi_Dnn_getOutputNum()"},{"location":"structmorapi__Dnn.html#morapi_dnn_getoutputattrs","text":"morapi_Params * morapi_Dnn_getOutputAttrs (const morapi_Dnn * self, morapi_Int32 i_output_index) Gets attributes from the i_output_index-th output. Parameters self : the dnn module i_output_index : output tensor index Returns morapi_Params object test_dnn_api.c .","title":"morapi_Dnn_getOutputAttrs()"},{"location":"structmorapi__Dnn.html#morapi_dnn_getoutputblob","text":"morapi_Tensor * morapi_Dnn_getOutputBlob (const morapi_Dnn * self, morapi_Int32 i_output_index) Gets tensor blob from the i_output_index-th output. Valid after compiled. Returns morapi_Tensor object test_dnn_api.c .","title":"morapi_Dnn_getOutputBlob()"},{"location":"structmorapi__Dnn.html#morapi_dnn_save","text":"morapi_Result morapi_Dnn_save ( morapi_Dnn * self, const morapi_Char * o_filename, const void * i_pass, morapi_Int32 i_pass_size, morapi_Bool i_is_secret) Writes the dnn to a file. It does nothing and returns MORAPI_ERROR_STATE if self is secret. Parameters self : the dnn module o_filename : output file name i_pass : encryption password, if needed i_pass_size : encryption password size i_is_secret : whether makes the dnn secret or not. test_decompose_api.c , and test_prof_api.c .","title":"morapi_Dnn_save()"},{"location":"structmorapi__Dnn.html#morapi_destroy_dnn","text":"morapi_Result morapi_destroy_Dnn ( morapi_Env * io_env, morapi_Dnn * self) Destroys the Dnn module to free memory. Parameters io_env : the envitonment data self : the dnn module to be destroyed test_decompose_api.c , test_dnn_api.c , and test_prof_api.c .","title":"morapi_destroy_Dnn()"},{"location":"structmorapi__Dnn.html#morapi_dnn_setthreadnum","text":"morapi_Result morapi_Dnn_setThreadNum ( morapi_Dnn * self, morapi_Int32 i_thread_num) Sets the number of threads for forward propagation. It clears affinity masks set by morapi_Dnn_setAffinityMask() . If i_thread_num=0, the number of threads gets equal to the number of logical CPU cores. Parameters self : the dnn module i_thread_num : number of threads to be used test_dnn_api.c .","title":"morapi_Dnn_setThreadNum()"},{"location":"structmorapi__Dnn.html#morapi_dnn_getthreadnum","text":"morapi_Int32 morapi_Dnn_getThreadNum (const morapi_Dnn * self) Gets the number of CPU threads for forward propagation. If 0 is set by morapi_Dnn_setThreadNum() , returns the number of logical CPU cores. Parameters self : the dnn module","title":"morapi_Dnn_getThreadNum()"},{"location":"structmorapi__Dnn.html#morapi_dnn_setaffinitymask","text":"morapi_Result morapi_Dnn_setAffinityMask ( morapi_Dnn * self, morapi_Int32 i_thread_index, const morapi_Char * i_affinity_mask) Sets an affinity mask. Parameters self : the dnn module i_thread_index : thread index for which affinity mask will be set i_affinity_mask : an affinity mask represented in hex (\"0x..\") or binary (\"0b..\") form.","title":"morapi_Dnn_setAffinityMask()"},{"location":"structmorapi__Dnn.html#morapi_dnn_getaffinitymasknum","text":"morapi_Int32 morapi_Dnn_getAffinityMaskNum (const morapi_Dnn * self) Gets the number of affinity masks. Parameters self : the dnn module","title":"morapi_Dnn_getAffinityMaskNum()"},{"location":"structmorapi__Dnn.html#morapi_dnn_getaffinitymask","text":"const morapi_Char * morapi_Dnn_getAffinityMask ( morapi_Dnn * self, morapi_Int32 i_thread_index) Gets an affinity mask in hex (\"0x..) form. Parameters self : the dnn module i_thread_index : thread index for which affinity mask will be get","title":"morapi_Dnn_getAffinityMask()"},{"location":"structmorapi__Dnn.html#morapi_dnn_resetthreadnumandaffinitymask","text":"morapi_Result morapi_Dnn_resetThreadNumAndAffinityMask ( morapi_Dnn * self) Resets the number of threads and affinity mask to the default. Parameters self : the dnn module.","title":"morapi_Dnn_resetThreadNumAndAffinityMask()"},{"location":"structmorapi__Dnn.html#morapi_dnn_setboosted","text":"morapi_Result morapi_Dnn_setBoosted ( morapi_Dnn * self, morapi_Bool i_is_boosted) Sets boosted multi-threads (MORAPI_TRUE) or not (MORAPI_FALSE). Boosted multi-thread mode allows to 'busy wait' the other threads. The default is MORAPI_TRUE. Parameters self : the dnn module i_is_boosted : whether boosted or not.","title":"morapi_Dnn_setBoosted()"},{"location":"structmorapi__Dnn.html#morapi_dnn_isboosted","text":"morapi_Bool morapi_Dnn_isBoosted (const morapi_Dnn * self) Gets whether boosted multi-thread mode or not. Parameters self : the dnn module Returns whether boosted or not.","title":"morapi_Dnn_isBoosted()"},{"location":"structmorapi__Dnn.html#morapi_dnn_setbatchsize","text":"morapi_Result morapi_Dnn_setBatchSize ( morapi_Dnn * self, morapi_Int32 i_batch_size) Sets the batch size for forward propagation. Parameters self : the dnn module i_batch_size : batch size test_dnn_api.c .","title":"morapi_Dnn_setBatchSize()"},{"location":"structmorapi__Dnn.html#morapi_dnn_getbatchsize","text":"morapi_Int32 morapi_Dnn_getBatchSize (const morapi_Dnn * self) Gets the batch size for forward propagation. Parameters self : the dnn module","title":"morapi_Dnn_getBatchSize()"},{"location":"structmorapi__Dnn.html#morapi_dnn_setinputshape","text":"morapi_Result morapi_Dnn_setInputShape ( morapi_Dnn * self, morapi_Int32 i_input_index, morapi_Int32 i_rank, const morapi_Int32 * i_shape) Sets the i_input_index-th input shape. Parameters self : the dnn module i_input_index : input index i_rank : input rank i_shape : shape to be set","title":"morapi_Dnn_setInputShape()"},{"location":"structmorapi__Dnn.html#morapi_dnn_setbufoptenabled","text":"morapi_Result morapi_Dnn_setBufOptEnabled ( morapi_Dnn * self, const morapi_Device * i_device, morapi_Bool i_is_enabled) Enables or disables buffer optimization. Buffer optimization reduces memory usage during forward propagation. Parameters self : the dnn module i_device : device for which buffer optimization will be enabled/disabled i_is_enabled : boolean indicating whether it will be enabled (true) or disabled (false)","title":"morapi_Dnn_setBufOptEnabled()"},{"location":"structmorapi__Dnn.html#morapi_dnn_isbufoptenabled","text":"morapi_Bool morapi_Dnn_isBufOptEnabled (const morapi_Dnn * self, const morapi_Device * i_device) Returns whether buffer optimization is enabled or not. Parameters self : the dnn module i_device : device to be checked","title":"morapi_Dnn_isBufOptEnabled()"},{"location":"structmorapi__Dnn.html#morapi_dnn_setdumpenabled","text":"morapi_Result morapi_Dnn_setDumpEnabled ( morapi_Dnn * self, morapi_Bool i_is_dump_enabled) Enables or disables data dump of layer outputs by morapi_Dnn_dump(). Precondition Call this before morapi_Dnn_compile() . This method automatically uncompiles if already compiled. Parameters self : the dnn module i_is_dump_enabled : false to disable dump, true to enable it","title":"morapi_Dnn_setDumpEnabled()"},{"location":"structmorapi__Dnn.html#morapi_dnn_isdumpenabled","text":"morapi_Bool morapi_Dnn_isDumpEnabled (const morapi_Dnn * self) Returns whether data dump is enabled or not. Parameters self : the dnn module","title":"morapi_Dnn_isDumpEnabled()"},{"location":"structmorapi__Dnn.html#morapi_dnn_setdumpdir","text":"morapi_Result morapi_Dnn_setDumpDir ( morapi_Dnn * self, const morapi_Char * i_dump_dir) Sets the dump directory. If NULL or empty, no file is dumped. Parameters self : the dnn module i_dump_dir : dump directory","title":"morapi_Dnn_setDumpDir()"},{"location":"structmorapi__Dnn.html#morapi_dnn_setmodeltext","text":"morapi_Result morapi_Dnn_setModelText ( morapi_Dnn * self, const morapi_Char * i_text) Sets the model text. Parameters self : the dnn module i_text : text to be set","title":"morapi_Dnn_setModelText()"},{"location":"structmorapi__Dnn.html#morapi_dnn_getmodeltextsize","text":"morapi_Int32 morapi_Dnn_getModelTextSize ( morapi_Dnn * self) Gets the length of JSON text data for the Dnn network structure. Parameters self : the dnn module","title":"morapi_Dnn_getModelTextSize()"},{"location":"structmorapi__Dnn.html#morapi_dnn_getmodeltext","text":"morapi_Result morapi_Dnn_getModelText ( morapi_Dnn * self, morapi_Char * o_text, morapi_Int32 i_text_size) Gets the JSON text data for Dnn network structure. Parameters self : the dnn module o_text : output model text i_text_size : text size","title":"morapi_Dnn_getModelText()"},{"location":"structmorapi__Dnn.html#morapi_dnn_addtensor","text":"morapi_Tensor * morapi_Dnn_addTensor ( morapi_Dnn * self, const morapi_Char * i_name) Adds a new tensor to the Dnn module. Parameters self : the dnn module i_name : tensor name","title":"morapi_Dnn_addTensor()"},{"location":"structmorapi__Dnn.html#morapi_dnn_removetensor","text":"morapi_Result morapi_Dnn_removeTensor ( morapi_Dnn * self, morapi_Tensor * io_tensor) Removes the tensor from the Dnn. Parameters self : the dnn module io_tensor : tensor to be removed","title":"morapi_Dnn_removeTensor()"},{"location":"structmorapi__Dnn.html#morapi_dnn_gettensornum","text":"morapi_Int32 morapi_Dnn_getTensorNum (const morapi_Dnn * self) Gets the number of named tensors stored in the Dnn. Parameters self : the dnn module","title":"morapi_Dnn_getTensorNum()"},{"location":"structmorapi__Dnn.html#morapi_dnn_gettensor","text":"morapi_Tensor * morapi_Dnn_getTensor (const morapi_Dnn * self, morapi_Int32 i_index) Gets the i_index-th named tensor in the Dnn. Parameters self : the dnn module i_index : tensor index","title":"morapi_Dnn_getTensor()"},{"location":"structmorapi__Dnn.html#morapi_dnn_findtensor","text":"morapi_Tensor * morapi_Dnn_findTensor (const morapi_Dnn * self, const morapi_Char * i_name) Finds a tensor in the Dnn by name. Parameters self : the dnn module i_name : tensor name","title":"morapi_Dnn_findTensor()"},{"location":"structmorapi__Dnn.html#morapi_dnn_getnetnum","text":"morapi_Int32 morapi_Dnn_getNetNum (const morapi_Dnn * self) Gets the number of DnnNet subnetworks in the Dnn. Parameters self : the dnn module Returns the number of DnnNet test_dnn_api.c .","title":"morapi_Dnn_getNetNum()"},{"location":"structmorapi__Dnn.html#morapi_dnn_getnet","text":"morapi_DnnNet * morapi_Dnn_getNet (const morapi_Dnn * self, morapi_Int32 i_index) Gets the i_index-th DnnNet subnetwork in the Dnn. Parameters self : the dnn module i_index : net index Returns the i_index-th DnnNet test_dnn_api.c .","title":"morapi_Dnn_getNet()"},{"location":"structmorapi__Dnn.html#morapi_dnn_findmainnet","text":"morapi_DnnNet * morapi_Dnn_findMainNet (const morapi_Dnn * self) Finds the main subnetwork in the Dnn. Parameters self : the dnn module Returns the biggest subnetwork test_decompose_api.c .","title":"morapi_Dnn_findMainNet()"},{"location":"structmorapi__Dnn.html#morapi_dnn_addnet","text":"morapi_DnnNet * morapi_Dnn_addNet ( morapi_Dnn * self, const morapi_Char * i_name) Adds a net. Parameters self : the dnn module i_name : net name Returns the resulted DnnNet module","title":"morapi_Dnn_addNet()"},{"location":"structmorapi__Dnn.html#morapi_dnn_removenet","text":"morapi_Result morapi_Dnn_removeNet ( morapi_Dnn * self, morapi_DnnNet * io_net) Removes the net. Parameters self : the dnn module io_net : net to be removed test_decompose_api.c .","title":"morapi_Dnn_removeNet()"},{"location":"structmorapi__Dnn.html#morapi_dnn_findnet","text":"morapi_DnnNet * morapi_Dnn_findNet (const morapi_Dnn * self, const morapi_Char * i_name) Finds the net named i_name. Parameters self : the dnn module i_name : name of the net to be found Returns pointer to the DnnNet module","title":"morapi_Dnn_findNet()"},{"location":"structmorapi__Dnn.html#morapi_dnn_parse","text":"morapi_Result morapi_Dnn_parse ( morapi_Dnn * self) Parses the dnn. Parameters self : the dnn module","title":"morapi_Dnn_parse()"},{"location":"structmorapi__Dnn.html#morapi_dnn_compile","text":"morapi_Result morapi_Dnn_compile ( morapi_Dnn * self) Compiles the dnn to run forward propagation. Parameters self : the dnn module test_dnn_api.c .","title":"morapi_Dnn_compile()"},{"location":"structmorapi__Dnn.html#morapi_dnn_cleanup","text":"morapi_Result morapi_Dnn_cleanup ( morapi_Dnn * self) Cleans up. Parameters self : the dnn module to be cleaned up","title":"morapi_Dnn_cleanup()"},{"location":"structmorapi__Dnn.html#morapi_dnn_getstate","text":"morapi_DnnState morapi_Dnn_getState (const morapi_Dnn * self) Gets the state. Parameters self : the dnn module","title":"morapi_Dnn_getState()"},{"location":"structmorapi__Dnn.html#morapi_dnn_isfailed","text":"morapi_Bool morapi_Dnn_isFailed (const morapi_Dnn * self) Returns whether self is failed or not. Parameters self : the dnn module","title":"morapi_Dnn_isFailed()"},{"location":"structmorapi__Dnn.html#morapi_dnn_clear","text":"morapi_Result morapi_Dnn_clear ( morapi_Dnn * self) Removes all tensors and nets. Parameters self : the dnn module","title":"morapi_Dnn_clear()"},{"location":"structmorapi__Dnn.html#morapi_dnn_isempty","text":"morapi_Bool morapi_Dnn_isEmpty (const morapi_Dnn * self) Returns whether self is empty or not.","title":"morapi_Dnn_isEmpty()"},{"location":"structmorapi__Dnn.html#morapi_dnn_loadfrommemory","text":"morapi_Result morapi_Dnn_loadFromMemory ( morapi_Dnn * self, morapi_Uint8 * i_model_buf, morapi_Int64 i_model_size) load the dnn from memory. Parameters self : the dnn module i_model_buf : input model buffer i_model_size : input model size","title":"morapi_Dnn_loadFromMemory()"},{"location":"structmorapi__Dnn.html#morapi_dnn_issecret","text":"morapi_Bool morapi_Dnn_isSecret (const morapi_Dnn * self) Returns whether the dnn is secret or not. Parameters self : the dnn module","title":"morapi_Dnn_isSecret()"},{"location":"structmorapi__Dnn.html#morapi_dnn_ispasswordprotected","text":"morapi_Bool morapi_Dnn_isPasswordProtected (const morapi_Dnn * self) Returns whether self is password-protected or not.","title":"morapi_Dnn_isPasswordProtected()"},{"location":"structmorapi__Dnn.html#morapi_dnn_islazy","text":"morapi_Bool morapi_Dnn_isLazy (const morapi_Dnn * self) Returns whether the dnn is lazy loaded or not. Parameters self : the dnn module","title":"morapi_Dnn_isLazy()"},{"location":"structmorapi__Dnn.html#morapi_dnn_setbinarylibembedded","text":"morapi_Bool morapi_Dnn_setBinaryLibEmbedded ( morapi_Dnn * self, morapi_Bool i_is_embedded) Sets whether the binary lib is embedded when serialization. Parameters self : the dnn object. i_is_embedded : whether the binary lib is embedded or not.","title":"morapi_Dnn_setBinaryLibEmbedded()"},{"location":"structmorapi__Dnn.html#morapi_dnn_isbinarylibembedded","text":"morapi_Bool morapi_Dnn_isBinaryLibEmbedded (const morapi_Dnn * self) Returns whether the binary lib is embedded when serialization. Parameters self : the dnn object.","title":"morapi_Dnn_isBinaryLibEmbedded()"},{"location":"structmorapi__Dnn.html#morapi_dnn_savebinarylib","text":"morapi_Result morapi_Dnn_saveBinaryLib ( morapi_Dnn * self, const morapi_Char * i_file_name, morapi_Bool i_saves_only_when_changed) Saves the binary lib to a file. Parameters self : the dnn object. i_file_name : the file name. i_saves_only_when_changed : whether to save the binary library only when it is changed.","title":"morapi_Dnn_saveBinaryLib()"},{"location":"structmorapi__Dnn.html#morapi_dnn_loadbinarylib","text":"morapi_Result morapi_Dnn_loadBinaryLib ( morapi_Dnn * self, const morapi_Char * i_file_name) Loads the binary lib from a file.","title":"morapi_Dnn_loadBinaryLib()"},{"location":"structmorapi__Dnn.html#morapi_dnn_tune","text":"morapi_Result morapi_Dnn_tune ( morapi_Dnn * self, const morapi_DnnRecipe * i_recipe) Tune the dnn by the tuning recipe. Parameters self : the dnn module i_recipe : tuning recipe test_prof_api.c .","title":"morapi_Dnn_tune()"},{"location":"structmorapi__Dnn.html#morapi_dnn_istuned","text":"morapi_Bool morapi_Dnn_isTuned (const morapi_Dnn * self) Returns whether the dnn is tuned or not. Parameters self : the dnn module","title":"morapi_Dnn_isTuned()"},{"location":"structmorapi__Dnn.html#morapi_dnn_gettuneparams","text":"const morapi_Params * morapi_Dnn_getTuneParams (const morapi_Dnn * self) Gets tuning parameters.","title":"morapi_Dnn_getTuneParams()"},{"location":"structmorapi__Dnn.html#morapi_dnn_recycle","text":"morapi_Result morapi_Dnn_recycle ( morapi_Dnn * self) Recycles the dnn by decompiling and unparsing. Parameters self : the dnn module","title":"morapi_Dnn_recycle()"},{"location":"structmorapi__Dnn.html#morapi_dnn_getinput","text":"morapi_Tensor * morapi_Dnn_getInput (const morapi_Dnn * self, morapi_Int32 i_input_index) Gets the i_input_index-th input tensor. Parameters self : the dnn module i_input_index : input tensor index","title":"morapi_Dnn_getInput()"},{"location":"structmorapi__Dnn.html#morapi_dnn_getoutput","text":"morapi_Tensor * morapi_Dnn_getOutput (const morapi_Dnn * self, morapi_Int32 i_output_index) Gets the i_output_index-th output tensor. Parameters self : the dnn module i_output_index : output tensor index","title":"morapi_Dnn_getOutput()"},{"location":"structmorapi__Dnn.html#morapi_dnn_reset","text":"morapi_Result morapi_Dnn_reset ( morapi_Dnn * self) Resets the network state for cases where weights change during execution. Parameters self : the dnn module","title":"morapi_Dnn_reset()"},{"location":"structmorapi__Dnn.html#morapi_dnn_squashnet","text":"morapi_Result morapi_Dnn_squashNet ( morapi_Dnn * self, morapi_DnnNet * io_net, const morapi_Char * i_name) Squashes the net. test_decompose_api.c .","title":"morapi_Dnn_squashNet()"},{"location":"structmorapi__Dnn.html#friends-and-related-function-documentation","text":"","title":"Friends And Related Function Documentation"},{"location":"structmorapi__Dnn.html#morapi_dnn_static_installroutineschema","text":"morapi_Result morapi_Dnn_static_installRoutineSchema ( morapi_Env * env, const morapi_Char * i_schema) Installs a routine schema.","title":"morapi_Dnn_static_installRoutineSchema()"},{"location":"structmorapi__Dnn.html#morapi_dnn_static_getroutineschemanum","text":"morapi_Int32 morapi_Dnn_static_getRoutineSchemaNum ( morapi_Env * env) Gets the number of installed routine schemas. Parameters env : environment where the routine are installed.","title":"morapi_Dnn_static_getRoutineSchemaNum()"},{"location":"structmorapi__Dnn.html#morapi_dnn_static_getroutineschemas","text":"const morapi_Char ** morapi_Dnn_static_getRoutineSchemas ( morapi_Env * env) Gets the installed routine schemas. Parameters env : environment where the routines are installed.","title":"morapi_Dnn_static_getRoutineSchemas()"},{"location":"structmorapi__DnnForward.html","text":"morapi_DnnForward Struct Reference dnn Forward-propagation functions. More... #include <morapi_softneuro.h> Public Types typedef morapi_Result (* morapi_DnnForward_Func ) (void *obj, morapi_Int32 i_task_index, const morapi_DnnForwardArg *i_arg) typedef morapi_Result (* morapi_DnnForward_Profile ) (void *obj, morapi_Int64 *o_start_usec, morapi_Int64 *o_stop_usec) Public Member Functions morapi_Result morapi_DnnForward_clear ( morapi_DnnForward *self) morapi_Result morapi_DnnForward_add ( morapi_DnnForward *self, const morapi_Char *i_name, morapi_DnnForward_Func i_func, void *i_func_obj, morapi_Int32 i_task_num, morapi_DnnForward_Profile i_profile, void *i_profile_obj) Data Fields const morapi_Char * names [8] morapi_DnnForward_Func funcs [8] void * func_objs [8] morapi_Int32 task_nums [8] morapi_DnnForward_Profile profiles [8] void * profile_objs [8] morapi_Int32 num Detailed Description Forward-propagation functions. Member Typedef Documentation morapi_DnnForward_Func typedef morapi_Result (* morapi_DnnForward_Func) (void *obj, morapi_Int32 i_task_index, const morapi_DnnForwardArg *i_arg) Forward function. Parameters obj : the routine object. i_task_index : the task index. i_arg : the argument. morapi_DnnForward_Profile typedef morapi_Result (* morapi_DnnForward_Profile) (void *obj, morapi_Int64 *o_start_usec, morapi_Int64 *o_stop_usec) Profile function. Parameters obj : the routine object. o_start_usec : starting time (usec) of processing. o_start_usec : stopping time (usec) or processing. Member Function Documentation morapi_DnnForward_clear() morapi_Result morapi_DnnForward_clear ( morapi_DnnForward * self) Clears the forward-propagation object. Parameters self : the forward-propagation object. morapi_DnnForward_add() morapi_Result morapi_DnnForward_add ( morapi_DnnForward * self, const morapi_Char * i_name, morapi_DnnForward_Func i_func, void * i_func_obj, morapi_Int32 i_task_num, morapi_DnnForward_Profile i_profile, void * i_profile_obj) Adds a forward function. Parameters self : forward-propagaion object. i_name : name of forward-propagation. i_func : function for forward-propagation. i_func_obj : the first argument object of i_func. i_task_num : the number of forward-propagatin tasks. i_profile : function for profiling. i_profile_obj : the first argument object of i_profile. Field Documentation names const morapi_Char * morapi_DnnForward::names[8] function names. funcs morapi_DnnForward_Func morapi_DnnForward::funcs[8] forward functions. func_objs void* morapi_DnnForward::func_objs[8] objects passed to the first argument of funcs. task_nums morapi_Int32 morapi_DnnForward::task_nums[8] the numbers of tasks. profiles morapi_DnnForward_Profile morapi_DnnForward::profiles[8] profile functions. profile_objs void* morapi_DnnForward::profile_objs[8] objects passed to the first argument of profiles. num morapi_Int32 morapi_DnnForward::num the number of forward functions.","title":"morapi_DnnForward"},{"location":"structmorapi__DnnForward.html#morapi_dnnforward-struct-reference","text":"dnn Forward-propagation functions. More... #include <morapi_softneuro.h>","title":"morapi_DnnForward Struct Reference"},{"location":"structmorapi__DnnForward.html#public-types","text":"typedef morapi_Result (* morapi_DnnForward_Func ) (void *obj, morapi_Int32 i_task_index, const morapi_DnnForwardArg *i_arg) typedef morapi_Result (* morapi_DnnForward_Profile ) (void *obj, morapi_Int64 *o_start_usec, morapi_Int64 *o_stop_usec)","title":"Public Types"},{"location":"structmorapi__DnnForward.html#public-member-functions","text":"morapi_Result morapi_DnnForward_clear ( morapi_DnnForward *self) morapi_Result morapi_DnnForward_add ( morapi_DnnForward *self, const morapi_Char *i_name, morapi_DnnForward_Func i_func, void *i_func_obj, morapi_Int32 i_task_num, morapi_DnnForward_Profile i_profile, void *i_profile_obj)","title":"Public Member Functions"},{"location":"structmorapi__DnnForward.html#data-fields","text":"const morapi_Char * names [8] morapi_DnnForward_Func funcs [8] void * func_objs [8] morapi_Int32 task_nums [8] morapi_DnnForward_Profile profiles [8] void * profile_objs [8] morapi_Int32 num","title":"Data Fields"},{"location":"structmorapi__DnnForward.html#detailed-description","text":"Forward-propagation functions.","title":"Detailed Description"},{"location":"structmorapi__DnnForward.html#member-typedef-documentation","text":"","title":"Member Typedef Documentation"},{"location":"structmorapi__DnnForward.html#morapi_dnnforward_func","text":"typedef morapi_Result (* morapi_DnnForward_Func) (void *obj, morapi_Int32 i_task_index, const morapi_DnnForwardArg *i_arg) Forward function. Parameters obj : the routine object. i_task_index : the task index. i_arg : the argument.","title":"morapi_DnnForward_Func"},{"location":"structmorapi__DnnForward.html#morapi_dnnforward_profile","text":"typedef morapi_Result (* morapi_DnnForward_Profile) (void *obj, morapi_Int64 *o_start_usec, morapi_Int64 *o_stop_usec) Profile function. Parameters obj : the routine object. o_start_usec : starting time (usec) of processing. o_start_usec : stopping time (usec) or processing.","title":"morapi_DnnForward_Profile"},{"location":"structmorapi__DnnForward.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__DnnForward.html#morapi_dnnforward_clear","text":"morapi_Result morapi_DnnForward_clear ( morapi_DnnForward * self) Clears the forward-propagation object. Parameters self : the forward-propagation object.","title":"morapi_DnnForward_clear()"},{"location":"structmorapi__DnnForward.html#morapi_dnnforward_add","text":"morapi_Result morapi_DnnForward_add ( morapi_DnnForward * self, const morapi_Char * i_name, morapi_DnnForward_Func i_func, void * i_func_obj, morapi_Int32 i_task_num, morapi_DnnForward_Profile i_profile, void * i_profile_obj) Adds a forward function. Parameters self : forward-propagaion object. i_name : name of forward-propagation. i_func : function for forward-propagation. i_func_obj : the first argument object of i_func. i_task_num : the number of forward-propagatin tasks. i_profile : function for profiling. i_profile_obj : the first argument object of i_profile.","title":"morapi_DnnForward_add()"},{"location":"structmorapi__DnnForward.html#field-documentation","text":"","title":"Field Documentation"},{"location":"structmorapi__DnnForward.html#names","text":"const morapi_Char * morapi_DnnForward::names[8] function names.","title":"names"},{"location":"structmorapi__DnnForward.html#funcs","text":"morapi_DnnForward_Func morapi_DnnForward::funcs[8] forward functions.","title":"funcs"},{"location":"structmorapi__DnnForward.html#func_objs","text":"void* morapi_DnnForward::func_objs[8] objects passed to the first argument of funcs.","title":"func_objs"},{"location":"structmorapi__DnnForward.html#task_nums","text":"morapi_Int32 morapi_DnnForward::task_nums[8] the numbers of tasks.","title":"task_nums"},{"location":"structmorapi__DnnForward.html#profiles","text":"morapi_DnnForward_Profile morapi_DnnForward::profiles[8] profile functions.","title":"profiles"},{"location":"structmorapi__DnnForward.html#profile_objs","text":"void* morapi_DnnForward::profile_objs[8] objects passed to the first argument of profiles.","title":"profile_objs"},{"location":"structmorapi__DnnForward.html#num","text":"morapi_Int32 morapi_DnnForward::num the number of forward functions.","title":"num"},{"location":"structmorapi__DnnForwardArg.html","text":"morapi_DnnForwardArg Struct Reference dnn Argument of forward-propagation function. More... #include <morapi_softneuro.h> Data Fields morapi_Int32 task_num morapi_Int32 worker_index morapi_Int32 worker_num Detailed Description Argument of forward-propagation function. Field Documentation task_num morapi_Int32 task_num the number of tasks. worker_index morapi_Int32 worker_index the worker index. worker_num morapi_Int32 worker_num the number of workers.","title":"morapi_DnnForwardArg"},{"location":"structmorapi__DnnForwardArg.html#morapi_dnnforwardarg-struct-reference","text":"dnn Argument of forward-propagation function. More... #include <morapi_softneuro.h>","title":"morapi_DnnForwardArg Struct Reference"},{"location":"structmorapi__DnnForwardArg.html#data-fields","text":"morapi_Int32 task_num morapi_Int32 worker_index morapi_Int32 worker_num","title":"Data Fields"},{"location":"structmorapi__DnnForwardArg.html#detailed-description","text":"Argument of forward-propagation function.","title":"Detailed Description"},{"location":"structmorapi__DnnForwardArg.html#field-documentation","text":"","title":"Field Documentation"},{"location":"structmorapi__DnnForwardArg.html#task_num","text":"morapi_Int32 task_num the number of tasks.","title":"task_num"},{"location":"structmorapi__DnnForwardArg.html#worker_index","text":"morapi_Int32 worker_index the worker index.","title":"worker_index"},{"location":"structmorapi__DnnForwardArg.html#worker_num","text":"morapi_Int32 worker_num the number of workers.","title":"worker_num"},{"location":"structmorapi__DnnLayer.html","text":"morapi_DnnLayer Struct Reference dnn Dnn layer. More... #include <morapi_softneuro.h> Public Member Functions morapi_Bool morapi_DnnLayer_isMutable (const morapi_DnnLayer *self) morapi_Bool morapi_DnnLayer_isImmutable (const morapi_DnnLayer *self) morapi_Bool morapi_DnnLayer_isConstant (const morapi_DnnLayer *self) Routine morapi_Result morapi_DnnLayer_setRoutineDesc ( morapi_DnnLayer *self, const morapi_Char *i_routine_desc) const morapi_Char * morapi_DnnLayer_getRoutineDescText (const morapi_DnnLayer *self) const morapi_Char * morapi_DnnLayer_getCompiledRoutineDescText (const morapi_DnnLayer *self) morapi_Params * morapi_DnnLayer_getRoutineParams ( morapi_DnnLayer *self) const morapi_Params * morapi_DnnLayer_getCompiledRoutineParams (const morapi_DnnLayer *self) morapi_Params * morapi_DnnLayer_getChildRoutineParams ( morapi_DnnLayer *self) morapi_Result morapi_DnnLayer_setRoutineLimit ( morapi_DnnLayer *self, morapi_DnnRoutineLimit i_limit) Layer settings and data morapi_DnnNet * morapi_DnnLayer_getOwner (const morapi_DnnLayer *self) const morapi_Char * morapi_DnnLayer_getName (const morapi_DnnLayer *self) const morapi_Char * morapi_DnnLayer_getType (const morapi_DnnLayer *self) morapi_Params * morapi_DnnLayer_getParams ( morapi_DnnLayer *self) const morapi_Params * morapi_DnnLayer_getParsedParams (const morapi_DnnLayer *self) morapi_Params * morapi_DnnLayer_getAttrs ( morapi_DnnLayer *self) morapi_Int32 morapi_DnnLayer_getIndex (const morapi_DnnLayer *self) void * morapi_DnnLayer_getObj (const morapi_DnnLayer *self) morapi_Result morapi_DnnLayer_connect ( morapi_DnnLayer *self, morapi_Int32 i_output_index, morapi_DnnLayer *i_next_layer, morapi_Int32 i_input_index) morapi_Result morapi_DnnLayer_disconnect ( morapi_DnnLayer *self, morapi_Int32 i_output_index, morapi_DnnLayer *i_next_layer, morapi_Int32 i_input_index) morapi_Result morapi_DnnLayer_disconnectAll ( morapi_DnnLayer *self) morapi_Result morapi_DnnLayer_setInplace ( morapi_DnnLayer *self, morapi_Int32 i_input_index, morapi_Int32 i_output_index, morapi_Bool i_is_forced) morapi_Result morapi_DnnLayer_setOps ( morapi_DnnLayer *self, morapi_Int64 i_ops) morapi_DnnNet * morapi_DnnLayer_getChildNet (const morapi_DnnLayer *self) morapi_DnnLayerState morapi_DnnLayer_getState (const morapi_DnnLayer *self) morapi_Bool morapi_DnnLayer_isFailed (const morapi_DnnLayer *self) morapi_Tensor * morapi_DnnLayer_addWork ( morapi_DnnLayer *self, const morapi_Char *i_name, morapi_DType i_dtype, morapi_Int32 i_rank, const morapi_Int32 *i_shape, morapi_Bool i_is_static) Weight morapi_Tensor * morapi_DnnLayer_addWeight ( morapi_DnnLayer *self, const morapi_Char *i_weight_name) morapi_Tensor * morapi_DnnLayer_addEmbeddedWeight ( morapi_DnnLayer *self, const morapi_Char *i_weight_name) morapi_Result morapi_DnnLayer_setWeight ( morapi_DnnLayer *self, const morapi_Char *i_weight_name, morapi_Tensor *io_tensor) morapi_Result morapi_DnnLayer_eraseWeight ( morapi_DnnLayer *self, const morapi_Char *i_weight_name) morapi_Result morapi_DnnLayer_clearWeight ( morapi_DnnLayer *self) morapi_Int32 morapi_DnnLayer_getWeightNum (const morapi_DnnLayer *self) const morapi_Char * morapi_DnnLayer_getWeightName (const morapi_DnnLayer *self, morapi_Int32 i_index) morapi_Tensor * morapi_DnnLayer_getWeight (const morapi_DnnLayer *self, morapi_Int32 i_index) morapi_Tensor * morapi_DnnLayer_findWeight (const morapi_DnnLayer *self, const morapi_Char *i_weight_name) morapi_Result morapi_DnnLayer_installWeightOptimizer ( morapi_DnnLayer *self, morapi_DnnLayerCB_OptimizeWeight i_weight_optimizer) morapi_Tensors * morapi_DnnLayer_optimizeWeight ( morapi_DnnLayer *self, const morapi_Char *i_weight_name, const morapi_Char *i_optimized_format) morapi_Tensor * morapi_DnnLayer_optimizeWeight0 ( morapi_DnnLayer *self, const morapi_Char *i_weight_name, const morapi_Char *i_optimized_format) Layer Input morapi_Int32 morapi_DnnLayer_getInputNum (const morapi_DnnLayer *self) morapi_Tensor * morapi_DnnLayer_getInput (const morapi_DnnLayer *self, morapi_Int32 i_index) morapi_Tensor * morapi_DnnLayer_getInputBlob (const morapi_DnnLayer *self, morapi_Int32 i_index) morapi_DnnLayer * morapi_DnnLayer_getPrevLayer (const morapi_DnnLayer *self, morapi_Int32 i_index) morapi_Int32 morapi_DnnLayer_getPrevLayerOutputIndex (const morapi_DnnLayer *self, morapi_Int32 i_index) morapi_Result morapi_DnnLayer_setInputDType ( morapi_DnnLayer *self, morapi_Int32 i_index, morapi_DType i_dtype) morapi_Result morapi_DnnLayer_setInputForLayerParam ( morapi_DnnLayer *self, morapi_Int32 i_index, morapi_Bool i_is_for_layer_param) Layer Output morapi_Result morapi_DnnLayer_enableOutput ( morapi_DnnLayer *self, morapi_Int32 i_index, morapi_DType i_dtype, morapi_Int32 i_rank, const morapi_Int32 *i_shape) morapi_Int32 morapi_DnnLayer_getOutputNum (const morapi_DnnLayer *self) morapi_Tensor * morapi_DnnLayer_getOutput (const morapi_DnnLayer *self, morapi_Int32 i_index) morapi_Tensor * morapi_DnnLayer_getOutputBlob (const morapi_DnnLayer *self, morapi_Int32 i_index) morapi_DType morapi_DnnLayer_getOutputDType (const morapi_DnnLayer *self, morapi_Int32 i_index) morapi_Tensor * morapi_DnnLayer_getOutputDump (const morapi_DnnLayer *self, morapi_Int32 i_index) morapi_Int32 morapi_DnnLayer_getNextLayerNumAt (const morapi_DnnLayer *self, morapi_Int32 i_output_index) morapi_DnnLayer * morapi_DnnLayer_getNextLayer (const morapi_DnnLayer *self, morapi_Int32 i_output_index, morapi_Int32 i_next_index) morapi_Int32 morapi_DnnLayer_getNextLayerInputIndex (const morapi_DnnLayer *self, morapi_Int32 i_output_index, morapi_Int32 i_next_index) Related Functions morapi_Int32 morapi_Dnn_static_getLayerTypeNum ( morapi_Env *env) const morapi_Char ** morapi_Dnn_static_getLayerTypes ( morapi_Env *env) const morapi_Char * morapi_Dnn_static_getDefaultLayerParams ( morapi_Env *env, const morapi_Char *i_layer_type) Detailed Description Dnn layer. test_decompose_api.c , and test_dnn_api.c . Member Function Documentation morapi_DnnLayer_setRoutineDesc() morapi_Result morapi_DnnLayer_setRoutineDesc ( morapi_DnnLayer * self, const morapi_Char * i_routine_desc) Sets the routine descriptor. It clears the routine parameters Parameters self : layer object i_routine_desc : routine to be set test_dnn_api.c . morapi_DnnLayer_getRoutineDescText() const morapi_Char * morapi_DnnLayer_getRoutineDescText (const morapi_DnnLayer * self) Gets the routine descriptor text. Parameters self : layer object morapi_DnnLayer_getCompiledRoutineDescText() const morapi_Char * morapi_DnnLayer_getCompiledRoutineDescText (const morapi_DnnLayer * self) Gets the compiled routine descriptor text. Parameters self : layer object morapi_DnnLayer_getRoutineParams() morapi_Params * morapi_DnnLayer_getRoutineParams ( morapi_DnnLayer * self) Gets the routine parameters. Parameters self : layer object morapi_DnnLayer_getCompiledRoutineParams() const morapi_Params * morapi_DnnLayer_getCompiledRoutineParams (const morapi_DnnLayer * self) Gets the compiled routine parameters. Parameters self : layer object morapi_DnnLayer_getChildRoutineParams() morapi_Params * morapi_DnnLayer_getChildRoutineParams ( morapi_DnnLayer * self) Gets the child routine parameters. Parameters self : layer object morapi_DnnLayer_setRoutineLimit() morapi_Result morapi_DnnLayer_setRoutineLimit ( morapi_DnnLayer * self, morapi_DnnRoutineLimit i_limit) Sets the limitation for routine selection. Parameters self : layer object. i_limit : OR'ed combination of morapi_DnnRoutineLimit morapi_DnnLayer_getOwner() morapi_DnnNet * morapi_DnnLayer_getOwner (const morapi_DnnLayer * self) Gets the owner net. Parameters self : layer object morapi_DnnLayer_getName() const morapi_Char * morapi_DnnLayer_getName (const morapi_DnnLayer * self) Gets the name of the layer. Parameters self : layer object test_decompose_api.c . morapi_DnnLayer_getType() const morapi_Char * morapi_DnnLayer_getType (const morapi_DnnLayer * self) Gets the layer type. Parameters self : layer object morapi_DnnLayer_getParams() morapi_Params * morapi_DnnLayer_getParams ( morapi_DnnLayer * self) Gets the parameters. Parameters self : layer object morapi_DnnLayer_getParsedParams() const morapi_Params * morapi_DnnLayer_getParsedParams (const morapi_DnnLayer * self) Gets the parsed parameters. Parameters self : layer object morapi_DnnLayer_getAttrs() morapi_Params * morapi_DnnLayer_getAttrs ( morapi_DnnLayer * self) Gets the attributes. Parameters self : layer object morapi_DnnLayer_getIndex() morapi_Int32 morapi_DnnLayer_getIndex (const morapi_DnnLayer * self) Gets the index. Parameters self : layer object morapi_DnnLayer_getObj() void * morapi_DnnLayer_getObj (const morapi_DnnLayer * self) Gets the layer object. Parameters self : layer object morapi_DnnLayer_connect() morapi_Result morapi_DnnLayer_connect ( morapi_DnnLayer * self, morapi_Int32 i_output_index, morapi_DnnLayer * i_next_layer, morapi_Int32 i_input_index) Connects the i_output_index-th output to i_next_layer. If i_next_layer == NULL, just create the i_output_index-th layer output. Parameters self : layer object i_output_index : index of the output to be connected i_next_layer : index of the layer to be connected i_input_index : index of the input in the layer to be connected morapi_DnnLayer_disconnect() morapi_Result morapi_DnnLayer_disconnect ( morapi_DnnLayer * self, morapi_Int32 i_output_index, morapi_DnnLayer * i_next_layer, morapi_Int32 i_input_index) Disconnects the i_output_index-th output to i_input_index-th input of i_next_layer. Parameters self : layer object i_output_index : index of the output to be disconnected i_next_layer : index of the layer to be disconnected i_input_index : index of the input in the layer to be disconnected morapi_DnnLayer_disconnectAll() morapi_Result morapi_DnnLayer_disconnectAll ( morapi_DnnLayer * self) Disconnects all. Parameters self : layer object morapi_DnnLayer_setInplace() morapi_Result morapi_DnnLayer_setInplace ( morapi_DnnLayer * self, morapi_Int32 i_input_index, morapi_Int32 i_output_index, morapi_Bool i_is_forced) Sets that the i_input_index-th input is used as in-place for the i_output_index-th output. Call this function in morapi_DnnLayerCB_init() or morapi_DnnRoutineCB_init(). Parameters self : layer object i_input_index : input to be set in-place i_output_index : output to contain the in-place input i_is_forced : whether to force or not in-place morapi_DnnLayer_setOps() morapi_Result morapi_DnnLayer_setOps ( morapi_DnnLayer * self, morapi_Int64 i_ops) Sets the number of operations. Call this function in morapi_DnnLayerCB_init(). Parameters self : layer object i_ops : operation number morapi_DnnLayer_getChildNet() morapi_DnnNet * morapi_DnnLayer_getChildNet (const morapi_DnnLayer * self) Gets the child net. morapi_DnnLayer_getState() morapi_DnnLayerState morapi_DnnLayer_getState (const morapi_DnnLayer * self) Gets the state. morapi_DnnLayer_isFailed() morapi_Bool morapi_DnnLayer_isFailed (const morapi_DnnLayer * self) Returns whether failed or not. morapi_DnnLayer_addWork() morapi_Tensor * morapi_DnnLayer_addWork ( morapi_DnnLayer * self, const morapi_Char * i_name, morapi_DType i_dtype, morapi_Int32 i_rank, const morapi_Int32 * i_shape, morapi_Bool i_is_static) Adds a working tensor. Call this function by morapi_DnnLayer _init() or morapi_DnnRoutine _init(). Only a leaf layer can add. Parameters self : layer object i_name : tensor name i_dtype : tensor data type i_rank : tensor rank i_shape : tensor shape i_is_static : whether it's static or not morapi_DnnLayer_isMutable() morapi_Bool morapi_DnnLayer_isMutable (const morapi_DnnLayer * self) Returns whether mutable or not. If mutable, an output blob changes during inference. morapi_DnnLayer_isImmutable() morapi_Bool morapi_DnnLayer_isImmutable (const morapi_DnnLayer * self) Returns whether immutable or not. If immutable, no output blobs change after parsing. morapi_DnnLayer_isConstant() morapi_Bool morapi_DnnLayer_isConstant (const morapi_DnnLayer * self) Returns whether constant or not. If constant, no output blos change at any time. The constant is always immutable, but opposite is not true. morapi_DnnLayer_addWeight() morapi_Tensor * morapi_DnnLayer_addWeight ( morapi_DnnLayer * self, const morapi_Char * i_weight_name) Adds a weight. Parameters self : layer object i_weight_name : weight name morapi_DnnLayer_addEmbeddedWeight() morapi_Tensor * morapi_DnnLayer_addEmbeddedWeight ( morapi_DnnLayer * self, const morapi_Char * i_weight_name) Adds an embedded weight. Parameters self : layer object i_weight_name : weight name morapi_DnnLayer_setWeight() morapi_Result morapi_DnnLayer_setWeight ( morapi_DnnLayer * self, const morapi_Char * i_weight_name, morapi_Tensor * io_tensor) Sets a weight. Parameters self : layer object i_weight_name : weight name io_tensor : tensor containing weight data morapi_DnnLayer_eraseWeight() morapi_Result morapi_DnnLayer_eraseWeight ( morapi_DnnLayer * self, const morapi_Char * i_weight_name) Erases the weight i_weight_name. Parameters self : layer object i_weight_name : name of the weight to be erased morapi_DnnLayer_clearWeight() morapi_Result morapi_DnnLayer_clearWeight ( morapi_DnnLayer * self) Clears all weights. Parameters self : layer object morapi_DnnLayer_getWeightNum() morapi_Int32 morapi_DnnLayer_getWeightNum (const morapi_DnnLayer * self) Gets the number of weights. Parameters self : layer object morapi_DnnLayer_getWeightName() const morapi_Char * morapi_DnnLayer_getWeightName (const morapi_DnnLayer * self, morapi_Int32 i_index) Gets the i_index-th weight name. Parameters self : layer object i_index : weight index morapi_DnnLayer_getWeight() morapi_Tensor * morapi_DnnLayer_getWeight (const morapi_DnnLayer * self, morapi_Int32 i_index) Gets the i_index-th weight tensor. Parameters self : layer object i_index : weight index morapi_DnnLayer_findWeight() morapi_Tensor * morapi_DnnLayer_findWeight (const morapi_DnnLayer * self, const morapi_Char * i_weight_name) Finds the weight tensor. Parameters self : layer object i_weight_name : weight name morapi_DnnLayer_installWeightOptimizer() morapi_Result morapi_DnnLayer_installWeightOptimizer ( morapi_DnnLayer * self, morapi_DnnLayerCB_OptimizeWeight i_weight_optimizer) Installs a weight optimizer. morapi_DnnLayer_optimizeWeight() morapi_Tensors * morapi_DnnLayer_optimizeWeight ( morapi_DnnLayer * self, const morapi_Char * i_weight_name, const morapi_Char * i_optimized_format) Optimizes the weight and return the tensors. Called by morapi_DnnRoutineCB_compile(). Parameters self : layer object i_weight_name : weight_name i_optimized_format : optimization format morapi_DnnLayer_optimizeWeight0() morapi_Tensor * morapi_DnnLayer_optimizeWeight0 ( morapi_DnnLayer * self, const morapi_Char * i_weight_name, const morapi_Char * i_optimized_format) Optimizes the weight and return the first of tensors. Called by morapi_DnnRoutineCB_init(). Equivalent to: morapi_Tensor * morapi_DnnLayer_optimizeWeight0 ( morapi_DnnLayer * self , const morapi_Char *i_weight_name, const morapi_Char *i_optimized_format) { morapi_Tensors *optimized = morapi_DnnLayer_optimizeWeight ( self , i_weight_name, i_optimized_format); return morapi_Tensors_get(optimized, 0); } fragment Parameters self : layer object i_weight_name : weight name i_optimized_format : optimization format morapi_DnnLayer_getInputNum() morapi_Int32 morapi_DnnLayer_getInputNum (const morapi_DnnLayer * self) Gets the number of inputs. Parameters self : layer object morapi_DnnLayer_getInput() morapi_Tensor * morapi_DnnLayer_getInput (const morapi_DnnLayer * self, morapi_Int32 i_index) Gets the i_index-th input tensor. Parameters self : layer object i_index : input tensor index morapi_DnnLayer_getInputBlob() morapi_Tensor * morapi_DnnLayer_getInputBlob (const morapi_DnnLayer * self, morapi_Int32 i_index) Gets the i_index-th input blob. Called by morapi_DnnRoutineCB_compile() or after compiled. Parameters self : layer object i_index : input tensor index morapi_DnnLayer_getPrevLayer() morapi_DnnLayer * morapi_DnnLayer_getPrevLayer (const morapi_DnnLayer * self, morapi_Int32 i_index) Gets the previous layer connected to i_index-th input. Parameters self : layer object i_index : input index morapi_DnnLayer_getPrevLayerOutputIndex() morapi_Int32 morapi_DnnLayer_getPrevLayerOutputIndex (const morapi_DnnLayer * self, morapi_Int32 i_index) Gets the output index at the sending layer connected to i_index-th input. Parameters self : layer object i_index : output index morapi_DnnLayer_setInputDType() morapi_Result morapi_DnnLayer_setInputDType ( morapi_DnnLayer * self, morapi_Int32 i_index, morapi_DType i_dtype) Sets a data type at the i_index-th input. Parameters self : layer object i_index : input index i_dtype : data type to be set morapi_DnnLayer_setInputForLayerParam() morapi_Result morapi_DnnLayer_setInputForLayerParam ( morapi_DnnLayer * self, morapi_Int32 i_index, morapi_Bool i_is_for_layer_param) Sets whether input is for layer parameter or not. Parameters self : layer object i_index : input index i_is_for_layer_param : whether input is for layer parameter or not. morapi_DnnLayer_enableOutput() morapi_Result morapi_DnnLayer_enableOutput ( morapi_DnnLayer * self, morapi_Int32 i_index, morapi_DType i_dtype, morapi_Int32 i_rank, const morapi_Int32 * i_shape) Enables the i_index-th output tensor. Parameters self : layer object i_index : output index i_dtype : output data type i_rank : output rank i_shape : output shape morapi_DnnLayer_getOutputNum() morapi_Int32 morapi_DnnLayer_getOutputNum (const morapi_DnnLayer * self) Gets the number of the outputs. Parameters self : layer object morapi_DnnLayer_getOutput() morapi_Tensor * morapi_DnnLayer_getOutput (const morapi_DnnLayer * self, morapi_Int32 i_index) Gets the i_index-th output tensor. Parameters self : layer object i_index : output index morapi_DnnLayer_getOutputBlob() morapi_Tensor * morapi_DnnLayer_getOutputBlob (const morapi_DnnLayer * self, morapi_Int32 i_index) Gets the i_index-th output blob. Precondition Call in morapi_DnnRoutineCB_compile() or after morapi_Dnn_compile() . Parameters self : layer object i_index : output index morapi_DnnLayer_getOutputDType() morapi_DType morapi_DnnLayer_getOutputDType (const morapi_DnnLayer * self, morapi_Int32 i_index) Gets the i_index-th output data type. morapi_DnnLayer_getOutputDump() morapi_Tensor * morapi_DnnLayer_getOutputDump (const morapi_DnnLayer * self, morapi_Int32 i_index) Gets the i_index-th output dump data. Precondition Call after morapi_Dnn_compile() . Parameters self : layer object i_index : output index morapi_DnnLayer_getNextLayerNumAt() morapi_Int32 morapi_DnnLayer_getNextLayerNumAt (const morapi_DnnLayer * self, morapi_Int32 i_output_index) Gets the number of next layers connected from the i_output_index-th output. Parameters self : layer object i_output_index : output index morapi_DnnLayer_getNextLayer() morapi_DnnLayer * morapi_DnnLayer_getNextLayer (const morapi_DnnLayer * self, morapi_Int32 i_output_index, morapi_Int32 i_next_index) Gets the i_next_index-th next layer connected from the i_output_index-th output. Parameters self : layer object i_output_index : output index i_next_index : next layer index morapi_DnnLayer_getNextLayerInputIndex() morapi_Int32 morapi_DnnLayer_getNextLayerInputIndex (const morapi_DnnLayer * self, morapi_Int32 i_output_index, morapi_Int32 i_next_index) Gets the input index at the i_next_index-th next layer connected from the i_output_index-th output. Parameters self : layer object i_output_index : output index i_next_index : next layer input index Friends And Related Function Documentation morapi_Dnn_static_getLayerTypeNum() morapi_Int32 morapi_Dnn_static_getLayerTypeNum ( morapi_Env * env) Gets the number of installed layer types. Parameters env : environment where the layers are installed morapi_Dnn_static_getLayerTypes() const morapi_Char ** morapi_Dnn_static_getLayerTypes ( morapi_Env * env) Gets the installed layer types. Parameters env : environment where the layers are installed morapi_Dnn_static_getDefaultLayerParams() const morapi_Char * morapi_Dnn_static_getDefaultLayerParams ( morapi_Env * env, const morapi_Char * i_layer_type) Gets default layer parameters. Parameters env : environment where the layers are installed i_layer_type : layer tpye","title":"morapi_DnnLayer"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer-struct-reference","text":"dnn Dnn layer. More... #include <morapi_softneuro.h>","title":"morapi_DnnLayer Struct Reference"},{"location":"structmorapi__DnnLayer.html#public-member-functions","text":"morapi_Bool morapi_DnnLayer_isMutable (const morapi_DnnLayer *self) morapi_Bool morapi_DnnLayer_isImmutable (const morapi_DnnLayer *self) morapi_Bool morapi_DnnLayer_isConstant (const morapi_DnnLayer *self)","title":"Public Member Functions"},{"location":"structmorapi__DnnLayer.html#routine","text":"morapi_Result morapi_DnnLayer_setRoutineDesc ( morapi_DnnLayer *self, const morapi_Char *i_routine_desc) const morapi_Char * morapi_DnnLayer_getRoutineDescText (const morapi_DnnLayer *self) const morapi_Char * morapi_DnnLayer_getCompiledRoutineDescText (const morapi_DnnLayer *self) morapi_Params * morapi_DnnLayer_getRoutineParams ( morapi_DnnLayer *self) const morapi_Params * morapi_DnnLayer_getCompiledRoutineParams (const morapi_DnnLayer *self) morapi_Params * morapi_DnnLayer_getChildRoutineParams ( morapi_DnnLayer *self) morapi_Result morapi_DnnLayer_setRoutineLimit ( morapi_DnnLayer *self, morapi_DnnRoutineLimit i_limit)","title":"Routine"},{"location":"structmorapi__DnnLayer.html#layer-settings-and-data","text":"morapi_DnnNet * morapi_DnnLayer_getOwner (const morapi_DnnLayer *self) const morapi_Char * morapi_DnnLayer_getName (const morapi_DnnLayer *self) const morapi_Char * morapi_DnnLayer_getType (const morapi_DnnLayer *self) morapi_Params * morapi_DnnLayer_getParams ( morapi_DnnLayer *self) const morapi_Params * morapi_DnnLayer_getParsedParams (const morapi_DnnLayer *self) morapi_Params * morapi_DnnLayer_getAttrs ( morapi_DnnLayer *self) morapi_Int32 morapi_DnnLayer_getIndex (const morapi_DnnLayer *self) void * morapi_DnnLayer_getObj (const morapi_DnnLayer *self) morapi_Result morapi_DnnLayer_connect ( morapi_DnnLayer *self, morapi_Int32 i_output_index, morapi_DnnLayer *i_next_layer, morapi_Int32 i_input_index) morapi_Result morapi_DnnLayer_disconnect ( morapi_DnnLayer *self, morapi_Int32 i_output_index, morapi_DnnLayer *i_next_layer, morapi_Int32 i_input_index) morapi_Result morapi_DnnLayer_disconnectAll ( morapi_DnnLayer *self) morapi_Result morapi_DnnLayer_setInplace ( morapi_DnnLayer *self, morapi_Int32 i_input_index, morapi_Int32 i_output_index, morapi_Bool i_is_forced) morapi_Result morapi_DnnLayer_setOps ( morapi_DnnLayer *self, morapi_Int64 i_ops) morapi_DnnNet * morapi_DnnLayer_getChildNet (const morapi_DnnLayer *self) morapi_DnnLayerState morapi_DnnLayer_getState (const morapi_DnnLayer *self) morapi_Bool morapi_DnnLayer_isFailed (const morapi_DnnLayer *self) morapi_Tensor * morapi_DnnLayer_addWork ( morapi_DnnLayer *self, const morapi_Char *i_name, morapi_DType i_dtype, morapi_Int32 i_rank, const morapi_Int32 *i_shape, morapi_Bool i_is_static)","title":"Layer settings and data"},{"location":"structmorapi__DnnLayer.html#weight","text":"morapi_Tensor * morapi_DnnLayer_addWeight ( morapi_DnnLayer *self, const morapi_Char *i_weight_name) morapi_Tensor * morapi_DnnLayer_addEmbeddedWeight ( morapi_DnnLayer *self, const morapi_Char *i_weight_name) morapi_Result morapi_DnnLayer_setWeight ( morapi_DnnLayer *self, const morapi_Char *i_weight_name, morapi_Tensor *io_tensor) morapi_Result morapi_DnnLayer_eraseWeight ( morapi_DnnLayer *self, const morapi_Char *i_weight_name) morapi_Result morapi_DnnLayer_clearWeight ( morapi_DnnLayer *self) morapi_Int32 morapi_DnnLayer_getWeightNum (const morapi_DnnLayer *self) const morapi_Char * morapi_DnnLayer_getWeightName (const morapi_DnnLayer *self, morapi_Int32 i_index) morapi_Tensor * morapi_DnnLayer_getWeight (const morapi_DnnLayer *self, morapi_Int32 i_index) morapi_Tensor * morapi_DnnLayer_findWeight (const morapi_DnnLayer *self, const morapi_Char *i_weight_name) morapi_Result morapi_DnnLayer_installWeightOptimizer ( morapi_DnnLayer *self, morapi_DnnLayerCB_OptimizeWeight i_weight_optimizer) morapi_Tensors * morapi_DnnLayer_optimizeWeight ( morapi_DnnLayer *self, const morapi_Char *i_weight_name, const morapi_Char *i_optimized_format) morapi_Tensor * morapi_DnnLayer_optimizeWeight0 ( morapi_DnnLayer *self, const morapi_Char *i_weight_name, const morapi_Char *i_optimized_format)","title":"Weight"},{"location":"structmorapi__DnnLayer.html#layer-input","text":"morapi_Int32 morapi_DnnLayer_getInputNum (const morapi_DnnLayer *self) morapi_Tensor * morapi_DnnLayer_getInput (const morapi_DnnLayer *self, morapi_Int32 i_index) morapi_Tensor * morapi_DnnLayer_getInputBlob (const morapi_DnnLayer *self, morapi_Int32 i_index) morapi_DnnLayer * morapi_DnnLayer_getPrevLayer (const morapi_DnnLayer *self, morapi_Int32 i_index) morapi_Int32 morapi_DnnLayer_getPrevLayerOutputIndex (const morapi_DnnLayer *self, morapi_Int32 i_index) morapi_Result morapi_DnnLayer_setInputDType ( morapi_DnnLayer *self, morapi_Int32 i_index, morapi_DType i_dtype) morapi_Result morapi_DnnLayer_setInputForLayerParam ( morapi_DnnLayer *self, morapi_Int32 i_index, morapi_Bool i_is_for_layer_param)","title":"Layer Input"},{"location":"structmorapi__DnnLayer.html#layer-output","text":"morapi_Result morapi_DnnLayer_enableOutput ( morapi_DnnLayer *self, morapi_Int32 i_index, morapi_DType i_dtype, morapi_Int32 i_rank, const morapi_Int32 *i_shape) morapi_Int32 morapi_DnnLayer_getOutputNum (const morapi_DnnLayer *self) morapi_Tensor * morapi_DnnLayer_getOutput (const morapi_DnnLayer *self, morapi_Int32 i_index) morapi_Tensor * morapi_DnnLayer_getOutputBlob (const morapi_DnnLayer *self, morapi_Int32 i_index) morapi_DType morapi_DnnLayer_getOutputDType (const morapi_DnnLayer *self, morapi_Int32 i_index) morapi_Tensor * morapi_DnnLayer_getOutputDump (const morapi_DnnLayer *self, morapi_Int32 i_index) morapi_Int32 morapi_DnnLayer_getNextLayerNumAt (const morapi_DnnLayer *self, morapi_Int32 i_output_index) morapi_DnnLayer * morapi_DnnLayer_getNextLayer (const morapi_DnnLayer *self, morapi_Int32 i_output_index, morapi_Int32 i_next_index) morapi_Int32 morapi_DnnLayer_getNextLayerInputIndex (const morapi_DnnLayer *self, morapi_Int32 i_output_index, morapi_Int32 i_next_index)","title":"Layer Output"},{"location":"structmorapi__DnnLayer.html#related-functions","text":"morapi_Int32 morapi_Dnn_static_getLayerTypeNum ( morapi_Env *env) const morapi_Char ** morapi_Dnn_static_getLayerTypes ( morapi_Env *env) const morapi_Char * morapi_Dnn_static_getDefaultLayerParams ( morapi_Env *env, const morapi_Char *i_layer_type)","title":"Related Functions"},{"location":"structmorapi__DnnLayer.html#detailed-description","text":"Dnn layer. test_decompose_api.c , and test_dnn_api.c .","title":"Detailed Description"},{"location":"structmorapi__DnnLayer.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_setroutinedesc","text":"morapi_Result morapi_DnnLayer_setRoutineDesc ( morapi_DnnLayer * self, const morapi_Char * i_routine_desc) Sets the routine descriptor. It clears the routine parameters Parameters self : layer object i_routine_desc : routine to be set test_dnn_api.c .","title":"morapi_DnnLayer_setRoutineDesc()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_getroutinedesctext","text":"const morapi_Char * morapi_DnnLayer_getRoutineDescText (const morapi_DnnLayer * self) Gets the routine descriptor text. Parameters self : layer object","title":"morapi_DnnLayer_getRoutineDescText()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_getcompiledroutinedesctext","text":"const morapi_Char * morapi_DnnLayer_getCompiledRoutineDescText (const morapi_DnnLayer * self) Gets the compiled routine descriptor text. Parameters self : layer object","title":"morapi_DnnLayer_getCompiledRoutineDescText()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_getroutineparams","text":"morapi_Params * morapi_DnnLayer_getRoutineParams ( morapi_DnnLayer * self) Gets the routine parameters. Parameters self : layer object","title":"morapi_DnnLayer_getRoutineParams()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_getcompiledroutineparams","text":"const morapi_Params * morapi_DnnLayer_getCompiledRoutineParams (const morapi_DnnLayer * self) Gets the compiled routine parameters. Parameters self : layer object","title":"morapi_DnnLayer_getCompiledRoutineParams()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_getchildroutineparams","text":"morapi_Params * morapi_DnnLayer_getChildRoutineParams ( morapi_DnnLayer * self) Gets the child routine parameters. Parameters self : layer object","title":"morapi_DnnLayer_getChildRoutineParams()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_setroutinelimit","text":"morapi_Result morapi_DnnLayer_setRoutineLimit ( morapi_DnnLayer * self, morapi_DnnRoutineLimit i_limit) Sets the limitation for routine selection. Parameters self : layer object. i_limit : OR'ed combination of morapi_DnnRoutineLimit","title":"morapi_DnnLayer_setRoutineLimit()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_getowner","text":"morapi_DnnNet * morapi_DnnLayer_getOwner (const morapi_DnnLayer * self) Gets the owner net. Parameters self : layer object","title":"morapi_DnnLayer_getOwner()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_getname","text":"const morapi_Char * morapi_DnnLayer_getName (const morapi_DnnLayer * self) Gets the name of the layer. Parameters self : layer object test_decompose_api.c .","title":"morapi_DnnLayer_getName()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_gettype","text":"const morapi_Char * morapi_DnnLayer_getType (const morapi_DnnLayer * self) Gets the layer type. Parameters self : layer object","title":"morapi_DnnLayer_getType()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_getparams","text":"morapi_Params * morapi_DnnLayer_getParams ( morapi_DnnLayer * self) Gets the parameters. Parameters self : layer object","title":"morapi_DnnLayer_getParams()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_getparsedparams","text":"const morapi_Params * morapi_DnnLayer_getParsedParams (const morapi_DnnLayer * self) Gets the parsed parameters. Parameters self : layer object","title":"morapi_DnnLayer_getParsedParams()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_getattrs","text":"morapi_Params * morapi_DnnLayer_getAttrs ( morapi_DnnLayer * self) Gets the attributes. Parameters self : layer object","title":"morapi_DnnLayer_getAttrs()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_getindex","text":"morapi_Int32 morapi_DnnLayer_getIndex (const morapi_DnnLayer * self) Gets the index. Parameters self : layer object","title":"morapi_DnnLayer_getIndex()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_getobj","text":"void * morapi_DnnLayer_getObj (const morapi_DnnLayer * self) Gets the layer object. Parameters self : layer object","title":"morapi_DnnLayer_getObj()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_connect","text":"morapi_Result morapi_DnnLayer_connect ( morapi_DnnLayer * self, morapi_Int32 i_output_index, morapi_DnnLayer * i_next_layer, morapi_Int32 i_input_index) Connects the i_output_index-th output to i_next_layer. If i_next_layer == NULL, just create the i_output_index-th layer output. Parameters self : layer object i_output_index : index of the output to be connected i_next_layer : index of the layer to be connected i_input_index : index of the input in the layer to be connected","title":"morapi_DnnLayer_connect()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_disconnect","text":"morapi_Result morapi_DnnLayer_disconnect ( morapi_DnnLayer * self, morapi_Int32 i_output_index, morapi_DnnLayer * i_next_layer, morapi_Int32 i_input_index) Disconnects the i_output_index-th output to i_input_index-th input of i_next_layer. Parameters self : layer object i_output_index : index of the output to be disconnected i_next_layer : index of the layer to be disconnected i_input_index : index of the input in the layer to be disconnected","title":"morapi_DnnLayer_disconnect()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_disconnectall","text":"morapi_Result morapi_DnnLayer_disconnectAll ( morapi_DnnLayer * self) Disconnects all. Parameters self : layer object","title":"morapi_DnnLayer_disconnectAll()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_setinplace","text":"morapi_Result morapi_DnnLayer_setInplace ( morapi_DnnLayer * self, morapi_Int32 i_input_index, morapi_Int32 i_output_index, morapi_Bool i_is_forced) Sets that the i_input_index-th input is used as in-place for the i_output_index-th output. Call this function in morapi_DnnLayerCB_init() or morapi_DnnRoutineCB_init(). Parameters self : layer object i_input_index : input to be set in-place i_output_index : output to contain the in-place input i_is_forced : whether to force or not in-place","title":"morapi_DnnLayer_setInplace()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_setops","text":"morapi_Result morapi_DnnLayer_setOps ( morapi_DnnLayer * self, morapi_Int64 i_ops) Sets the number of operations. Call this function in morapi_DnnLayerCB_init(). Parameters self : layer object i_ops : operation number","title":"morapi_DnnLayer_setOps()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_getchildnet","text":"morapi_DnnNet * morapi_DnnLayer_getChildNet (const morapi_DnnLayer * self) Gets the child net.","title":"morapi_DnnLayer_getChildNet()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_getstate","text":"morapi_DnnLayerState morapi_DnnLayer_getState (const morapi_DnnLayer * self) Gets the state.","title":"morapi_DnnLayer_getState()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_isfailed","text":"morapi_Bool morapi_DnnLayer_isFailed (const morapi_DnnLayer * self) Returns whether failed or not.","title":"morapi_DnnLayer_isFailed()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_addwork","text":"morapi_Tensor * morapi_DnnLayer_addWork ( morapi_DnnLayer * self, const morapi_Char * i_name, morapi_DType i_dtype, morapi_Int32 i_rank, const morapi_Int32 * i_shape, morapi_Bool i_is_static) Adds a working tensor. Call this function by morapi_DnnLayer _init() or morapi_DnnRoutine _init(). Only a leaf layer can add. Parameters self : layer object i_name : tensor name i_dtype : tensor data type i_rank : tensor rank i_shape : tensor shape i_is_static : whether it's static or not","title":"morapi_DnnLayer_addWork()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_ismutable","text":"morapi_Bool morapi_DnnLayer_isMutable (const morapi_DnnLayer * self) Returns whether mutable or not. If mutable, an output blob changes during inference.","title":"morapi_DnnLayer_isMutable()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_isimmutable","text":"morapi_Bool morapi_DnnLayer_isImmutable (const morapi_DnnLayer * self) Returns whether immutable or not. If immutable, no output blobs change after parsing.","title":"morapi_DnnLayer_isImmutable()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_isconstant","text":"morapi_Bool morapi_DnnLayer_isConstant (const morapi_DnnLayer * self) Returns whether constant or not. If constant, no output blos change at any time. The constant is always immutable, but opposite is not true.","title":"morapi_DnnLayer_isConstant()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_addweight","text":"morapi_Tensor * morapi_DnnLayer_addWeight ( morapi_DnnLayer * self, const morapi_Char * i_weight_name) Adds a weight. Parameters self : layer object i_weight_name : weight name","title":"morapi_DnnLayer_addWeight()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_addembeddedweight","text":"morapi_Tensor * morapi_DnnLayer_addEmbeddedWeight ( morapi_DnnLayer * self, const morapi_Char * i_weight_name) Adds an embedded weight. Parameters self : layer object i_weight_name : weight name","title":"morapi_DnnLayer_addEmbeddedWeight()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_setweight","text":"morapi_Result morapi_DnnLayer_setWeight ( morapi_DnnLayer * self, const morapi_Char * i_weight_name, morapi_Tensor * io_tensor) Sets a weight. Parameters self : layer object i_weight_name : weight name io_tensor : tensor containing weight data","title":"morapi_DnnLayer_setWeight()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_eraseweight","text":"morapi_Result morapi_DnnLayer_eraseWeight ( morapi_DnnLayer * self, const morapi_Char * i_weight_name) Erases the weight i_weight_name. Parameters self : layer object i_weight_name : name of the weight to be erased","title":"morapi_DnnLayer_eraseWeight()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_clearweight","text":"morapi_Result morapi_DnnLayer_clearWeight ( morapi_DnnLayer * self) Clears all weights. Parameters self : layer object","title":"morapi_DnnLayer_clearWeight()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_getweightnum","text":"morapi_Int32 morapi_DnnLayer_getWeightNum (const morapi_DnnLayer * self) Gets the number of weights. Parameters self : layer object","title":"morapi_DnnLayer_getWeightNum()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_getweightname","text":"const morapi_Char * morapi_DnnLayer_getWeightName (const morapi_DnnLayer * self, morapi_Int32 i_index) Gets the i_index-th weight name. Parameters self : layer object i_index : weight index","title":"morapi_DnnLayer_getWeightName()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_getweight","text":"morapi_Tensor * morapi_DnnLayer_getWeight (const morapi_DnnLayer * self, morapi_Int32 i_index) Gets the i_index-th weight tensor. Parameters self : layer object i_index : weight index","title":"morapi_DnnLayer_getWeight()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_findweight","text":"morapi_Tensor * morapi_DnnLayer_findWeight (const morapi_DnnLayer * self, const morapi_Char * i_weight_name) Finds the weight tensor. Parameters self : layer object i_weight_name : weight name","title":"morapi_DnnLayer_findWeight()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_installweightoptimizer","text":"morapi_Result morapi_DnnLayer_installWeightOptimizer ( morapi_DnnLayer * self, morapi_DnnLayerCB_OptimizeWeight i_weight_optimizer) Installs a weight optimizer.","title":"morapi_DnnLayer_installWeightOptimizer()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_optimizeweight","text":"morapi_Tensors * morapi_DnnLayer_optimizeWeight ( morapi_DnnLayer * self, const morapi_Char * i_weight_name, const morapi_Char * i_optimized_format) Optimizes the weight and return the tensors. Called by morapi_DnnRoutineCB_compile(). Parameters self : layer object i_weight_name : weight_name i_optimized_format : optimization format","title":"morapi_DnnLayer_optimizeWeight()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_optimizeweight0","text":"morapi_Tensor * morapi_DnnLayer_optimizeWeight0 ( morapi_DnnLayer * self, const morapi_Char * i_weight_name, const morapi_Char * i_optimized_format) Optimizes the weight and return the first of tensors. Called by morapi_DnnRoutineCB_init(). Equivalent to: morapi_Tensor * morapi_DnnLayer_optimizeWeight0 ( morapi_DnnLayer * self , const morapi_Char *i_weight_name, const morapi_Char *i_optimized_format) { morapi_Tensors *optimized = morapi_DnnLayer_optimizeWeight ( self , i_weight_name, i_optimized_format); return morapi_Tensors_get(optimized, 0); } fragment Parameters self : layer object i_weight_name : weight name i_optimized_format : optimization format","title":"morapi_DnnLayer_optimizeWeight0()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_getinputnum","text":"morapi_Int32 morapi_DnnLayer_getInputNum (const morapi_DnnLayer * self) Gets the number of inputs. Parameters self : layer object","title":"morapi_DnnLayer_getInputNum()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_getinput","text":"morapi_Tensor * morapi_DnnLayer_getInput (const morapi_DnnLayer * self, morapi_Int32 i_index) Gets the i_index-th input tensor. Parameters self : layer object i_index : input tensor index","title":"morapi_DnnLayer_getInput()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_getinputblob","text":"morapi_Tensor * morapi_DnnLayer_getInputBlob (const morapi_DnnLayer * self, morapi_Int32 i_index) Gets the i_index-th input blob. Called by morapi_DnnRoutineCB_compile() or after compiled. Parameters self : layer object i_index : input tensor index","title":"morapi_DnnLayer_getInputBlob()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_getprevlayer","text":"morapi_DnnLayer * morapi_DnnLayer_getPrevLayer (const morapi_DnnLayer * self, morapi_Int32 i_index) Gets the previous layer connected to i_index-th input. Parameters self : layer object i_index : input index","title":"morapi_DnnLayer_getPrevLayer()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_getprevlayeroutputindex","text":"morapi_Int32 morapi_DnnLayer_getPrevLayerOutputIndex (const morapi_DnnLayer * self, morapi_Int32 i_index) Gets the output index at the sending layer connected to i_index-th input. Parameters self : layer object i_index : output index","title":"morapi_DnnLayer_getPrevLayerOutputIndex()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_setinputdtype","text":"morapi_Result morapi_DnnLayer_setInputDType ( morapi_DnnLayer * self, morapi_Int32 i_index, morapi_DType i_dtype) Sets a data type at the i_index-th input. Parameters self : layer object i_index : input index i_dtype : data type to be set","title":"morapi_DnnLayer_setInputDType()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_setinputforlayerparam","text":"morapi_Result morapi_DnnLayer_setInputForLayerParam ( morapi_DnnLayer * self, morapi_Int32 i_index, morapi_Bool i_is_for_layer_param) Sets whether input is for layer parameter or not. Parameters self : layer object i_index : input index i_is_for_layer_param : whether input is for layer parameter or not.","title":"morapi_DnnLayer_setInputForLayerParam()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_enableoutput","text":"morapi_Result morapi_DnnLayer_enableOutput ( morapi_DnnLayer * self, morapi_Int32 i_index, morapi_DType i_dtype, morapi_Int32 i_rank, const morapi_Int32 * i_shape) Enables the i_index-th output tensor. Parameters self : layer object i_index : output index i_dtype : output data type i_rank : output rank i_shape : output shape","title":"morapi_DnnLayer_enableOutput()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_getoutputnum","text":"morapi_Int32 morapi_DnnLayer_getOutputNum (const morapi_DnnLayer * self) Gets the number of the outputs. Parameters self : layer object","title":"morapi_DnnLayer_getOutputNum()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_getoutput","text":"morapi_Tensor * morapi_DnnLayer_getOutput (const morapi_DnnLayer * self, morapi_Int32 i_index) Gets the i_index-th output tensor. Parameters self : layer object i_index : output index","title":"morapi_DnnLayer_getOutput()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_getoutputblob","text":"morapi_Tensor * morapi_DnnLayer_getOutputBlob (const morapi_DnnLayer * self, morapi_Int32 i_index) Gets the i_index-th output blob. Precondition Call in morapi_DnnRoutineCB_compile() or after morapi_Dnn_compile() . Parameters self : layer object i_index : output index","title":"morapi_DnnLayer_getOutputBlob()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_getoutputdtype","text":"morapi_DType morapi_DnnLayer_getOutputDType (const morapi_DnnLayer * self, morapi_Int32 i_index) Gets the i_index-th output data type.","title":"morapi_DnnLayer_getOutputDType()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_getoutputdump","text":"morapi_Tensor * morapi_DnnLayer_getOutputDump (const morapi_DnnLayer * self, morapi_Int32 i_index) Gets the i_index-th output dump data. Precondition Call after morapi_Dnn_compile() . Parameters self : layer object i_index : output index","title":"morapi_DnnLayer_getOutputDump()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_getnextlayernumat","text":"morapi_Int32 morapi_DnnLayer_getNextLayerNumAt (const morapi_DnnLayer * self, morapi_Int32 i_output_index) Gets the number of next layers connected from the i_output_index-th output. Parameters self : layer object i_output_index : output index","title":"morapi_DnnLayer_getNextLayerNumAt()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_getnextlayer","text":"morapi_DnnLayer * morapi_DnnLayer_getNextLayer (const morapi_DnnLayer * self, morapi_Int32 i_output_index, morapi_Int32 i_next_index) Gets the i_next_index-th next layer connected from the i_output_index-th output. Parameters self : layer object i_output_index : output index i_next_index : next layer index","title":"morapi_DnnLayer_getNextLayer()"},{"location":"structmorapi__DnnLayer.html#morapi_dnnlayer_getnextlayerinputindex","text":"morapi_Int32 morapi_DnnLayer_getNextLayerInputIndex (const morapi_DnnLayer * self, morapi_Int32 i_output_index, morapi_Int32 i_next_index) Gets the input index at the i_next_index-th next layer connected from the i_output_index-th output. Parameters self : layer object i_output_index : output index i_next_index : next layer input index","title":"morapi_DnnLayer_getNextLayerInputIndex()"},{"location":"structmorapi__DnnLayer.html#friends-and-related-function-documentation","text":"","title":"Friends And Related Function Documentation"},{"location":"structmorapi__DnnLayer.html#morapi_dnn_static_getlayertypenum","text":"morapi_Int32 morapi_Dnn_static_getLayerTypeNum ( morapi_Env * env) Gets the number of installed layer types. Parameters env : environment where the layers are installed","title":"morapi_Dnn_static_getLayerTypeNum()"},{"location":"structmorapi__DnnLayer.html#morapi_dnn_static_getlayertypes","text":"const morapi_Char ** morapi_Dnn_static_getLayerTypes ( morapi_Env * env) Gets the installed layer types. Parameters env : environment where the layers are installed","title":"morapi_Dnn_static_getLayerTypes()"},{"location":"structmorapi__DnnLayer.html#morapi_dnn_static_getdefaultlayerparams","text":"const morapi_Char * morapi_Dnn_static_getDefaultLayerParams ( morapi_Env * env, const morapi_Char * i_layer_type) Gets default layer parameters. Parameters env : environment where the layers are installed i_layer_type : layer tpye","title":"morapi_Dnn_static_getDefaultLayerParams()"},{"location":"structmorapi__DnnLayerCB.html","text":"morapi_DnnLayerCB Struct Reference dnn Callback functions for dnn layer. More... #include <morapi_softneuro.h> Public Types typedef void *(* morapi_Create_DnnLayerCB ) ( morapi_Env *env) typedef morapi_Result (* morapi_Destroy_DnnLayerCB ) ( morapi_Env *env, void *self) typedef const morapi_Char *(* morapi_DnnLayerCB_GetDefaultParams ) (void *self) typedef morapi_Result (* morapi_DnnLayerCB_Init ) (void *self, morapi_DnnLayer *i_layer) typedef morapi_Result (* morapi_DnnLayerCB_Cleanup ) (void *self) typedef morapi_Result (* morapi_DnnLayerCB_OptimizeWeight ) (void *self, morapi_Tensors *o_optimized, const morapi_Char *i_weight_name, const morapi_Char *i_format) Public Member Functions morapi_Result morapi_DnnLayerCB_clear ( morapi_DnnLayerCB *self) Data Fields morapi_Create_DnnLayerCB create morapi_Destroy_DnnLayerCB destroy morapi_DnnLayerCB_GetDefaultParams get_default_params morapi_DnnLayerCB_Init init morapi_DnnLayerCB_Cleanup cleanup morapi_DnnLayerCB_OptimizeWeight optimize_weight Detailed Description Callback functions for dnn layer. Member Typedef Documentation morapi_Create_DnnLayerCB typedef void*(* morapi_Create_DnnLayerCB) ( morapi_Env *env) Creates a layer object. Parameters env : environment where the object will be created morapi_Destroy_DnnLayerCB typedef morapi_Result (* morapi_Destroy_DnnLayerCB) ( morapi_Env *env, void *self) Destroys the layer object. Parameters env : environment where the object was created self : layer callback object morapi_DnnLayerCB_GetDefaultParams typedef const morapi_Char *(* morapi_DnnLayerCB_GetDefaultParams) (void *self) Gets the default parameters. Parameters self : layer callback object morapi_DnnLayerCB_Init typedef morapi_Result (* morapi_DnnLayerCB_Init) (void *self, morapi_DnnLayer *i_layer) Initializes the layer object. In this function, do the following: (1) get input and weight tensors and set them as member variables. (2) parse layer parameters ( morapi_DnnLayer_getParams() ) and set them as member variables. (3) decide shapes of output tensors, enable them by morapi_DnnLayer_enableOutputTensor() and set them as member varialbes. (4) set the number of operations by morapi_DnnLayer_setOps() . (5) set inplace by morapi_DnnLayer_setInplace() if necessary. Parameters self : layer callback object self : layer object morapi_DnnLayerCB_Cleanup typedef morapi_Result (* morapi_DnnLayerCB_Cleanup) (void *self) Cleans up the layer object. Parameters self : layer callback object morapi_DnnLayerCB_OptimizeWeight typedef morapi_Result (* morapi_DnnLayerCB_OptimizeWeight) (void *self, morapi_Tensors *o_optimized, const morapi_Char *i_weight_name, const morapi_Char *i_format) Optimizes a weight. Parameters self : layer callback object o_optimized : output optimized tensors i_weight_name : weight to be optimized i_format : optimization format Member Function Documentation morapi_DnnLayerCB_clear() morapi_Result morapi_DnnLayerCB_clear ( morapi_DnnLayerCB * self) Clears the callback functions for a dnn layer. Parameters self : layer callback object Field Documentation create morapi_Create_DnnLayerCB create creates a layer object. destroy morapi_Destroy_DnnLayerCB destroy destroys the layer object. get_default_params morapi_DnnLayerCB_GetDefaultParams get_default_params gets the default parameters. init morapi_DnnLayerCB_Init init initializes the layer object. cleanup morapi_DnnLayerCB_Cleanup cleanup cleans up the layer object. optimize_weight morapi_DnnLayerCB_OptimizeWeight optimize_weight optimizes a weight.","title":"morapi_DnnLayerCB"},{"location":"structmorapi__DnnLayerCB.html#morapi_dnnlayercb-struct-reference","text":"dnn Callback functions for dnn layer. More... #include <morapi_softneuro.h>","title":"morapi_DnnLayerCB Struct Reference"},{"location":"structmorapi__DnnLayerCB.html#public-types","text":"typedef void *(* morapi_Create_DnnLayerCB ) ( morapi_Env *env) typedef morapi_Result (* morapi_Destroy_DnnLayerCB ) ( morapi_Env *env, void *self) typedef const morapi_Char *(* morapi_DnnLayerCB_GetDefaultParams ) (void *self) typedef morapi_Result (* morapi_DnnLayerCB_Init ) (void *self, morapi_DnnLayer *i_layer) typedef morapi_Result (* morapi_DnnLayerCB_Cleanup ) (void *self) typedef morapi_Result (* morapi_DnnLayerCB_OptimizeWeight ) (void *self, morapi_Tensors *o_optimized, const morapi_Char *i_weight_name, const morapi_Char *i_format)","title":"Public Types"},{"location":"structmorapi__DnnLayerCB.html#public-member-functions","text":"morapi_Result morapi_DnnLayerCB_clear ( morapi_DnnLayerCB *self)","title":"Public Member Functions"},{"location":"structmorapi__DnnLayerCB.html#data-fields","text":"morapi_Create_DnnLayerCB create morapi_Destroy_DnnLayerCB destroy morapi_DnnLayerCB_GetDefaultParams get_default_params morapi_DnnLayerCB_Init init morapi_DnnLayerCB_Cleanup cleanup morapi_DnnLayerCB_OptimizeWeight optimize_weight","title":"Data Fields"},{"location":"structmorapi__DnnLayerCB.html#detailed-description","text":"Callback functions for dnn layer.","title":"Detailed Description"},{"location":"structmorapi__DnnLayerCB.html#member-typedef-documentation","text":"","title":"Member Typedef Documentation"},{"location":"structmorapi__DnnLayerCB.html#morapi_create_dnnlayercb","text":"typedef void*(* morapi_Create_DnnLayerCB) ( morapi_Env *env) Creates a layer object. Parameters env : environment where the object will be created","title":"morapi_Create_DnnLayerCB"},{"location":"structmorapi__DnnLayerCB.html#morapi_destroy_dnnlayercb","text":"typedef morapi_Result (* morapi_Destroy_DnnLayerCB) ( morapi_Env *env, void *self) Destroys the layer object. Parameters env : environment where the object was created self : layer callback object","title":"morapi_Destroy_DnnLayerCB"},{"location":"structmorapi__DnnLayerCB.html#morapi_dnnlayercb_getdefaultparams","text":"typedef const morapi_Char *(* morapi_DnnLayerCB_GetDefaultParams) (void *self) Gets the default parameters. Parameters self : layer callback object","title":"morapi_DnnLayerCB_GetDefaultParams"},{"location":"structmorapi__DnnLayerCB.html#morapi_dnnlayercb_init","text":"typedef morapi_Result (* morapi_DnnLayerCB_Init) (void *self, morapi_DnnLayer *i_layer) Initializes the layer object. In this function, do the following: (1) get input and weight tensors and set them as member variables. (2) parse layer parameters ( morapi_DnnLayer_getParams() ) and set them as member variables. (3) decide shapes of output tensors, enable them by morapi_DnnLayer_enableOutputTensor() and set them as member varialbes. (4) set the number of operations by morapi_DnnLayer_setOps() . (5) set inplace by morapi_DnnLayer_setInplace() if necessary. Parameters self : layer callback object self : layer object","title":"morapi_DnnLayerCB_Init"},{"location":"structmorapi__DnnLayerCB.html#morapi_dnnlayercb_cleanup","text":"typedef morapi_Result (* morapi_DnnLayerCB_Cleanup) (void *self) Cleans up the layer object. Parameters self : layer callback object","title":"morapi_DnnLayerCB_Cleanup"},{"location":"structmorapi__DnnLayerCB.html#morapi_dnnlayercb_optimizeweight","text":"typedef morapi_Result (* morapi_DnnLayerCB_OptimizeWeight) (void *self, morapi_Tensors *o_optimized, const morapi_Char *i_weight_name, const morapi_Char *i_format) Optimizes a weight. Parameters self : layer callback object o_optimized : output optimized tensors i_weight_name : weight to be optimized i_format : optimization format","title":"morapi_DnnLayerCB_OptimizeWeight"},{"location":"structmorapi__DnnLayerCB.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__DnnLayerCB.html#morapi_dnnlayercb_clear","text":"morapi_Result morapi_DnnLayerCB_clear ( morapi_DnnLayerCB * self) Clears the callback functions for a dnn layer. Parameters self : layer callback object","title":"morapi_DnnLayerCB_clear()"},{"location":"structmorapi__DnnLayerCB.html#field-documentation","text":"","title":"Field Documentation"},{"location":"structmorapi__DnnLayerCB.html#create","text":"morapi_Create_DnnLayerCB create creates a layer object.","title":"create"},{"location":"structmorapi__DnnLayerCB.html#destroy","text":"morapi_Destroy_DnnLayerCB destroy destroys the layer object.","title":"destroy"},{"location":"structmorapi__DnnLayerCB.html#get_default_params","text":"morapi_DnnLayerCB_GetDefaultParams get_default_params gets the default parameters.","title":"get_default_params"},{"location":"structmorapi__DnnLayerCB.html#init","text":"morapi_DnnLayerCB_Init init initializes the layer object.","title":"init"},{"location":"structmorapi__DnnLayerCB.html#cleanup","text":"morapi_DnnLayerCB_Cleanup cleanup cleans up the layer object.","title":"cleanup"},{"location":"structmorapi__DnnLayerCB.html#optimize_weight","text":"morapi_DnnLayerCB_OptimizeWeight optimize_weight optimizes a weight.","title":"optimize_weight"},{"location":"structmorapi__DnnLayerPlan.html","text":"morapi_DnnLayerPlan Struct Reference dnn \u00bb prof Dnn layer plan. More... #include <morapi_softneuro.h> Public Member Functions const morapi_Char * morapi_DnnLayerPlan_getName (const morapi_DnnLayerPlan *self) const morapi_Char * morapi_DnnLayerPlan_getType (const morapi_DnnLayerPlan *self) morapi_Int32 morapi_DnnLayerPlan_getSchemaPlanNum (const morapi_DnnLayerPlan *self) morapi_DnnSchemaPlan * morapi_DnnLayerPlan_getSchemaPlan (const morapi_DnnLayerPlan *self, morapi_Int32 i_index) const morapi_Char * morapi_DnnLayerPlan_getOptimalRoutineDesc (const morapi_DnnLayerPlan *self) const morapi_Params * morapi_DnnLayerPlan_getOptimalRoutineParams (const morapi_DnnLayerPlan *self) morapi_Real morapi_DnnLayerPlan_getUsec (const morapi_DnnLayerPlan *self) morapi_Real morapi_DnnLayerPlan_getAdaptUsec (const morapi_DnnLayerPlan *self) Detailed Description Dnn layer plan. Member Function Documentation morapi_DnnLayerPlan_getName() const morapi_Char * morapi_DnnLayerPlan_getName (const morapi_DnnLayerPlan * self) Gets the layer name. morapi_DnnLayerPlan_getType() const morapi_Char * morapi_DnnLayerPlan_getType (const morapi_DnnLayerPlan * self) Gets the layer type. morapi_DnnLayerPlan_getSchemaPlanNum() morapi_Int32 morapi_DnnLayerPlan_getSchemaPlanNum (const morapi_DnnLayerPlan * self) Gets the number of routine schema plans. morapi_DnnLayerPlan_getSchemaPlan() morapi_DnnSchemaPlan * morapi_DnnLayerPlan_getSchemaPlan (const morapi_DnnLayerPlan * self, morapi_Int32 i_index) Gets the i_index-th routine schema plan. morapi_DnnLayerPlan_getOptimalRoutineDesc() const morapi_Char * morapi_DnnLayerPlan_getOptimalRoutineDesc (const morapi_DnnLayerPlan * self) Gets the optimal routine descriptor. morapi_DnnLayerPlan_getOptimalRoutineParams() const morapi_Params * morapi_DnnLayerPlan_getOptimalRoutineParams (const morapi_DnnLayerPlan * self) Gets the optimal routine parameters. morapi_DnnLayerPlan_getUsec() morapi_Real morapi_DnnLayerPlan_getUsec (const morapi_DnnLayerPlan * self) Gets the forward time (usec). morapi_DnnLayerPlan_getAdaptUsec() morapi_Real morapi_DnnLayerPlan_getAdaptUsec (const morapi_DnnLayerPlan * self) Gets the adapt time (usec).","title":"morapi_DnnLayerPlan"},{"location":"structmorapi__DnnLayerPlan.html#morapi_dnnlayerplan-struct-reference","text":"dnn \u00bb prof Dnn layer plan. More... #include <morapi_softneuro.h>","title":"morapi_DnnLayerPlan Struct Reference"},{"location":"structmorapi__DnnLayerPlan.html#public-member-functions","text":"const morapi_Char * morapi_DnnLayerPlan_getName (const morapi_DnnLayerPlan *self) const morapi_Char * morapi_DnnLayerPlan_getType (const morapi_DnnLayerPlan *self) morapi_Int32 morapi_DnnLayerPlan_getSchemaPlanNum (const morapi_DnnLayerPlan *self) morapi_DnnSchemaPlan * morapi_DnnLayerPlan_getSchemaPlan (const morapi_DnnLayerPlan *self, morapi_Int32 i_index) const morapi_Char * morapi_DnnLayerPlan_getOptimalRoutineDesc (const morapi_DnnLayerPlan *self) const morapi_Params * morapi_DnnLayerPlan_getOptimalRoutineParams (const morapi_DnnLayerPlan *self) morapi_Real morapi_DnnLayerPlan_getUsec (const morapi_DnnLayerPlan *self) morapi_Real morapi_DnnLayerPlan_getAdaptUsec (const morapi_DnnLayerPlan *self)","title":"Public Member Functions"},{"location":"structmorapi__DnnLayerPlan.html#detailed-description","text":"Dnn layer plan.","title":"Detailed Description"},{"location":"structmorapi__DnnLayerPlan.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__DnnLayerPlan.html#morapi_dnnlayerplan_getname","text":"const morapi_Char * morapi_DnnLayerPlan_getName (const morapi_DnnLayerPlan * self) Gets the layer name.","title":"morapi_DnnLayerPlan_getName()"},{"location":"structmorapi__DnnLayerPlan.html#morapi_dnnlayerplan_gettype","text":"const morapi_Char * morapi_DnnLayerPlan_getType (const morapi_DnnLayerPlan * self) Gets the layer type.","title":"morapi_DnnLayerPlan_getType()"},{"location":"structmorapi__DnnLayerPlan.html#morapi_dnnlayerplan_getschemaplannum","text":"morapi_Int32 morapi_DnnLayerPlan_getSchemaPlanNum (const morapi_DnnLayerPlan * self) Gets the number of routine schema plans.","title":"morapi_DnnLayerPlan_getSchemaPlanNum()"},{"location":"structmorapi__DnnLayerPlan.html#morapi_dnnlayerplan_getschemaplan","text":"morapi_DnnSchemaPlan * morapi_DnnLayerPlan_getSchemaPlan (const morapi_DnnLayerPlan * self, morapi_Int32 i_index) Gets the i_index-th routine schema plan.","title":"morapi_DnnLayerPlan_getSchemaPlan()"},{"location":"structmorapi__DnnLayerPlan.html#morapi_dnnlayerplan_getoptimalroutinedesc","text":"const morapi_Char * morapi_DnnLayerPlan_getOptimalRoutineDesc (const morapi_DnnLayerPlan * self) Gets the optimal routine descriptor.","title":"morapi_DnnLayerPlan_getOptimalRoutineDesc()"},{"location":"structmorapi__DnnLayerPlan.html#morapi_dnnlayerplan_getoptimalroutineparams","text":"const morapi_Params * morapi_DnnLayerPlan_getOptimalRoutineParams (const morapi_DnnLayerPlan * self) Gets the optimal routine parameters.","title":"morapi_DnnLayerPlan_getOptimalRoutineParams()"},{"location":"structmorapi__DnnLayerPlan.html#morapi_dnnlayerplan_getusec","text":"morapi_Real morapi_DnnLayerPlan_getUsec (const morapi_DnnLayerPlan * self) Gets the forward time (usec).","title":"morapi_DnnLayerPlan_getUsec()"},{"location":"structmorapi__DnnLayerPlan.html#morapi_dnnlayerplan_getadaptusec","text":"morapi_Real morapi_DnnLayerPlan_getAdaptUsec (const morapi_DnnLayerPlan * self) Gets the adapt time (usec).","title":"morapi_DnnLayerPlan_getAdaptUsec()"},{"location":"structmorapi__DnnNet.html","text":"morapi_DnnNet Struct Reference dnn Dnn net. More... #include <morapi_softneuro.h> Public Member Functions Layers morapi_DnnLayer * morapi_DnnNet_addLayer ( morapi_DnnNet *self, const morapi_Char *i_name, const morapi_Char *i_type) morapi_Result morapi_DnnNet_removeLayer ( morapi_DnnNet *self, morapi_DnnLayer *io_layer) morapi_Int32 morapi_DnnNet_getLayerNum (const morapi_DnnNet *self) morapi_DnnLayer * morapi_DnnNet_getLayer (const morapi_DnnNet *self, morapi_Int32 i_index) morapi_DnnLayer * morapi_DnnNet_findLayer (const morapi_DnnNet *self, const morapi_Char *i_name) I/O morapi_Int32 morapi_DnnNet_getInputNum (const morapi_DnnNet *self) morapi_Tensor * morapi_DnnNet_getInput (const morapi_DnnNet *self, morapi_Int32 i_input_index) morapi_Int32 morapi_DnnNet_getOutputNum (const morapi_DnnNet *self) morapi_Tensor * morapi_DnnNet_getOutput (const morapi_DnnNet *self, morapi_Int32 i_output_index) Net morapi_Dnn * morapi_DnnNet_getOwner (const morapi_DnnNet *self) const morapi_Char * morapi_DnnNet_getName (const morapi_DnnNet *self) morapi_Result morapi_DnnNet_clear ( morapi_DnnNet *self) morapi_Result morapi_DnnNet_pipe ( morapi_DnnNet *self, morapi_Int32 i_output_index, morapi_DnnNet *i_piped_net, morapi_Int32 i_input_index) morapi_Result morapi_DnnNet_unpipe ( morapi_DnnNet *self, morapi_Int32 i_output_index, morapi_DnnNet *i_piped_net, morapi_Int32 i_input_index) morapi_DnnNet * morapi_DnnNet_getPrevNet (const morapi_DnnNet *net, morapi_Int32 i_input_index) morapi_Int32 morapi_DnnNet_getPrevNetOutputIndex (const morapi_DnnNet *net, morapi_Int32 i_input_index) morapi_Int32 morapi_DnnNet_getNextNetNumAt (const morapi_DnnNet *net, morapi_Int32 i_output_index) morapi_DnnNet * morapi_DnnNet_getNextNet (const morapi_DnnNet *net, morapi_Int32 i_output_index, morapi_Int32 i_next_index) morapi_Int32 morapi_DnnNet_getNextNetInputIndex (const morapi_DnnNet *net, morapi_Int32 i_output_index, morapi_Int32 i_next_index) Detailed Description Dnn net. test_decompose_api.c , and test_dnn_api.c . Member Function Documentation morapi_DnnNet_addLayer() morapi_DnnLayer * morapi_DnnNet_addLayer ( morapi_DnnNet * self, const morapi_Char * i_name, const morapi_Char * i_type) Adds a layer. The state is changed to MORAPI_DNN_NET_STATE_INITIALIZED. Parameters self : net object i_name : layer name i_type : layer type morapi_DnnNet_removeLayer() morapi_Result morapi_DnnNet_removeLayer ( morapi_DnnNet * self, morapi_DnnLayer * io_layer) Removes a layer. The state is changed to MORAPI_DNN_NET_STATE_INITIALIZED. Parameters self : net object io_layer : layer to be removed morapi_DnnNet_getLayerNum() morapi_Int32 morapi_DnnNet_getLayerNum (const morapi_DnnNet * self) Gets the number of layers in the DnnNet subnetwork. Parameters self : net object test_dnn_api.c . morapi_DnnNet_getLayer() morapi_DnnLayer * morapi_DnnNet_getLayer (const morapi_DnnNet * self, morapi_Int32 i_index) Gets the i_index-th layer in the DnnNet subnetwork. Parameters self : net object i_index : layer index test_dnn_api.c . morapi_DnnNet_findLayer() morapi_DnnLayer * morapi_DnnNet_findLayer (const morapi_DnnNet * self, const morapi_Char * i_name) Gets the layer named i_name in the DnnNet subnetwork. Parameters self : net object i_name : layer name test_decompose_api.c . morapi_DnnNet_getInputNum() morapi_Int32 morapi_DnnNet_getInputNum (const morapi_DnnNet * self) Gets the number of inputs. Parameters self : net object morapi_DnnNet_getInput() morapi_Tensor * morapi_DnnNet_getInput (const morapi_DnnNet * self, morapi_Int32 i_input_index) Gets the i_input_index-th input tensor. Parameters self : net object i_input_index : input index morapi_DnnNet_getOutputNum() morapi_Int32 morapi_DnnNet_getOutputNum (const morapi_DnnNet * self) Gets the number of outputs. Parameters self : net object morapi_DnnNet_getOutput() morapi_Tensor * morapi_DnnNet_getOutput (const morapi_DnnNet * self, morapi_Int32 i_output_index) Gets the i_output_index-th output tensor. Parameters self : net object i_output_index : output index morapi_DnnNet_getOwner() morapi_Dnn * morapi_DnnNet_getOwner (const morapi_DnnNet * self) Gets the owner dnn. Parameters self : net object morapi_DnnNet_getName() const morapi_Char * morapi_DnnNet_getName (const morapi_DnnNet * self) Gets the name. Parameters self : net object morapi_DnnNet_clear() morapi_Result morapi_DnnNet_clear ( morapi_DnnNet * self) Clears. Removes all layers. Parameters self : net object morapi_DnnNet_pipe() morapi_Result morapi_DnnNet_pipe ( morapi_DnnNet * self, morapi_Int32 i_output_index, morapi_DnnNet * i_piped_net, morapi_Int32 i_input_index) Pipes the i_output_index-th output to the i_input_index-th input of i_next_net. Parameters self : net object i_output_index : index of the ouput on a pipe end i_piped_net : net to be piped to i_input_index : index of the input on the other pipe end morapi_DnnNet_unpipe() morapi_Result morapi_DnnNet_unpipe ( morapi_DnnNet * self, morapi_Int32 i_output_index, morapi_DnnNet * i_piped_net, morapi_Int32 i_input_index) Unpipes the i_output_index-th output to the i_input_index-th input of i_next_layer. Parameters self : net object i_output_index : index of the ouput on a pipe end i_piped_net : net to be unpiped i_input_index : index of the input on the other pipe end morapi_DnnNet_getPrevNet() morapi_DnnNet * morapi_DnnNet_getPrevNet (const morapi_DnnNet * net, morapi_Int32 i_input_index) Gets a previous net connected to the i_input_index-th input. Parameters net : net object i_input_index : input index morapi_DnnNet_getPrevNetOutputIndex() morapi_Int32 morapi_DnnNet_getPrevNetOutputIndex (const morapi_DnnNet * net, morapi_Int32 i_input_index) Gets an output index of previous net connected to the i_input_index-th input. Parameters net : net object i_input_index : input index morapi_DnnNet_getNextNetNumAt() morapi_Int32 morapi_DnnNet_getNextNetNumAt (const morapi_DnnNet * net, morapi_Int32 i_output_index) Gets the number of next nets connected from the i_output_index-th output. Parameters net : net object i_output_index : output_index morapi_DnnNet_getNextNet() morapi_DnnNet * morapi_DnnNet_getNextNet (const morapi_DnnNet * net, morapi_Int32 i_output_index, morapi_Int32 i_next_index) Gets the i_next_index-th next net connected from the i_output_index-th output. Parameters net : net object i_output_index : output index i_next_index : next net index morapi_DnnNet_getNextNetInputIndex() morapi_Int32 morapi_DnnNet_getNextNetInputIndex (const morapi_DnnNet * net, morapi_Int32 i_output_index, morapi_Int32 i_next_index) Gets the input index of the i_next_index-th next net connected from the i_output_index-th output. Parameters net : net object i_output_index : output index i_next_index : next input index","title":"morapi_DnnNet"},{"location":"structmorapi__DnnNet.html#morapi_dnnnet-struct-reference","text":"dnn Dnn net. More... #include <morapi_softneuro.h>","title":"morapi_DnnNet Struct Reference"},{"location":"structmorapi__DnnNet.html#public-member-functions","text":"","title":"Public Member Functions"},{"location":"structmorapi__DnnNet.html#layers","text":"morapi_DnnLayer * morapi_DnnNet_addLayer ( morapi_DnnNet *self, const morapi_Char *i_name, const morapi_Char *i_type) morapi_Result morapi_DnnNet_removeLayer ( morapi_DnnNet *self, morapi_DnnLayer *io_layer) morapi_Int32 morapi_DnnNet_getLayerNum (const morapi_DnnNet *self) morapi_DnnLayer * morapi_DnnNet_getLayer (const morapi_DnnNet *self, morapi_Int32 i_index) morapi_DnnLayer * morapi_DnnNet_findLayer (const morapi_DnnNet *self, const morapi_Char *i_name)","title":"Layers"},{"location":"structmorapi__DnnNet.html#io","text":"morapi_Int32 morapi_DnnNet_getInputNum (const morapi_DnnNet *self) morapi_Tensor * morapi_DnnNet_getInput (const morapi_DnnNet *self, morapi_Int32 i_input_index) morapi_Int32 morapi_DnnNet_getOutputNum (const morapi_DnnNet *self) morapi_Tensor * morapi_DnnNet_getOutput (const morapi_DnnNet *self, morapi_Int32 i_output_index)","title":"I/O"},{"location":"structmorapi__DnnNet.html#net","text":"morapi_Dnn * morapi_DnnNet_getOwner (const morapi_DnnNet *self) const morapi_Char * morapi_DnnNet_getName (const morapi_DnnNet *self) morapi_Result morapi_DnnNet_clear ( morapi_DnnNet *self) morapi_Result morapi_DnnNet_pipe ( morapi_DnnNet *self, morapi_Int32 i_output_index, morapi_DnnNet *i_piped_net, morapi_Int32 i_input_index) morapi_Result morapi_DnnNet_unpipe ( morapi_DnnNet *self, morapi_Int32 i_output_index, morapi_DnnNet *i_piped_net, morapi_Int32 i_input_index) morapi_DnnNet * morapi_DnnNet_getPrevNet (const morapi_DnnNet *net, morapi_Int32 i_input_index) morapi_Int32 morapi_DnnNet_getPrevNetOutputIndex (const morapi_DnnNet *net, morapi_Int32 i_input_index) morapi_Int32 morapi_DnnNet_getNextNetNumAt (const morapi_DnnNet *net, morapi_Int32 i_output_index) morapi_DnnNet * morapi_DnnNet_getNextNet (const morapi_DnnNet *net, morapi_Int32 i_output_index, morapi_Int32 i_next_index) morapi_Int32 morapi_DnnNet_getNextNetInputIndex (const morapi_DnnNet *net, morapi_Int32 i_output_index, morapi_Int32 i_next_index)","title":"Net"},{"location":"structmorapi__DnnNet.html#detailed-description","text":"Dnn net. test_decompose_api.c , and test_dnn_api.c .","title":"Detailed Description"},{"location":"structmorapi__DnnNet.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__DnnNet.html#morapi_dnnnet_addlayer","text":"morapi_DnnLayer * morapi_DnnNet_addLayer ( morapi_DnnNet * self, const morapi_Char * i_name, const morapi_Char * i_type) Adds a layer. The state is changed to MORAPI_DNN_NET_STATE_INITIALIZED. Parameters self : net object i_name : layer name i_type : layer type","title":"morapi_DnnNet_addLayer()"},{"location":"structmorapi__DnnNet.html#morapi_dnnnet_removelayer","text":"morapi_Result morapi_DnnNet_removeLayer ( morapi_DnnNet * self, morapi_DnnLayer * io_layer) Removes a layer. The state is changed to MORAPI_DNN_NET_STATE_INITIALIZED. Parameters self : net object io_layer : layer to be removed","title":"morapi_DnnNet_removeLayer()"},{"location":"structmorapi__DnnNet.html#morapi_dnnnet_getlayernum","text":"morapi_Int32 morapi_DnnNet_getLayerNum (const morapi_DnnNet * self) Gets the number of layers in the DnnNet subnetwork. Parameters self : net object test_dnn_api.c .","title":"morapi_DnnNet_getLayerNum()"},{"location":"structmorapi__DnnNet.html#morapi_dnnnet_getlayer","text":"morapi_DnnLayer * morapi_DnnNet_getLayer (const morapi_DnnNet * self, morapi_Int32 i_index) Gets the i_index-th layer in the DnnNet subnetwork. Parameters self : net object i_index : layer index test_dnn_api.c .","title":"morapi_DnnNet_getLayer()"},{"location":"structmorapi__DnnNet.html#morapi_dnnnet_findlayer","text":"morapi_DnnLayer * morapi_DnnNet_findLayer (const morapi_DnnNet * self, const morapi_Char * i_name) Gets the layer named i_name in the DnnNet subnetwork. Parameters self : net object i_name : layer name test_decompose_api.c .","title":"morapi_DnnNet_findLayer()"},{"location":"structmorapi__DnnNet.html#morapi_dnnnet_getinputnum","text":"morapi_Int32 morapi_DnnNet_getInputNum (const morapi_DnnNet * self) Gets the number of inputs. Parameters self : net object","title":"morapi_DnnNet_getInputNum()"},{"location":"structmorapi__DnnNet.html#morapi_dnnnet_getinput","text":"morapi_Tensor * morapi_DnnNet_getInput (const morapi_DnnNet * self, morapi_Int32 i_input_index) Gets the i_input_index-th input tensor. Parameters self : net object i_input_index : input index","title":"morapi_DnnNet_getInput()"},{"location":"structmorapi__DnnNet.html#morapi_dnnnet_getoutputnum","text":"morapi_Int32 morapi_DnnNet_getOutputNum (const morapi_DnnNet * self) Gets the number of outputs. Parameters self : net object","title":"morapi_DnnNet_getOutputNum()"},{"location":"structmorapi__DnnNet.html#morapi_dnnnet_getoutput","text":"morapi_Tensor * morapi_DnnNet_getOutput (const morapi_DnnNet * self, morapi_Int32 i_output_index) Gets the i_output_index-th output tensor. Parameters self : net object i_output_index : output index","title":"morapi_DnnNet_getOutput()"},{"location":"structmorapi__DnnNet.html#morapi_dnnnet_getowner","text":"morapi_Dnn * morapi_DnnNet_getOwner (const morapi_DnnNet * self) Gets the owner dnn. Parameters self : net object","title":"morapi_DnnNet_getOwner()"},{"location":"structmorapi__DnnNet.html#morapi_dnnnet_getname","text":"const morapi_Char * morapi_DnnNet_getName (const morapi_DnnNet * self) Gets the name. Parameters self : net object","title":"morapi_DnnNet_getName()"},{"location":"structmorapi__DnnNet.html#morapi_dnnnet_clear","text":"morapi_Result morapi_DnnNet_clear ( morapi_DnnNet * self) Clears. Removes all layers. Parameters self : net object","title":"morapi_DnnNet_clear()"},{"location":"structmorapi__DnnNet.html#morapi_dnnnet_pipe","text":"morapi_Result morapi_DnnNet_pipe ( morapi_DnnNet * self, morapi_Int32 i_output_index, morapi_DnnNet * i_piped_net, morapi_Int32 i_input_index) Pipes the i_output_index-th output to the i_input_index-th input of i_next_net. Parameters self : net object i_output_index : index of the ouput on a pipe end i_piped_net : net to be piped to i_input_index : index of the input on the other pipe end","title":"morapi_DnnNet_pipe()"},{"location":"structmorapi__DnnNet.html#morapi_dnnnet_unpipe","text":"morapi_Result morapi_DnnNet_unpipe ( morapi_DnnNet * self, morapi_Int32 i_output_index, morapi_DnnNet * i_piped_net, morapi_Int32 i_input_index) Unpipes the i_output_index-th output to the i_input_index-th input of i_next_layer. Parameters self : net object i_output_index : index of the ouput on a pipe end i_piped_net : net to be unpiped i_input_index : index of the input on the other pipe end","title":"morapi_DnnNet_unpipe()"},{"location":"structmorapi__DnnNet.html#morapi_dnnnet_getprevnet","text":"morapi_DnnNet * morapi_DnnNet_getPrevNet (const morapi_DnnNet * net, morapi_Int32 i_input_index) Gets a previous net connected to the i_input_index-th input. Parameters net : net object i_input_index : input index","title":"morapi_DnnNet_getPrevNet()"},{"location":"structmorapi__DnnNet.html#morapi_dnnnet_getprevnetoutputindex","text":"morapi_Int32 morapi_DnnNet_getPrevNetOutputIndex (const morapi_DnnNet * net, morapi_Int32 i_input_index) Gets an output index of previous net connected to the i_input_index-th input. Parameters net : net object i_input_index : input index","title":"morapi_DnnNet_getPrevNetOutputIndex()"},{"location":"structmorapi__DnnNet.html#morapi_dnnnet_getnextnetnumat","text":"morapi_Int32 morapi_DnnNet_getNextNetNumAt (const morapi_DnnNet * net, morapi_Int32 i_output_index) Gets the number of next nets connected from the i_output_index-th output. Parameters net : net object i_output_index : output_index","title":"morapi_DnnNet_getNextNetNumAt()"},{"location":"structmorapi__DnnNet.html#morapi_dnnnet_getnextnet","text":"morapi_DnnNet * morapi_DnnNet_getNextNet (const morapi_DnnNet * net, morapi_Int32 i_output_index, morapi_Int32 i_next_index) Gets the i_next_index-th next net connected from the i_output_index-th output. Parameters net : net object i_output_index : output index i_next_index : next net index","title":"morapi_DnnNet_getNextNet()"},{"location":"structmorapi__DnnNet.html#morapi_dnnnet_getnextnetinputindex","text":"morapi_Int32 morapi_DnnNet_getNextNetInputIndex (const morapi_DnnNet * net, morapi_Int32 i_output_index, morapi_Int32 i_next_index) Gets the input index of the i_next_index-th next net connected from the i_output_index-th output. Parameters net : net object i_output_index : output index i_next_index : next input index","title":"morapi_DnnNet_getNextNetInputIndex()"},{"location":"structmorapi__DnnNetPartition.html","text":"morapi_DnnNetPartition Struct Reference dnn \u00bb decomposer Dnn partitioning position. More... #include <morapi_softneuro.h> Public Member Functions morapi_DnnNetPartition * morapi_create_DnnNetPartition ( morapi_Env *io_env) morapi_Result morapi_DnnNetPartition_initialize ( morapi_DnnNetPartition *self) morapi_Result morapi_destroy_DnnNetPartition ( morapi_Env *io_env, morapi_DnnNetPartition *self) morapi_Result morapi_DnnNetPartition_addInterval ( morapi_DnnNetPartition *self, const morapi_Char *i_from, const morapi_Char *i_to) Detailed Description Dnn partitioning position. test_decompose_api.c . Member Function Documentation morapi_create_DnnNetPartition() morapi_DnnNetPartition * morapi_create_DnnNetPartition ( morapi_Env * io_env) Creates a DnnNetPartition. test_decompose_api.c . morapi_DnnNetPartition_initialize() morapi_Result morapi_DnnNetPartition_initialize ( morapi_DnnNetPartition * self) Initializes with default parameters. morapi_destroy_DnnNetPartition() morapi_Result morapi_destroy_DnnNetPartition ( morapi_Env * io_env, morapi_DnnNetPartition * self) Destroys the DnnNetPartition. test_decompose_api.c . morapi_DnnNetPartition_addInterval() morapi_Result morapi_DnnNetPartition_addInterval ( morapi_DnnNetPartition * self, const morapi_Char * i_from, const morapi_Char * i_to) Adds interval (partitioning position) to the net. Parameters self : the DnnNetPartition object. i_from : start layer index. i_to : end layer index. test_decompose_api.c .","title":"morapi_DnnNetPartition"},{"location":"structmorapi__DnnNetPartition.html#morapi_dnnnetpartition-struct-reference","text":"dnn \u00bb decomposer Dnn partitioning position. More... #include <morapi_softneuro.h>","title":"morapi_DnnNetPartition Struct Reference"},{"location":"structmorapi__DnnNetPartition.html#public-member-functions","text":"morapi_DnnNetPartition * morapi_create_DnnNetPartition ( morapi_Env *io_env) morapi_Result morapi_DnnNetPartition_initialize ( morapi_DnnNetPartition *self) morapi_Result morapi_destroy_DnnNetPartition ( morapi_Env *io_env, morapi_DnnNetPartition *self) morapi_Result morapi_DnnNetPartition_addInterval ( morapi_DnnNetPartition *self, const morapi_Char *i_from, const morapi_Char *i_to)","title":"Public Member Functions"},{"location":"structmorapi__DnnNetPartition.html#detailed-description","text":"Dnn partitioning position. test_decompose_api.c .","title":"Detailed Description"},{"location":"structmorapi__DnnNetPartition.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__DnnNetPartition.html#morapi_create_dnnnetpartition","text":"morapi_DnnNetPartition * morapi_create_DnnNetPartition ( morapi_Env * io_env) Creates a DnnNetPartition. test_decompose_api.c .","title":"morapi_create_DnnNetPartition()"},{"location":"structmorapi__DnnNetPartition.html#morapi_dnnnetpartition_initialize","text":"morapi_Result morapi_DnnNetPartition_initialize ( morapi_DnnNetPartition * self) Initializes with default parameters.","title":"morapi_DnnNetPartition_initialize()"},{"location":"structmorapi__DnnNetPartition.html#morapi_destroy_dnnnetpartition","text":"morapi_Result morapi_destroy_DnnNetPartition ( morapi_Env * io_env, morapi_DnnNetPartition * self) Destroys the DnnNetPartition. test_decompose_api.c .","title":"morapi_destroy_DnnNetPartition()"},{"location":"structmorapi__DnnNetPartition.html#morapi_dnnnetpartition_addinterval","text":"morapi_Result morapi_DnnNetPartition_addInterval ( morapi_DnnNetPartition * self, const morapi_Char * i_from, const morapi_Char * i_to) Adds interval (partitioning position) to the net. Parameters self : the DnnNetPartition object. i_from : start layer index. i_to : end layer index. test_decompose_api.c .","title":"morapi_DnnNetPartition_addInterval()"},{"location":"structmorapi__DnnNetPlan.html","text":"morapi_DnnNetPlan Struct Reference dnn \u00bb prof Dnn net plan. More... #include <morapi_softneuro.h> Public Member Functions const morapi_Char * morapi_DnnNetPlan_getName (const morapi_DnnNetPlan *self) morapi_DnnRoutinePlan * morapi_DnnNetPlan_getParent (const morapi_DnnNetPlan *self) morapi_Int32 morapi_DnnNetPlan_getLayerPlanNum (const morapi_DnnNetPlan *self) morapi_DnnLayerPlan * morapi_DnnNetPlan_getLayerPlan (const morapi_DnnNetPlan *self, morapi_Int32 i_index) morapi_Real morapi_DnnNetPlan_getUsec (const morapi_DnnNetPlan *self) Detailed Description Dnn net plan. Member Function Documentation morapi_DnnNetPlan_getName() const morapi_Char * morapi_DnnNetPlan_getName (const morapi_DnnNetPlan * self) Gets the net name. morapi_DnnNetPlan_getParent() morapi_DnnRoutinePlan * morapi_DnnNetPlan_getParent (const morapi_DnnNetPlan * self) Gets the parent routine plan. If no parent, returns NULL. morapi_DnnNetPlan_getLayerPlanNum() morapi_Int32 morapi_DnnNetPlan_getLayerPlanNum (const morapi_DnnNetPlan * self) Gets the number of layer plans. morapi_DnnNetPlan_getLayerPlan() morapi_DnnLayerPlan * morapi_DnnNetPlan_getLayerPlan (const morapi_DnnNetPlan * self, morapi_Int32 i_index) Gets the i_index-th layer plan. morapi_DnnNetPlan_getUsec() morapi_Real morapi_DnnNetPlan_getUsec (const morapi_DnnNetPlan * self) Gets the forward time (usec).","title":"morapi_DnnNetPlan"},{"location":"structmorapi__DnnNetPlan.html#morapi_dnnnetplan-struct-reference","text":"dnn \u00bb prof Dnn net plan. More... #include <morapi_softneuro.h>","title":"morapi_DnnNetPlan Struct Reference"},{"location":"structmorapi__DnnNetPlan.html#public-member-functions","text":"const morapi_Char * morapi_DnnNetPlan_getName (const morapi_DnnNetPlan *self) morapi_DnnRoutinePlan * morapi_DnnNetPlan_getParent (const morapi_DnnNetPlan *self) morapi_Int32 morapi_DnnNetPlan_getLayerPlanNum (const morapi_DnnNetPlan *self) morapi_DnnLayerPlan * morapi_DnnNetPlan_getLayerPlan (const morapi_DnnNetPlan *self, morapi_Int32 i_index) morapi_Real morapi_DnnNetPlan_getUsec (const morapi_DnnNetPlan *self)","title":"Public Member Functions"},{"location":"structmorapi__DnnNetPlan.html#detailed-description","text":"Dnn net plan.","title":"Detailed Description"},{"location":"structmorapi__DnnNetPlan.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__DnnNetPlan.html#morapi_dnnnetplan_getname","text":"const morapi_Char * morapi_DnnNetPlan_getName (const morapi_DnnNetPlan * self) Gets the net name.","title":"morapi_DnnNetPlan_getName()"},{"location":"structmorapi__DnnNetPlan.html#morapi_dnnnetplan_getparent","text":"morapi_DnnRoutinePlan * morapi_DnnNetPlan_getParent (const morapi_DnnNetPlan * self) Gets the parent routine plan. If no parent, returns NULL.","title":"morapi_DnnNetPlan_getParent()"},{"location":"structmorapi__DnnNetPlan.html#morapi_dnnnetplan_getlayerplannum","text":"morapi_Int32 morapi_DnnNetPlan_getLayerPlanNum (const morapi_DnnNetPlan * self) Gets the number of layer plans.","title":"morapi_DnnNetPlan_getLayerPlanNum()"},{"location":"structmorapi__DnnNetPlan.html#morapi_dnnnetplan_getlayerplan","text":"morapi_DnnLayerPlan * morapi_DnnNetPlan_getLayerPlan (const morapi_DnnNetPlan * self, morapi_Int32 i_index) Gets the i_index-th layer plan.","title":"morapi_DnnNetPlan_getLayerPlan()"},{"location":"structmorapi__DnnNetPlan.html#morapi_dnnnetplan_getusec","text":"morapi_Real morapi_DnnNetPlan_getUsec (const morapi_DnnNetPlan * self) Gets the forward time (usec).","title":"morapi_DnnNetPlan_getUsec()"},{"location":"structmorapi__DnnOptimizer.html","text":"morapi_DnnOptimizer Struct Reference dnn \u00bb prof Dnn optimizer. More... #include <morapi_softneuro.h> Public Member Functions morapi_DnnOptimizer * morapi_create_DnnOptimizer ( morapi_Env *io_env) morapi_Result morapi_destroy_DnnOptimizer ( morapi_Env *io_env, morapi_DnnOptimizer *self) morapi_Result morapi_DnnOptimizer_init ( morapi_DnnOptimizer *self, morapi_DnnProf *i_prof) morapi_Result morapi_DnnOptimizer_cleanup ( morapi_DnnOptimizer *self) const morapi_DnnPlan * morapi_DnnOptimizer_getPlan (const morapi_DnnOptimizer *self) morapi_DnnProf * morapi_DnnOptimizer_getProf (const morapi_DnnOptimizer *self) morapi_Result morapi_DnnOptimizer_optimize ( morapi_DnnOptimizer *self) Detailed Description Dnn optimizer. This structure searches for the optimal routines and parameters from the profiling data. test_prof_api.c . Member Function Documentation morapi_create_DnnOptimizer() morapi_DnnOptimizer * morapi_create_DnnOptimizer ( morapi_Env * io_env) Creates an optimizer. test_prof_api.c . morapi_destroy_DnnOptimizer() morapi_Result morapi_destroy_DnnOptimizer ( morapi_Env * io_env, morapi_DnnOptimizer * self) Destroys the optimizer. test_prof_api.c . morapi_DnnOptimizer_init() morapi_Result morapi_DnnOptimizer_init ( morapi_DnnOptimizer * self, morapi_DnnProf * i_prof) Initializes the optimizer with an profiler. Parameters self : the dnn optimizer i_prof : the profiler used for optimization test_prof_api.c . morapi_DnnOptimizer_cleanup() morapi_Result morapi_DnnOptimizer_cleanup ( morapi_DnnOptimizer * self) Cleans up the optimizer. Parameters self : the optimizer morapi_DnnOptimizer_getPlan() const morapi_DnnPlan * morapi_DnnOptimizer_getPlan (const morapi_DnnOptimizer * self) Gets the optimized plan. Execute this function after morapi_DnnOptimizer_optimize() . Parameters self : the dnn optimizer Returns the optimized plan test_prof_api.c . morapi_DnnOptimizer_getProf() morapi_DnnProf * morapi_DnnOptimizer_getProf (const morapi_DnnOptimizer * self) Gets the profiler for the optimizer. Parameters self : the dnn optimizer Returns the dnn profiler morapi_DnnOptimizer_optimize() morapi_Result morapi_DnnOptimizer_optimize ( morapi_DnnOptimizer * self) Runs the optimizer. After calling this, execute morapi_DnnOptimzer_getPlan() to get morapi_DnnPlan object. Parameters self : the dnn optimizer test_prof_api.c .","title":"morapi_DnnOptimizer"},{"location":"structmorapi__DnnOptimizer.html#morapi_dnnoptimizer-struct-reference","text":"dnn \u00bb prof Dnn optimizer. More... #include <morapi_softneuro.h>","title":"morapi_DnnOptimizer Struct Reference"},{"location":"structmorapi__DnnOptimizer.html#public-member-functions","text":"morapi_DnnOptimizer * morapi_create_DnnOptimizer ( morapi_Env *io_env) morapi_Result morapi_destroy_DnnOptimizer ( morapi_Env *io_env, morapi_DnnOptimizer *self) morapi_Result morapi_DnnOptimizer_init ( morapi_DnnOptimizer *self, morapi_DnnProf *i_prof) morapi_Result morapi_DnnOptimizer_cleanup ( morapi_DnnOptimizer *self) const morapi_DnnPlan * morapi_DnnOptimizer_getPlan (const morapi_DnnOptimizer *self) morapi_DnnProf * morapi_DnnOptimizer_getProf (const morapi_DnnOptimizer *self) morapi_Result morapi_DnnOptimizer_optimize ( morapi_DnnOptimizer *self)","title":"Public Member Functions"},{"location":"structmorapi__DnnOptimizer.html#detailed-description","text":"Dnn optimizer. This structure searches for the optimal routines and parameters from the profiling data. test_prof_api.c .","title":"Detailed Description"},{"location":"structmorapi__DnnOptimizer.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__DnnOptimizer.html#morapi_create_dnnoptimizer","text":"morapi_DnnOptimizer * morapi_create_DnnOptimizer ( morapi_Env * io_env) Creates an optimizer. test_prof_api.c .","title":"morapi_create_DnnOptimizer()"},{"location":"structmorapi__DnnOptimizer.html#morapi_destroy_dnnoptimizer","text":"morapi_Result morapi_destroy_DnnOptimizer ( morapi_Env * io_env, morapi_DnnOptimizer * self) Destroys the optimizer. test_prof_api.c .","title":"morapi_destroy_DnnOptimizer()"},{"location":"structmorapi__DnnOptimizer.html#morapi_dnnoptimizer_init","text":"morapi_Result morapi_DnnOptimizer_init ( morapi_DnnOptimizer * self, morapi_DnnProf * i_prof) Initializes the optimizer with an profiler. Parameters self : the dnn optimizer i_prof : the profiler used for optimization test_prof_api.c .","title":"morapi_DnnOptimizer_init()"},{"location":"structmorapi__DnnOptimizer.html#morapi_dnnoptimizer_cleanup","text":"morapi_Result morapi_DnnOptimizer_cleanup ( morapi_DnnOptimizer * self) Cleans up the optimizer. Parameters self : the optimizer","title":"morapi_DnnOptimizer_cleanup()"},{"location":"structmorapi__DnnOptimizer.html#morapi_dnnoptimizer_getplan","text":"const morapi_DnnPlan * morapi_DnnOptimizer_getPlan (const morapi_DnnOptimizer * self) Gets the optimized plan. Execute this function after morapi_DnnOptimizer_optimize() . Parameters self : the dnn optimizer Returns the optimized plan test_prof_api.c .","title":"morapi_DnnOptimizer_getPlan()"},{"location":"structmorapi__DnnOptimizer.html#morapi_dnnoptimizer_getprof","text":"morapi_DnnProf * morapi_DnnOptimizer_getProf (const morapi_DnnOptimizer * self) Gets the profiler for the optimizer. Parameters self : the dnn optimizer Returns the dnn profiler","title":"morapi_DnnOptimizer_getProf()"},{"location":"structmorapi__DnnOptimizer.html#morapi_dnnoptimizer_optimize","text":"morapi_Result morapi_DnnOptimizer_optimize ( morapi_DnnOptimizer * self) Runs the optimizer. After calling this, execute morapi_DnnOptimzer_getPlan() to get morapi_DnnPlan object. Parameters self : the dnn optimizer test_prof_api.c .","title":"morapi_DnnOptimizer_optimize()"},{"location":"structmorapi__DnnPlan.html","text":"morapi_DnnPlan Struct Reference dnn \u00bb prof Dnn plan. More... #include <morapi_softneuro.h> Public Member Functions morapi_Dnn * morapi_DnnPlan_getDnn (const morapi_DnnPlan *self) const morapi_DnnNetPlan * morapi_DnnPlan_findNetPlan (const morapi_DnnPlan *self, const morapi_DnnNet *i_net) const morapi_DnnLayerPlan * morapi_DnnPlan_findLayerPlan (const morapi_DnnPlan *self, const morapi_DnnLayer *i_layer) morapi_Real morapi_DnnPlan_getUsec (const morapi_DnnPlan *self) Detailed Description Dnn plan. DnnPlan is composing DnnRecipe. Created by DnnOptimizer. Member Function Documentation morapi_DnnPlan_getDnn() morapi_Dnn * morapi_DnnPlan_getDnn (const morapi_DnnPlan * self) Gets the dnn. Parameters self : the dnn plan object Returns the dnn object morapi_DnnPlan_findNetPlan() const morapi_DnnNetPlan * morapi_DnnPlan_findNetPlan (const morapi_DnnPlan * self, const morapi_DnnNet * i_net) Finds the net plan for i_net. Parameters self : the dnn plan object i_net : the dnn net Returns the net plan for i_net morapi_DnnPlan_findLayerPlan() const morapi_DnnLayerPlan * morapi_DnnPlan_findLayerPlan (const morapi_DnnPlan * self, const morapi_DnnLayer * i_layer) Finds the layer plan for i_layer. Parameters self : the dnn plan object i_layer : the dnn layer Returns the layer plan for i_layer morapi_DnnPlan_getUsec() morapi_Real morapi_DnnPlan_getUsec (const morapi_DnnPlan * self) Gets the forward time (usec). Parameters self : the dnn plan object Returns the forward time [usec]","title":"morapi_DnnPlan"},{"location":"structmorapi__DnnPlan.html#morapi_dnnplan-struct-reference","text":"dnn \u00bb prof Dnn plan. More... #include <morapi_softneuro.h>","title":"morapi_DnnPlan Struct Reference"},{"location":"structmorapi__DnnPlan.html#public-member-functions","text":"morapi_Dnn * morapi_DnnPlan_getDnn (const morapi_DnnPlan *self) const morapi_DnnNetPlan * morapi_DnnPlan_findNetPlan (const morapi_DnnPlan *self, const morapi_DnnNet *i_net) const morapi_DnnLayerPlan * morapi_DnnPlan_findLayerPlan (const morapi_DnnPlan *self, const morapi_DnnLayer *i_layer) morapi_Real morapi_DnnPlan_getUsec (const morapi_DnnPlan *self)","title":"Public Member Functions"},{"location":"structmorapi__DnnPlan.html#detailed-description","text":"Dnn plan. DnnPlan is composing DnnRecipe. Created by DnnOptimizer.","title":"Detailed Description"},{"location":"structmorapi__DnnPlan.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__DnnPlan.html#morapi_dnnplan_getdnn","text":"morapi_Dnn * morapi_DnnPlan_getDnn (const morapi_DnnPlan * self) Gets the dnn. Parameters self : the dnn plan object Returns the dnn object","title":"morapi_DnnPlan_getDnn()"},{"location":"structmorapi__DnnPlan.html#morapi_dnnplan_findnetplan","text":"const morapi_DnnNetPlan * morapi_DnnPlan_findNetPlan (const morapi_DnnPlan * self, const morapi_DnnNet * i_net) Finds the net plan for i_net. Parameters self : the dnn plan object i_net : the dnn net Returns the net plan for i_net","title":"morapi_DnnPlan_findNetPlan()"},{"location":"structmorapi__DnnPlan.html#morapi_dnnplan_findlayerplan","text":"const morapi_DnnLayerPlan * morapi_DnnPlan_findLayerPlan (const morapi_DnnPlan * self, const morapi_DnnLayer * i_layer) Finds the layer plan for i_layer. Parameters self : the dnn plan object i_layer : the dnn layer Returns the layer plan for i_layer","title":"morapi_DnnPlan_findLayerPlan()"},{"location":"structmorapi__DnnPlan.html#morapi_dnnplan_getusec","text":"morapi_Real morapi_DnnPlan_getUsec (const morapi_DnnPlan * self) Gets the forward time (usec). Parameters self : the dnn plan object Returns the forward time [usec]","title":"morapi_DnnPlan_getUsec()"},{"location":"structmorapi__DnnProf.html","text":"morapi_DnnProf Struct Reference dnn \u00bb prof Dnn profiler and profiling data. More... #include <morapi_softneuro.h> Public Member Functions Primary functions morapi_DnnProf * morapi_create_DnnProf ( morapi_Env *io_env) morapi_Result morapi_destroy_DnnProf ( morapi_Env *io_env, morapi_DnnProf *self) morapi_Result morapi_DnnProf_init ( morapi_DnnProf *self, morapi_Dnn *i_dnn) const morapi_Dnn * morapi_DnnProf_getDnn (const morapi_DnnProf *self) morapi_Bool morapi_DnnProf_canAdd ( morapi_DnnProf *self, const morapi_Char *i_routine, const morapi_DnnLayer *i_layer, morapi_Bool i_is_for_another_device) morapi_Result morapi_DnnProf_add ( morapi_DnnProf *self, const morapi_Char *i_routine, const morapi_DnnLayer *i_layer) morapi_Result morapi_DnnProf_remove ( morapi_DnnProf *self, const morapi_Char *i_routine, const morapi_DnnLayer *i_layer) morapi_Result morapi_DnnProf_reset ( morapi_DnnProf *self, const morapi_Char *i_routine, const morapi_DnnLayer *i_layer) morapi_Result morapi_DnnProf_profile ( morapi_DnnProf *self, morapi_DnnProfProgressedCB i_cbfunc, void *i_cbobj) morapi_Result morapi_DnnProf_save (const morapi_DnnProf *self, const morapi_Char *i_filename, morapi_Bool i_is_ascii) morapi_Result morapi_DnnProf_load ( morapi_DnnProf *self, const morapi_Char *i_filename, const morapi_Char *i_dnn_filename, const void *i_password, morapi_Int32 i_password_len) Optional settings morapi_Bool morapi_DnnProf_isAscii (const morapi_DnnProf *self) morapi_Result morapi_DnnProf_setThreadNum ( morapi_DnnProf *self, morapi_Int32 i_thread_num) morapi_Int32 morapi_DnnProf_getThreadNum (const morapi_DnnProf *self) morapi_Result morapi_DnnProf_setAffinityMask ( morapi_DnnProf *self, morapi_Int32 i_index, const morapi_Char *i_text) morapi_Int32 morapi_DnnProf_getAffinityMaskNum (const morapi_DnnProf *self) const morapi_Char * morapi_DnnProf_getAffinityMask (const morapi_DnnProf *self, morapi_Int32 i_index) morapi_Int32 morapi_DnnProf_getSchemaNum (const morapi_DnnProf *self) const morapi_Char * morapi_DnnProf_getSchema (const morapi_DnnProf *self, morapi_Int32 i_index) morapi_Result morapi_DnnProf_setEstimateMode ( morapi_DnnProf *self, morapi_DnnProfEstimateMode i_estimate_mode) morapi_DnnProfEstimateMode morapi_DnnProf_getEstimateMode (const morapi_DnnProf *self) morapi_Result morapi_DnnProf_setRunNum ( morapi_DnnProf *self, morapi_Int32 i_run_num) morapi_Int32 morapi_DnnProf_getRunNum (const morapi_DnnProf *self) morapi_Result morapi_DnnProf_cancel ( morapi_DnnProf *self) morapi_Bool morapi_DnnProf_isCanceled (const morapi_DnnProf *self) morapi_Bool morapi_DnnProf_isPreparing (const morapi_DnnProf *self) morapi_Real morapi_DnnProf_getProgress (const morapi_DnnProf *self) morapi_Real morapi_DnnProf_getElapsedSec (const morapi_DnnProf *self) Detailed Description Dnn profiler and profiling data. test_prof_api.c . Member Function Documentation morapi_create_DnnProf() morapi_DnnProf * morapi_create_DnnProf ( morapi_Env * io_env) Creates a profiler. Parameters io_env : environment object test_prof_api.c . morapi_destroy_DnnProf() morapi_Result morapi_destroy_DnnProf ( morapi_Env * io_env, morapi_DnnProf * self) Destroys the profiler. Parameters io_env : environment object that used to create the profiler object self : the profiler object to destroy test_prof_api.c . morapi_DnnProf_init() morapi_Result morapi_DnnProf_init ( morapi_DnnProf * self, morapi_Dnn * i_dnn) Initializes profiling data with a dnn. Parameters self : the dnn profiler i_dnn : the dnn object to be profiled test_prof_api.c . morapi_DnnProf_getDnn() const morapi_Dnn * morapi_DnnProf_getDnn (const morapi_DnnProf * self) Gets the dnn that the DnnProf works on. Parameters self : the dnn profiler Returns the dnn morapi_DnnProf_canAdd() morapi_Bool morapi_DnnProf_canAdd ( morapi_DnnProf * self, const morapi_Char * i_routine, const morapi_DnnLayer * i_layer, morapi_Bool i_is_for_another_device) Checks whether a profiling routine can be added to a layer. Parameters self : the dnn profiler. i_routine : the profiling routine. i_layer : the layer to which the profiling routine is added. If NULL is given, checks whether the profiling routine can be added to any of layers in a main net. i_is_for_another_device : whether the profiling routine is for another device or not. morapi_DnnProf_add() morapi_Result morapi_DnnProf_add ( morapi_DnnProf * self, const morapi_Char * i_routine, const morapi_DnnLayer * i_layer) Adds a profiling routine to a layer. Parameters self : the dnn profiler. i_routine : the profiling routine. i_layer : the layer to which the profiling routine is added. If NULL is given, the profiling routine is added to all layers in a main net. test_prof_api.c . morapi_DnnProf_remove() morapi_Result morapi_DnnProf_remove ( morapi_DnnProf * self, const morapi_Char * i_routine, const morapi_DnnLayer * i_layer) Removes a profiling routine from a layer. Parameters self : the dnn profiler. i_routine : the profiling routine. If NULL or an empty string (\"\") is given, all profiling routines are removed from the layer. i_layer : the layer from which the profiling routine is removed. If NULL is given, the profiling routine is removed from all layers. morapi_DnnProf_reset() morapi_Result morapi_DnnProf_reset ( morapi_DnnProf * self, const morapi_Char * i_routine, const morapi_DnnLayer * i_layer) Resets profiling data. It clears measured processing time for a profiling routine in a layer. Parameters self : the dnn profiler. i_routine : the profiling routine to be reset. If NULL or an empty string (\"\") is given, all profiling routines are reset. i_layer : the layer to be reset. If NULL is given, the routines in all layers are reset. morapi_DnnProf_profile() morapi_Result morapi_DnnProf_profile ( morapi_DnnProf * self, morapi_DnnProfProgressedCB i_cbfunc, void * i_cbobj) Runs profiling with a callback function for progress. Parameters self : the dnn profiler i_cbfunc : a callback function for reporting progress i_cbobj : an argument for the callback function test_prof_api.c . morapi_DnnProf_save() morapi_Result morapi_DnnProf_save (const morapi_DnnProf * self, const morapi_Char * i_filename, morapi_Bool i_is_ascii) Saves the profiling data to a file. Parameters self : the dnn profiler i_filename : a file name to save the profiling data i_is_ascii : a boolean. Specify true to save the profiling data as ASCII. morapi_DnnProf_load() morapi_Result morapi_DnnProf_load ( morapi_DnnProf * self, const morapi_Char * i_filename, const morapi_Char * i_dnn_filename, const void * i_password, morapi_Int32 i_password_len) Loads a profiling data from a file. Parameters self : the dnn profiler i_filename : a file name for the profiling data i_dnn_filename : a file name for dnn file used for profiling i_password : a password string for the profiling data i_password_len : the length of the i_password string. morapi_DnnProf_isAscii() morapi_Bool morapi_DnnProf_isAscii (const morapi_DnnProf * self) Returns whether self is saved in ascii format or not. Parameters self : the dnn profiler Returns whether self is saved in ascii format or not morapi_DnnProf_setThreadNum() morapi_Result morapi_DnnProf_setThreadNum ( morapi_DnnProf * self, morapi_Int32 i_thread_num) Sets the number of threads. It resets all profiling data and clears all affinity masks. Parameters self : the dnn profiler i_thread_num : the number of threads to use for profiling morapi_DnnProf_getThreadNum() morapi_Int32 morapi_DnnProf_getThreadNum (const morapi_DnnProf * self) Gets the number of threads. Parameters self : the dnn profiler Returns the number of threads morapi_DnnProf_setAffinityMask() morapi_Result morapi_DnnProf_setAffinityMask ( morapi_DnnProf * self, morapi_Int32 i_index, const morapi_Char * i_text) Sets the i_index-th affinity mask. It resets all profiling data. Parameters self : the dnn profiler i_index : the index of the affinity mask i_text : the text-based affinity mask (Hex, Bin, Dec are available) morapi_DnnProf_getAffinityMaskNum() morapi_Int32 morapi_DnnProf_getAffinityMaskNum (const morapi_DnnProf * self) Gets the number of affinity masks. Parameters self : the dnn profiler Returns the number of affinity masks morapi_DnnProf_getAffinityMask() const morapi_Char * morapi_DnnProf_getAffinityMask (const morapi_DnnProf * self, morapi_Int32 i_index) Gets the i_idnex-th affinity mask. Parameters self : the dnn profiler i_index : the index for affinity mask of the interest Returns the text-based affinity mask morapi_DnnProf_getSchemaNum() morapi_Int32 morapi_DnnProf_getSchemaNum (const morapi_DnnProf * self) Gets the number of schemas to be profiled. Parameters self : the dnn profiler Returns the number of schemas to be profiled morapi_DnnProf_getSchema() const morapi_Char * morapi_DnnProf_getSchema (const morapi_DnnProf * self, morapi_Int32 i_index) Gets the i_index-th schema to be profiled. Parameters self : the dnn profiler i_index : the index of schemas in the profiler Returns the i_index-th schema to be profiled morapi_DnnProf_setEstimateMode() morapi_Result morapi_DnnProf_setEstimateMode ( morapi_DnnProf * self, morapi_DnnProfEstimateMode i_estimate_mode) Sets the estimation mode of profiling data. Parameters self : the dnn profiler i_estimate_mode : the estimation mode by morapi_DnnProfEstimateMode enumeration morapi_DnnProf_getEstimateMode() morapi_DnnProfEstimateMode morapi_DnnProf_getEstimateMode (const morapi_DnnProf * self) Gets the estimation mode of profiling data. Parameters self : the dnn profiler Returns the estimation mode of profiling data morapi_DnnProf_setRunNum() morapi_Result morapi_DnnProf_setRunNum ( morapi_DnnProf * self, morapi_Int32 i_run_num) Sets the number of iterations when profiling a routine. The default is 10. Parameters self : the dnn profiler i_run_num : the number of iterations to profile a single routine morapi_DnnProf_getRunNum() morapi_Int32 morapi_DnnProf_getRunNum (const morapi_DnnProf * self) Gets the number of iterations when profiling a routine. The default is 10. Parameters self : the dnn profiler Returns the number of iterations morapi_DnnProf_cancel() morapi_Result morapi_DnnProf_cancel ( morapi_DnnProf * self) Cancels profiling. Parameters self : the profiler object morapi_DnnProf_isCanceled() morapi_Bool morapi_DnnProf_isCanceled (const morapi_DnnProf * self) Returns whether self is canceled or not. Parameters self : the profiler object Returns whether profiling is canceled or not morapi_DnnProf_isPreparing() morapi_Bool morapi_DnnProf_isPreparing (const morapi_DnnProf * self) Returns whether preparing or not. Parameters self : the profiler object Returns whether profiler is preparing or not morapi_DnnProf_getProgress() morapi_Real morapi_DnnProf_getProgress (const morapi_DnnProf * self) Gets the progress of profiling process. Parameters self : the profiler object Returns Progress rate between 0 and 1. test_prof_api.c . morapi_DnnProf_getElapsedSec() morapi_Real morapi_DnnProf_getElapsedSec (const morapi_DnnProf * self) Gets the elapsed sec. Parameters self : the profiler object Returns the elapsed time [sec]","title":"morapi_DnnProf"},{"location":"structmorapi__DnnProf.html#morapi_dnnprof-struct-reference","text":"dnn \u00bb prof Dnn profiler and profiling data. More... #include <morapi_softneuro.h>","title":"morapi_DnnProf Struct Reference"},{"location":"structmorapi__DnnProf.html#public-member-functions","text":"","title":"Public Member Functions"},{"location":"structmorapi__DnnProf.html#primary-functions","text":"morapi_DnnProf * morapi_create_DnnProf ( morapi_Env *io_env) morapi_Result morapi_destroy_DnnProf ( morapi_Env *io_env, morapi_DnnProf *self) morapi_Result morapi_DnnProf_init ( morapi_DnnProf *self, morapi_Dnn *i_dnn) const morapi_Dnn * morapi_DnnProf_getDnn (const morapi_DnnProf *self) morapi_Bool morapi_DnnProf_canAdd ( morapi_DnnProf *self, const morapi_Char *i_routine, const morapi_DnnLayer *i_layer, morapi_Bool i_is_for_another_device) morapi_Result morapi_DnnProf_add ( morapi_DnnProf *self, const morapi_Char *i_routine, const morapi_DnnLayer *i_layer) morapi_Result morapi_DnnProf_remove ( morapi_DnnProf *self, const morapi_Char *i_routine, const morapi_DnnLayer *i_layer) morapi_Result morapi_DnnProf_reset ( morapi_DnnProf *self, const morapi_Char *i_routine, const morapi_DnnLayer *i_layer) morapi_Result morapi_DnnProf_profile ( morapi_DnnProf *self, morapi_DnnProfProgressedCB i_cbfunc, void *i_cbobj) morapi_Result morapi_DnnProf_save (const morapi_DnnProf *self, const morapi_Char *i_filename, morapi_Bool i_is_ascii) morapi_Result morapi_DnnProf_load ( morapi_DnnProf *self, const morapi_Char *i_filename, const morapi_Char *i_dnn_filename, const void *i_password, morapi_Int32 i_password_len)","title":"Primary functions"},{"location":"structmorapi__DnnProf.html#optional-settings","text":"morapi_Bool morapi_DnnProf_isAscii (const morapi_DnnProf *self) morapi_Result morapi_DnnProf_setThreadNum ( morapi_DnnProf *self, morapi_Int32 i_thread_num) morapi_Int32 morapi_DnnProf_getThreadNum (const morapi_DnnProf *self) morapi_Result morapi_DnnProf_setAffinityMask ( morapi_DnnProf *self, morapi_Int32 i_index, const morapi_Char *i_text) morapi_Int32 morapi_DnnProf_getAffinityMaskNum (const morapi_DnnProf *self) const morapi_Char * morapi_DnnProf_getAffinityMask (const morapi_DnnProf *self, morapi_Int32 i_index) morapi_Int32 morapi_DnnProf_getSchemaNum (const morapi_DnnProf *self) const morapi_Char * morapi_DnnProf_getSchema (const morapi_DnnProf *self, morapi_Int32 i_index) morapi_Result morapi_DnnProf_setEstimateMode ( morapi_DnnProf *self, morapi_DnnProfEstimateMode i_estimate_mode) morapi_DnnProfEstimateMode morapi_DnnProf_getEstimateMode (const morapi_DnnProf *self) morapi_Result morapi_DnnProf_setRunNum ( morapi_DnnProf *self, morapi_Int32 i_run_num) morapi_Int32 morapi_DnnProf_getRunNum (const morapi_DnnProf *self) morapi_Result morapi_DnnProf_cancel ( morapi_DnnProf *self) morapi_Bool morapi_DnnProf_isCanceled (const morapi_DnnProf *self) morapi_Bool morapi_DnnProf_isPreparing (const morapi_DnnProf *self) morapi_Real morapi_DnnProf_getProgress (const morapi_DnnProf *self) morapi_Real morapi_DnnProf_getElapsedSec (const morapi_DnnProf *self)","title":"Optional settings"},{"location":"structmorapi__DnnProf.html#detailed-description","text":"Dnn profiler and profiling data. test_prof_api.c .","title":"Detailed Description"},{"location":"structmorapi__DnnProf.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__DnnProf.html#morapi_create_dnnprof","text":"morapi_DnnProf * morapi_create_DnnProf ( morapi_Env * io_env) Creates a profiler. Parameters io_env : environment object test_prof_api.c .","title":"morapi_create_DnnProf()"},{"location":"structmorapi__DnnProf.html#morapi_destroy_dnnprof","text":"morapi_Result morapi_destroy_DnnProf ( morapi_Env * io_env, morapi_DnnProf * self) Destroys the profiler. Parameters io_env : environment object that used to create the profiler object self : the profiler object to destroy test_prof_api.c .","title":"morapi_destroy_DnnProf()"},{"location":"structmorapi__DnnProf.html#morapi_dnnprof_init","text":"morapi_Result morapi_DnnProf_init ( morapi_DnnProf * self, morapi_Dnn * i_dnn) Initializes profiling data with a dnn. Parameters self : the dnn profiler i_dnn : the dnn object to be profiled test_prof_api.c .","title":"morapi_DnnProf_init()"},{"location":"structmorapi__DnnProf.html#morapi_dnnprof_getdnn","text":"const morapi_Dnn * morapi_DnnProf_getDnn (const morapi_DnnProf * self) Gets the dnn that the DnnProf works on. Parameters self : the dnn profiler Returns the dnn","title":"morapi_DnnProf_getDnn()"},{"location":"structmorapi__DnnProf.html#morapi_dnnprof_canadd","text":"morapi_Bool morapi_DnnProf_canAdd ( morapi_DnnProf * self, const morapi_Char * i_routine, const morapi_DnnLayer * i_layer, morapi_Bool i_is_for_another_device) Checks whether a profiling routine can be added to a layer. Parameters self : the dnn profiler. i_routine : the profiling routine. i_layer : the layer to which the profiling routine is added. If NULL is given, checks whether the profiling routine can be added to any of layers in a main net. i_is_for_another_device : whether the profiling routine is for another device or not.","title":"morapi_DnnProf_canAdd()"},{"location":"structmorapi__DnnProf.html#morapi_dnnprof_add","text":"morapi_Result morapi_DnnProf_add ( morapi_DnnProf * self, const morapi_Char * i_routine, const morapi_DnnLayer * i_layer) Adds a profiling routine to a layer. Parameters self : the dnn profiler. i_routine : the profiling routine. i_layer : the layer to which the profiling routine is added. If NULL is given, the profiling routine is added to all layers in a main net. test_prof_api.c .","title":"morapi_DnnProf_add()"},{"location":"structmorapi__DnnProf.html#morapi_dnnprof_remove","text":"morapi_Result morapi_DnnProf_remove ( morapi_DnnProf * self, const morapi_Char * i_routine, const morapi_DnnLayer * i_layer) Removes a profiling routine from a layer. Parameters self : the dnn profiler. i_routine : the profiling routine. If NULL or an empty string (\"\") is given, all profiling routines are removed from the layer. i_layer : the layer from which the profiling routine is removed. If NULL is given, the profiling routine is removed from all layers.","title":"morapi_DnnProf_remove()"},{"location":"structmorapi__DnnProf.html#morapi_dnnprof_reset","text":"morapi_Result morapi_DnnProf_reset ( morapi_DnnProf * self, const morapi_Char * i_routine, const morapi_DnnLayer * i_layer) Resets profiling data. It clears measured processing time for a profiling routine in a layer. Parameters self : the dnn profiler. i_routine : the profiling routine to be reset. If NULL or an empty string (\"\") is given, all profiling routines are reset. i_layer : the layer to be reset. If NULL is given, the routines in all layers are reset.","title":"morapi_DnnProf_reset()"},{"location":"structmorapi__DnnProf.html#morapi_dnnprof_profile","text":"morapi_Result morapi_DnnProf_profile ( morapi_DnnProf * self, morapi_DnnProfProgressedCB i_cbfunc, void * i_cbobj) Runs profiling with a callback function for progress. Parameters self : the dnn profiler i_cbfunc : a callback function for reporting progress i_cbobj : an argument for the callback function test_prof_api.c .","title":"morapi_DnnProf_profile()"},{"location":"structmorapi__DnnProf.html#morapi_dnnprof_save","text":"morapi_Result morapi_DnnProf_save (const morapi_DnnProf * self, const morapi_Char * i_filename, morapi_Bool i_is_ascii) Saves the profiling data to a file. Parameters self : the dnn profiler i_filename : a file name to save the profiling data i_is_ascii : a boolean. Specify true to save the profiling data as ASCII.","title":"morapi_DnnProf_save()"},{"location":"structmorapi__DnnProf.html#morapi_dnnprof_load","text":"morapi_Result morapi_DnnProf_load ( morapi_DnnProf * self, const morapi_Char * i_filename, const morapi_Char * i_dnn_filename, const void * i_password, morapi_Int32 i_password_len) Loads a profiling data from a file. Parameters self : the dnn profiler i_filename : a file name for the profiling data i_dnn_filename : a file name for dnn file used for profiling i_password : a password string for the profiling data i_password_len : the length of the i_password string.","title":"morapi_DnnProf_load()"},{"location":"structmorapi__DnnProf.html#morapi_dnnprof_isascii","text":"morapi_Bool morapi_DnnProf_isAscii (const morapi_DnnProf * self) Returns whether self is saved in ascii format or not. Parameters self : the dnn profiler Returns whether self is saved in ascii format or not","title":"morapi_DnnProf_isAscii()"},{"location":"structmorapi__DnnProf.html#morapi_dnnprof_setthreadnum","text":"morapi_Result morapi_DnnProf_setThreadNum ( morapi_DnnProf * self, morapi_Int32 i_thread_num) Sets the number of threads. It resets all profiling data and clears all affinity masks. Parameters self : the dnn profiler i_thread_num : the number of threads to use for profiling","title":"morapi_DnnProf_setThreadNum()"},{"location":"structmorapi__DnnProf.html#morapi_dnnprof_getthreadnum","text":"morapi_Int32 morapi_DnnProf_getThreadNum (const morapi_DnnProf * self) Gets the number of threads. Parameters self : the dnn profiler Returns the number of threads","title":"morapi_DnnProf_getThreadNum()"},{"location":"structmorapi__DnnProf.html#morapi_dnnprof_setaffinitymask","text":"morapi_Result morapi_DnnProf_setAffinityMask ( morapi_DnnProf * self, morapi_Int32 i_index, const morapi_Char * i_text) Sets the i_index-th affinity mask. It resets all profiling data. Parameters self : the dnn profiler i_index : the index of the affinity mask i_text : the text-based affinity mask (Hex, Bin, Dec are available)","title":"morapi_DnnProf_setAffinityMask()"},{"location":"structmorapi__DnnProf.html#morapi_dnnprof_getaffinitymasknum","text":"morapi_Int32 morapi_DnnProf_getAffinityMaskNum (const morapi_DnnProf * self) Gets the number of affinity masks. Parameters self : the dnn profiler Returns the number of affinity masks","title":"morapi_DnnProf_getAffinityMaskNum()"},{"location":"structmorapi__DnnProf.html#morapi_dnnprof_getaffinitymask","text":"const morapi_Char * morapi_DnnProf_getAffinityMask (const morapi_DnnProf * self, morapi_Int32 i_index) Gets the i_idnex-th affinity mask. Parameters self : the dnn profiler i_index : the index for affinity mask of the interest Returns the text-based affinity mask","title":"morapi_DnnProf_getAffinityMask()"},{"location":"structmorapi__DnnProf.html#morapi_dnnprof_getschemanum","text":"morapi_Int32 morapi_DnnProf_getSchemaNum (const morapi_DnnProf * self) Gets the number of schemas to be profiled. Parameters self : the dnn profiler Returns the number of schemas to be profiled","title":"morapi_DnnProf_getSchemaNum()"},{"location":"structmorapi__DnnProf.html#morapi_dnnprof_getschema","text":"const morapi_Char * morapi_DnnProf_getSchema (const morapi_DnnProf * self, morapi_Int32 i_index) Gets the i_index-th schema to be profiled. Parameters self : the dnn profiler i_index : the index of schemas in the profiler Returns the i_index-th schema to be profiled","title":"morapi_DnnProf_getSchema()"},{"location":"structmorapi__DnnProf.html#morapi_dnnprof_setestimatemode","text":"morapi_Result morapi_DnnProf_setEstimateMode ( morapi_DnnProf * self, morapi_DnnProfEstimateMode i_estimate_mode) Sets the estimation mode of profiling data. Parameters self : the dnn profiler i_estimate_mode : the estimation mode by morapi_DnnProfEstimateMode enumeration","title":"morapi_DnnProf_setEstimateMode()"},{"location":"structmorapi__DnnProf.html#morapi_dnnprof_getestimatemode","text":"morapi_DnnProfEstimateMode morapi_DnnProf_getEstimateMode (const morapi_DnnProf * self) Gets the estimation mode of profiling data. Parameters self : the dnn profiler Returns the estimation mode of profiling data","title":"morapi_DnnProf_getEstimateMode()"},{"location":"structmorapi__DnnProf.html#morapi_dnnprof_setrunnum","text":"morapi_Result morapi_DnnProf_setRunNum ( morapi_DnnProf * self, morapi_Int32 i_run_num) Sets the number of iterations when profiling a routine. The default is 10. Parameters self : the dnn profiler i_run_num : the number of iterations to profile a single routine","title":"morapi_DnnProf_setRunNum()"},{"location":"structmorapi__DnnProf.html#morapi_dnnprof_getrunnum","text":"morapi_Int32 morapi_DnnProf_getRunNum (const morapi_DnnProf * self) Gets the number of iterations when profiling a routine. The default is 10. Parameters self : the dnn profiler Returns the number of iterations","title":"morapi_DnnProf_getRunNum()"},{"location":"structmorapi__DnnProf.html#morapi_dnnprof_cancel","text":"morapi_Result morapi_DnnProf_cancel ( morapi_DnnProf * self) Cancels profiling. Parameters self : the profiler object","title":"morapi_DnnProf_cancel()"},{"location":"structmorapi__DnnProf.html#morapi_dnnprof_iscanceled","text":"morapi_Bool morapi_DnnProf_isCanceled (const morapi_DnnProf * self) Returns whether self is canceled or not. Parameters self : the profiler object Returns whether profiling is canceled or not","title":"morapi_DnnProf_isCanceled()"},{"location":"structmorapi__DnnProf.html#morapi_dnnprof_ispreparing","text":"morapi_Bool morapi_DnnProf_isPreparing (const morapi_DnnProf * self) Returns whether preparing or not. Parameters self : the profiler object Returns whether profiler is preparing or not","title":"morapi_DnnProf_isPreparing()"},{"location":"structmorapi__DnnProf.html#morapi_dnnprof_getprogress","text":"morapi_Real morapi_DnnProf_getProgress (const morapi_DnnProf * self) Gets the progress of profiling process. Parameters self : the profiler object Returns Progress rate between 0 and 1. test_prof_api.c .","title":"morapi_DnnProf_getProgress()"},{"location":"structmorapi__DnnProf.html#morapi_dnnprof_getelapsedsec","text":"morapi_Real morapi_DnnProf_getElapsedSec (const morapi_DnnProf * self) Gets the elapsed sec. Parameters self : the profiler object Returns the elapsed time [sec]","title":"morapi_DnnProf_getElapsedSec()"},{"location":"structmorapi__DnnRecipe.html","text":"morapi_DnnRecipe Struct Reference dnn \u00bb prof Recipe for dnn tuning. More... #include <morapi_softneuro.h> Public Member Functions morapi_DnnRecipe * morapi_create_DnnRecipe ( morapi_Env *io_env) morapi_Result morapi_destroy_DnnRecipe ( morapi_Env *io_env, morapi_DnnRecipe *self) morapi_Result morapi_DnnRecipe_init ( morapi_DnnRecipe *self, const morapi_DnnPlan *i_plan) const morapi_Params * morapi_DnnRecipe_getParams (const morapi_DnnRecipe *self) morapi_Result morapi_DnnRecipe_strip ( morapi_DnnRecipe *self) morapi_Bool morapi_DnnRecipe_isStripped (const morapi_DnnRecipe *self) morapi_Result morapi_DnnRecipe_save (const morapi_DnnRecipe *self, const morapi_Char *i_filename) morapi_Result morapi_DnnRecipe_load ( morapi_DnnRecipe *self, const morapi_Char *i_filename, const void *i_password, morapi_Int32 i_password_size) morapi_Result morapi_DnnRecipe_setBinaryLibEmbedded ( morapi_DnnRecipe *self, morapi_Bool i_is_embedded) morapi_Bool morapi_DnnRecipe_isBinaryLibEmbedded (const morapi_DnnRecipe *self) Detailed Description Recipe for dnn tuning. test_prof_api.c . Member Function Documentation morapi_create_DnnRecipe() morapi_DnnRecipe * morapi_create_DnnRecipe ( morapi_Env * io_env) Creates a recipe. test_prof_api.c . morapi_destroy_DnnRecipe() morapi_Result morapi_destroy_DnnRecipe ( morapi_Env * io_env, morapi_DnnRecipe * self) Destroys the recipe. test_prof_api.c . morapi_DnnRecipe_init() morapi_Result morapi_DnnRecipe_init ( morapi_DnnRecipe * self, const morapi_DnnPlan * i_plan) Initializes the tuning recipe from the plan i_plan. Parameters self : the DnnRecipe object i_plan : a object composing the recipe test_prof_api.c . morapi_DnnRecipe_getParams() const morapi_Params * morapi_DnnRecipe_getParams (const morapi_DnnRecipe * self) Gets the tuning parameters. Parameters self : the recipe object Returns the tuning parameters morapi_DnnRecipe_strip() morapi_Result morapi_DnnRecipe_strip ( morapi_DnnRecipe * self) Strips the dnn recipe. The stripped recipe is only available for tuning on a target device. After calling this, save the stripped recipe as a file by morapi_DnnRecipe_save() . Parameters self : the recipe object test_prof_api.c . morapi_DnnRecipe_isStripped() morapi_Bool morapi_DnnRecipe_isStripped (const morapi_DnnRecipe * self) Returns whether self is stripped or not. Parameters self : the recipe object Returns whether self is stripped or not morapi_DnnRecipe_save() morapi_Result morapi_DnnRecipe_save (const morapi_DnnRecipe * self, const morapi_Char * i_filename) Writes the recipe to a file. Execute this function after morapi_DnnRecipe_strip() . Parameters self : the recipe object i_filename : filen name for the resulted recipe file test_prof_api.c . morapi_DnnRecipe_load() morapi_Result morapi_DnnRecipe_load ( morapi_DnnRecipe * self, const morapi_Char * i_filename, const void * i_password, morapi_Int32 i_password_size) Reads the dnn recipe from a file. Parameters self : the recipe object i_filename : the file name of the recipe i_password : the password for the encrypted file i_password_size : the length of the i_password string morapi_DnnRecipe_setBinaryLibEmbedded() morapi_Result morapi_DnnRecipe_setBinaryLibEmbedded ( morapi_DnnRecipe * self, morapi_Bool i_is_embedded) Sets whether the binary lib is embedded when serialization. Parameters self : the recipe object. i_is_embedded : whether the binary lib is embedded or not. morapi_DnnRecipe_isBinaryLibEmbedded() morapi_Bool morapi_DnnRecipe_isBinaryLibEmbedded (const morapi_DnnRecipe * self) Checks whether the binary lib is embedded when serialization.","title":"morapi_DnnRecipe"},{"location":"structmorapi__DnnRecipe.html#morapi_dnnrecipe-struct-reference","text":"dnn \u00bb prof Recipe for dnn tuning. More... #include <morapi_softneuro.h>","title":"morapi_DnnRecipe Struct Reference"},{"location":"structmorapi__DnnRecipe.html#public-member-functions","text":"morapi_DnnRecipe * morapi_create_DnnRecipe ( morapi_Env *io_env) morapi_Result morapi_destroy_DnnRecipe ( morapi_Env *io_env, morapi_DnnRecipe *self) morapi_Result morapi_DnnRecipe_init ( morapi_DnnRecipe *self, const morapi_DnnPlan *i_plan) const morapi_Params * morapi_DnnRecipe_getParams (const morapi_DnnRecipe *self) morapi_Result morapi_DnnRecipe_strip ( morapi_DnnRecipe *self) morapi_Bool morapi_DnnRecipe_isStripped (const morapi_DnnRecipe *self) morapi_Result morapi_DnnRecipe_save (const morapi_DnnRecipe *self, const morapi_Char *i_filename) morapi_Result morapi_DnnRecipe_load ( morapi_DnnRecipe *self, const morapi_Char *i_filename, const void *i_password, morapi_Int32 i_password_size) morapi_Result morapi_DnnRecipe_setBinaryLibEmbedded ( morapi_DnnRecipe *self, morapi_Bool i_is_embedded) morapi_Bool morapi_DnnRecipe_isBinaryLibEmbedded (const morapi_DnnRecipe *self)","title":"Public Member Functions"},{"location":"structmorapi__DnnRecipe.html#detailed-description","text":"Recipe for dnn tuning. test_prof_api.c .","title":"Detailed Description"},{"location":"structmorapi__DnnRecipe.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__DnnRecipe.html#morapi_create_dnnrecipe","text":"morapi_DnnRecipe * morapi_create_DnnRecipe ( morapi_Env * io_env) Creates a recipe. test_prof_api.c .","title":"morapi_create_DnnRecipe()"},{"location":"structmorapi__DnnRecipe.html#morapi_destroy_dnnrecipe","text":"morapi_Result morapi_destroy_DnnRecipe ( morapi_Env * io_env, morapi_DnnRecipe * self) Destroys the recipe. test_prof_api.c .","title":"morapi_destroy_DnnRecipe()"},{"location":"structmorapi__DnnRecipe.html#morapi_dnnrecipe_init","text":"morapi_Result morapi_DnnRecipe_init ( morapi_DnnRecipe * self, const morapi_DnnPlan * i_plan) Initializes the tuning recipe from the plan i_plan. Parameters self : the DnnRecipe object i_plan : a object composing the recipe test_prof_api.c .","title":"morapi_DnnRecipe_init()"},{"location":"structmorapi__DnnRecipe.html#morapi_dnnrecipe_getparams","text":"const morapi_Params * morapi_DnnRecipe_getParams (const morapi_DnnRecipe * self) Gets the tuning parameters. Parameters self : the recipe object Returns the tuning parameters","title":"morapi_DnnRecipe_getParams()"},{"location":"structmorapi__DnnRecipe.html#morapi_dnnrecipe_strip","text":"morapi_Result morapi_DnnRecipe_strip ( morapi_DnnRecipe * self) Strips the dnn recipe. The stripped recipe is only available for tuning on a target device. After calling this, save the stripped recipe as a file by morapi_DnnRecipe_save() . Parameters self : the recipe object test_prof_api.c .","title":"morapi_DnnRecipe_strip()"},{"location":"structmorapi__DnnRecipe.html#morapi_dnnrecipe_isstripped","text":"morapi_Bool morapi_DnnRecipe_isStripped (const morapi_DnnRecipe * self) Returns whether self is stripped or not. Parameters self : the recipe object Returns whether self is stripped or not","title":"morapi_DnnRecipe_isStripped()"},{"location":"structmorapi__DnnRecipe.html#morapi_dnnrecipe_save","text":"morapi_Result morapi_DnnRecipe_save (const morapi_DnnRecipe * self, const morapi_Char * i_filename) Writes the recipe to a file. Execute this function after morapi_DnnRecipe_strip() . Parameters self : the recipe object i_filename : filen name for the resulted recipe file test_prof_api.c .","title":"morapi_DnnRecipe_save()"},{"location":"structmorapi__DnnRecipe.html#morapi_dnnrecipe_load","text":"morapi_Result morapi_DnnRecipe_load ( morapi_DnnRecipe * self, const morapi_Char * i_filename, const void * i_password, morapi_Int32 i_password_size) Reads the dnn recipe from a file. Parameters self : the recipe object i_filename : the file name of the recipe i_password : the password for the encrypted file i_password_size : the length of the i_password string","title":"morapi_DnnRecipe_load()"},{"location":"structmorapi__DnnRecipe.html#morapi_dnnrecipe_setbinarylibembedded","text":"morapi_Result morapi_DnnRecipe_setBinaryLibEmbedded ( morapi_DnnRecipe * self, morapi_Bool i_is_embedded) Sets whether the binary lib is embedded when serialization. Parameters self : the recipe object. i_is_embedded : whether the binary lib is embedded or not.","title":"morapi_DnnRecipe_setBinaryLibEmbedded()"},{"location":"structmorapi__DnnRecipe.html#morapi_dnnrecipe_isbinarylibembedded","text":"morapi_Bool morapi_DnnRecipe_isBinaryLibEmbedded (const morapi_DnnRecipe * self) Checks whether the binary lib is embedded when serialization.","title":"morapi_DnnRecipe_isBinaryLibEmbedded()"},{"location":"structmorapi__DnnRoutine.html","text":"morapi_DnnRoutine Struct Reference dnn Dnn routine. More... #include <morapi_softneuro.h> Public Member Functions morapi_DnnLayer * morapi_DnnRoutine_getLayer (const morapi_DnnRoutine *self) morapi_DnnNet * morapi_DnnRoutine_enableChildNet ( morapi_DnnRoutine *self) const morapi_Device * morapi_DnnRoutine_getDevice (const morapi_DnnRoutine *self) morapi_DType morapi_DnnRoutine_getDType (const morapi_DnnRoutine *self) morapi_DnnChannel morapi_DnnRoutine_getChannel (const morapi_DnnRoutine *self) morapi_DnnRoutineLevel morapi_DnnRoutine_getLevel (const morapi_DnnRoutine *self) const morapi_Char * morapi_DnnRoutine_getAux (const morapi_DnnRoutine *self) const morapi_Params * morapi_DnnRoutine_getParams (const morapi_DnnRoutine *self) morapi_BinaryLib * morapi_DnnRoutine_getBinaryLib (const morapi_DnnRoutine *self) morapi_Bool morapi_DnnRoutine_isProfiling (const morapi_DnnRoutine *self) morapi_Bool morapi_DnnRoutine_isDumping (const morapi_DnnRoutine *self) Related Functions morapi_Int32 morapi_Dnn_static_getRoutineDescNum ( morapi_Env *env, const morapi_Char *i_layer_type) const morapi_Char ** morapi_Dnn_static_getRoutineDescs ( morapi_Env *env, const morapi_Char *i_layer_type) const morapi_Char * morapi_Dnn_static_getRoutineParamsRecipe ( morapi_Env *env, const morapi_Char *i_layer_type, const morapi_Char *i_routine_desc) Detailed Description Dnn routine. Member Function Documentation morapi_DnnRoutine_getLayer() morapi_DnnLayer * morapi_DnnRoutine_getLayer (const morapi_DnnRoutine * self) Gets the layer. Parameters self : routine object morapi_DnnRoutine_enableChildNet() morapi_DnnNet * morapi_DnnRoutine_enableChildNet ( morapi_DnnRoutine * self) Adds the child layer. Parameters self : routine object morapi_DnnRoutine_getDevice() const morapi_Device * morapi_DnnRoutine_getDevice (const morapi_DnnRoutine * self) Gets the device. Parameters self : routine object morapi_DnnRoutine_getDType() morapi_DType morapi_DnnRoutine_getDType (const morapi_DnnRoutine * self) Gets the data type. Parameters self : routine object morapi_DnnRoutine_getChannel() morapi_DnnChannel morapi_DnnRoutine_getChannel (const morapi_DnnRoutine * self) Gets the channel. Parameters self : routine object morapi_DnnRoutine_getLevel() morapi_DnnRoutineLevel morapi_DnnRoutine_getLevel (const morapi_DnnRoutine * self) Gets the level. Parameters self : routine object morapi_DnnRoutine_getAux() const morapi_Char * morapi_DnnRoutine_getAux (const morapi_DnnRoutine * self) Gets the auxiliary information. Parameters self : routine object morapi_DnnRoutine_getParams() const morapi_Params * morapi_DnnRoutine_getParams (const morapi_DnnRoutine * self) Gets the parameters. Parameters self : routine object morapi_DnnRoutine_getBinaryLib() morapi_BinaryLib * morapi_DnnRoutine_getBinaryLib (const morapi_DnnRoutine * self) Gets the binary library. Parameters self : routine object morapi_DnnRoutine_isProfiling() morapi_Bool morapi_DnnRoutine_isProfiling (const morapi_DnnRoutine * self) Returns whether profiling or not. Parameters self : routine object morapi_DnnRoutine_isDumping() morapi_Bool morapi_DnnRoutine_isDumping (const morapi_DnnRoutine * self) Returns whether dumping data or not. Parameters self : routine object Friends And Related Function Documentation morapi_Dnn_static_getRoutineDescNum() morapi_Int32 morapi_Dnn_static_getRoutineDescNum ( morapi_Env * env, const morapi_Char * i_layer_type) Gets the number of installed routine descriptors for i_layer_type. Parameters env : environment where the routines are installed i_layer_type : layer type morapi_Dnn_static_getRoutineDescs() const morapi_Char ** morapi_Dnn_static_getRoutineDescs ( morapi_Env * env, const morapi_Char * i_layer_type) Gets the installed routine descriptors for i_layer_type. Parameters env : environment where the routines are installed i_layer_type : layer type morapi_Dnn_static_getRoutineParamsRecipe() const morapi_Char * morapi_Dnn_static_getRoutineParamsRecipe ( morapi_Env * env, const morapi_Char * i_layer_type, const morapi_Char * i_routine_desc) Gets the recipe of routine parameters. Parameters env : environment where the routines are installed i_layer_type : layer type i_routine_desc : routine desc","title":"morapi_DnnRoutine"},{"location":"structmorapi__DnnRoutine.html#morapi_dnnroutine-struct-reference","text":"dnn Dnn routine. More... #include <morapi_softneuro.h>","title":"morapi_DnnRoutine Struct Reference"},{"location":"structmorapi__DnnRoutine.html#public-member-functions","text":"morapi_DnnLayer * morapi_DnnRoutine_getLayer (const morapi_DnnRoutine *self) morapi_DnnNet * morapi_DnnRoutine_enableChildNet ( morapi_DnnRoutine *self) const morapi_Device * morapi_DnnRoutine_getDevice (const morapi_DnnRoutine *self) morapi_DType morapi_DnnRoutine_getDType (const morapi_DnnRoutine *self) morapi_DnnChannel morapi_DnnRoutine_getChannel (const morapi_DnnRoutine *self) morapi_DnnRoutineLevel morapi_DnnRoutine_getLevel (const morapi_DnnRoutine *self) const morapi_Char * morapi_DnnRoutine_getAux (const morapi_DnnRoutine *self) const morapi_Params * morapi_DnnRoutine_getParams (const morapi_DnnRoutine *self) morapi_BinaryLib * morapi_DnnRoutine_getBinaryLib (const morapi_DnnRoutine *self) morapi_Bool morapi_DnnRoutine_isProfiling (const morapi_DnnRoutine *self) morapi_Bool morapi_DnnRoutine_isDumping (const morapi_DnnRoutine *self)","title":"Public Member Functions"},{"location":"structmorapi__DnnRoutine.html#related-functions","text":"morapi_Int32 morapi_Dnn_static_getRoutineDescNum ( morapi_Env *env, const morapi_Char *i_layer_type) const morapi_Char ** morapi_Dnn_static_getRoutineDescs ( morapi_Env *env, const morapi_Char *i_layer_type) const morapi_Char * morapi_Dnn_static_getRoutineParamsRecipe ( morapi_Env *env, const morapi_Char *i_layer_type, const morapi_Char *i_routine_desc)","title":"Related Functions"},{"location":"structmorapi__DnnRoutine.html#detailed-description","text":"Dnn routine.","title":"Detailed Description"},{"location":"structmorapi__DnnRoutine.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__DnnRoutine.html#morapi_dnnroutine_getlayer","text":"morapi_DnnLayer * morapi_DnnRoutine_getLayer (const morapi_DnnRoutine * self) Gets the layer. Parameters self : routine object","title":"morapi_DnnRoutine_getLayer()"},{"location":"structmorapi__DnnRoutine.html#morapi_dnnroutine_enablechildnet","text":"morapi_DnnNet * morapi_DnnRoutine_enableChildNet ( morapi_DnnRoutine * self) Adds the child layer. Parameters self : routine object","title":"morapi_DnnRoutine_enableChildNet()"},{"location":"structmorapi__DnnRoutine.html#morapi_dnnroutine_getdevice","text":"const morapi_Device * morapi_DnnRoutine_getDevice (const morapi_DnnRoutine * self) Gets the device. Parameters self : routine object","title":"morapi_DnnRoutine_getDevice()"},{"location":"structmorapi__DnnRoutine.html#morapi_dnnroutine_getdtype","text":"morapi_DType morapi_DnnRoutine_getDType (const morapi_DnnRoutine * self) Gets the data type. Parameters self : routine object","title":"morapi_DnnRoutine_getDType()"},{"location":"structmorapi__DnnRoutine.html#morapi_dnnroutine_getchannel","text":"morapi_DnnChannel morapi_DnnRoutine_getChannel (const morapi_DnnRoutine * self) Gets the channel. Parameters self : routine object","title":"morapi_DnnRoutine_getChannel()"},{"location":"structmorapi__DnnRoutine.html#morapi_dnnroutine_getlevel","text":"morapi_DnnRoutineLevel morapi_DnnRoutine_getLevel (const morapi_DnnRoutine * self) Gets the level. Parameters self : routine object","title":"morapi_DnnRoutine_getLevel()"},{"location":"structmorapi__DnnRoutine.html#morapi_dnnroutine_getaux","text":"const morapi_Char * morapi_DnnRoutine_getAux (const morapi_DnnRoutine * self) Gets the auxiliary information. Parameters self : routine object","title":"morapi_DnnRoutine_getAux()"},{"location":"structmorapi__DnnRoutine.html#morapi_dnnroutine_getparams","text":"const morapi_Params * morapi_DnnRoutine_getParams (const morapi_DnnRoutine * self) Gets the parameters. Parameters self : routine object","title":"morapi_DnnRoutine_getParams()"},{"location":"structmorapi__DnnRoutine.html#morapi_dnnroutine_getbinarylib","text":"morapi_BinaryLib * morapi_DnnRoutine_getBinaryLib (const morapi_DnnRoutine * self) Gets the binary library. Parameters self : routine object","title":"morapi_DnnRoutine_getBinaryLib()"},{"location":"structmorapi__DnnRoutine.html#morapi_dnnroutine_isprofiling","text":"morapi_Bool morapi_DnnRoutine_isProfiling (const morapi_DnnRoutine * self) Returns whether profiling or not. Parameters self : routine object","title":"morapi_DnnRoutine_isProfiling()"},{"location":"structmorapi__DnnRoutine.html#morapi_dnnroutine_isdumping","text":"morapi_Bool morapi_DnnRoutine_isDumping (const morapi_DnnRoutine * self) Returns whether dumping data or not. Parameters self : routine object","title":"morapi_DnnRoutine_isDumping()"},{"location":"structmorapi__DnnRoutine.html#friends-and-related-function-documentation","text":"","title":"Friends And Related Function Documentation"},{"location":"structmorapi__DnnRoutine.html#morapi_dnn_static_getroutinedescnum","text":"morapi_Int32 morapi_Dnn_static_getRoutineDescNum ( morapi_Env * env, const morapi_Char * i_layer_type) Gets the number of installed routine descriptors for i_layer_type. Parameters env : environment where the routines are installed i_layer_type : layer type","title":"morapi_Dnn_static_getRoutineDescNum()"},{"location":"structmorapi__DnnRoutine.html#morapi_dnn_static_getroutinedescs","text":"const morapi_Char ** morapi_Dnn_static_getRoutineDescs ( morapi_Env * env, const morapi_Char * i_layer_type) Gets the installed routine descriptors for i_layer_type. Parameters env : environment where the routines are installed i_layer_type : layer type","title":"morapi_Dnn_static_getRoutineDescs()"},{"location":"structmorapi__DnnRoutine.html#morapi_dnn_static_getroutineparamsrecipe","text":"const morapi_Char * morapi_Dnn_static_getRoutineParamsRecipe ( morapi_Env * env, const morapi_Char * i_layer_type, const morapi_Char * i_routine_desc) Gets the recipe of routine parameters. Parameters env : environment where the routines are installed i_layer_type : layer type i_routine_desc : routine desc","title":"morapi_Dnn_static_getRoutineParamsRecipe()"},{"location":"structmorapi__DnnRoutineCB.html","text":"morapi_DnnRoutineCB Struct Reference dnn Callback functions for dnn routine. More... #include <morapi_softneuro.h> Public Types typedef void *(* morapi_Create_DnnRoutineCB ) ( morapi_Env *env) typedef morapi_Result (* morapi_Destroy_DnnRoutineCB ) ( morapi_Env *env, void *self) typedef const morapi_Char *(* morapi_DnnRoutineCB_GetParamsRecipe ) (void *obj) typedef morapi_Result (* morapi_DnnRoutineCB_Init ) (void *obj, morapi_DnnRoutine *io_routine) typedef morapi_Result (* morapi_DnnRoutineCB_Cleanup ) (void *obj) typedef morapi_Result (* morapi_DnnRoutineCB_Compile ) (void *obj, morapi_DnnForward *o_forward) typedef morapi_Result (* morapi_DnnRoutineCB_Reset ) (void *obj) Public Member Functions morapi_Result morapi_DnnRoutineCB_clear ( morapi_DnnRoutine *self) Data Fields morapi_Create_DnnRoutineCB create morapi_Destroy_DnnRoutineCB destroy morapi_DnnRoutineCB_GetParamsRecipe get_params_recipe morapi_DnnRoutineCB_Init init morapi_DnnRoutineCB_Cleanup cleanup morapi_DnnRoutineCB_Compile compile morapi_DnnRoutineCB_Reset reset Detailed Description Callback functions for dnn routine. Member Typedef Documentation morapi_Create_DnnRoutineCB typedef void*(* morapi_Create_DnnRoutineCB) ( morapi_Env *env) Creates a routine object. Parameters env : environment where the object will be created morapi_Destroy_DnnRoutineCB typedef morapi_Result (* morapi_Destroy_DnnRoutineCB) ( morapi_Env *env, void *self) Destroys the routine object. Parameters env : environment where the object was created self : routine object to be destroyed morapi_DnnRoutineCB_GetParamsRecipe typedef const morapi_Char *(* morapi_DnnRoutineCB_GetParamsRecipe) (void *obj) Gets the recipe of routine parameters. Parameters obj : routine object morapi_DnnRoutineCB_Init typedef morapi_Result (* morapi_DnnRoutineCB_Init) (void *obj, morapi_DnnRoutine *io_routine) Initializes the routine object. Parameters obj : routine object io_routine : routine object morapi_DnnRoutineCB_Cleanup typedef morapi_Result (* morapi_DnnRoutineCB_Cleanup) (void *obj) Cleans up the routine object. Parameters obj : routine object morapi_DnnRoutineCB_Compile typedef morapi_Result (* morapi_DnnRoutineCB_Compile) (void *obj, morapi_DnnForward *o_forward) Compiles the routine object. Parameters obj : routine object o_forward : routine forward morapi_DnnRoutineCB_Reset typedef morapi_Result (* morapi_DnnRoutineCB_Reset) (void *obj) Resets the routine object. Parameters obj : routine object Member Function Documentation morapi_DnnRoutineCB_clear() morapi_Result morapi_DnnRoutineCB_clear ( morapi_DnnRoutine * self) Clears the callback functions. Parameters self : routine object Field Documentation create morapi_Create_DnnRoutineCB morapi_DnnRoutineCB::create creates a routine object. destroy morapi_Destroy_DnnRoutineCB morapi_DnnRoutineCB::destroy destroys the routine object. get_params_recipe morapi_DnnRoutineCB_GetParamsRecipe morapi_DnnRoutineCB::get_params_recipe gets the recipe of routine parameters. init morapi_DnnRoutineCB_Init morapi_DnnRoutineCB::init initializes the routine object. cleanup morapi_DnnRoutineCB_Cleanup morapi_DnnRoutineCB::cleanup cleans up the routine object. compile morapi_DnnRoutineCB_Compile morapi_DnnRoutineCB::compile compiles the routine object. reset morapi_DnnRoutineCB_Reset morapi_DnnRoutineCB::reset resets the routine object.","title":"morapi_DnnRoutineCB"},{"location":"structmorapi__DnnRoutineCB.html#morapi_dnnroutinecb-struct-reference","text":"dnn Callback functions for dnn routine. More... #include <morapi_softneuro.h>","title":"morapi_DnnRoutineCB Struct Reference"},{"location":"structmorapi__DnnRoutineCB.html#public-types","text":"typedef void *(* morapi_Create_DnnRoutineCB ) ( morapi_Env *env) typedef morapi_Result (* morapi_Destroy_DnnRoutineCB ) ( morapi_Env *env, void *self) typedef const morapi_Char *(* morapi_DnnRoutineCB_GetParamsRecipe ) (void *obj) typedef morapi_Result (* morapi_DnnRoutineCB_Init ) (void *obj, morapi_DnnRoutine *io_routine) typedef morapi_Result (* morapi_DnnRoutineCB_Cleanup ) (void *obj) typedef morapi_Result (* morapi_DnnRoutineCB_Compile ) (void *obj, morapi_DnnForward *o_forward) typedef morapi_Result (* morapi_DnnRoutineCB_Reset ) (void *obj)","title":"Public Types"},{"location":"structmorapi__DnnRoutineCB.html#public-member-functions","text":"morapi_Result morapi_DnnRoutineCB_clear ( morapi_DnnRoutine *self)","title":"Public Member Functions"},{"location":"structmorapi__DnnRoutineCB.html#data-fields","text":"morapi_Create_DnnRoutineCB create morapi_Destroy_DnnRoutineCB destroy morapi_DnnRoutineCB_GetParamsRecipe get_params_recipe morapi_DnnRoutineCB_Init init morapi_DnnRoutineCB_Cleanup cleanup morapi_DnnRoutineCB_Compile compile morapi_DnnRoutineCB_Reset reset","title":"Data Fields"},{"location":"structmorapi__DnnRoutineCB.html#detailed-description","text":"Callback functions for dnn routine.","title":"Detailed Description"},{"location":"structmorapi__DnnRoutineCB.html#member-typedef-documentation","text":"","title":"Member Typedef Documentation"},{"location":"structmorapi__DnnRoutineCB.html#morapi_create_dnnroutinecb","text":"typedef void*(* morapi_Create_DnnRoutineCB) ( morapi_Env *env) Creates a routine object. Parameters env : environment where the object will be created","title":"morapi_Create_DnnRoutineCB"},{"location":"structmorapi__DnnRoutineCB.html#morapi_destroy_dnnroutinecb","text":"typedef morapi_Result (* morapi_Destroy_DnnRoutineCB) ( morapi_Env *env, void *self) Destroys the routine object. Parameters env : environment where the object was created self : routine object to be destroyed","title":"morapi_Destroy_DnnRoutineCB"},{"location":"structmorapi__DnnRoutineCB.html#morapi_dnnroutinecb_getparamsrecipe","text":"typedef const morapi_Char *(* morapi_DnnRoutineCB_GetParamsRecipe) (void *obj) Gets the recipe of routine parameters. Parameters obj : routine object","title":"morapi_DnnRoutineCB_GetParamsRecipe"},{"location":"structmorapi__DnnRoutineCB.html#morapi_dnnroutinecb_init","text":"typedef morapi_Result (* morapi_DnnRoutineCB_Init) (void *obj, morapi_DnnRoutine *io_routine) Initializes the routine object. Parameters obj : routine object io_routine : routine object","title":"morapi_DnnRoutineCB_Init"},{"location":"structmorapi__DnnRoutineCB.html#morapi_dnnroutinecb_cleanup","text":"typedef morapi_Result (* morapi_DnnRoutineCB_Cleanup) (void *obj) Cleans up the routine object. Parameters obj : routine object","title":"morapi_DnnRoutineCB_Cleanup"},{"location":"structmorapi__DnnRoutineCB.html#morapi_dnnroutinecb_compile","text":"typedef morapi_Result (* morapi_DnnRoutineCB_Compile) (void *obj, morapi_DnnForward *o_forward) Compiles the routine object. Parameters obj : routine object o_forward : routine forward","title":"morapi_DnnRoutineCB_Compile"},{"location":"structmorapi__DnnRoutineCB.html#morapi_dnnroutinecb_reset","text":"typedef morapi_Result (* morapi_DnnRoutineCB_Reset) (void *obj) Resets the routine object. Parameters obj : routine object","title":"morapi_DnnRoutineCB_Reset"},{"location":"structmorapi__DnnRoutineCB.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__DnnRoutineCB.html#morapi_dnnroutinecb_clear","text":"morapi_Result morapi_DnnRoutineCB_clear ( morapi_DnnRoutine * self) Clears the callback functions. Parameters self : routine object","title":"morapi_DnnRoutineCB_clear()"},{"location":"structmorapi__DnnRoutineCB.html#field-documentation","text":"","title":"Field Documentation"},{"location":"structmorapi__DnnRoutineCB.html#create","text":"morapi_Create_DnnRoutineCB morapi_DnnRoutineCB::create creates a routine object.","title":"create"},{"location":"structmorapi__DnnRoutineCB.html#destroy","text":"morapi_Destroy_DnnRoutineCB morapi_DnnRoutineCB::destroy destroys the routine object.","title":"destroy"},{"location":"structmorapi__DnnRoutineCB.html#get_params_recipe","text":"morapi_DnnRoutineCB_GetParamsRecipe morapi_DnnRoutineCB::get_params_recipe gets the recipe of routine parameters.","title":"get_params_recipe"},{"location":"structmorapi__DnnRoutineCB.html#init","text":"morapi_DnnRoutineCB_Init morapi_DnnRoutineCB::init initializes the routine object.","title":"init"},{"location":"structmorapi__DnnRoutineCB.html#cleanup","text":"morapi_DnnRoutineCB_Cleanup morapi_DnnRoutineCB::cleanup cleans up the routine object.","title":"cleanup"},{"location":"structmorapi__DnnRoutineCB.html#compile","text":"morapi_DnnRoutineCB_Compile morapi_DnnRoutineCB::compile compiles the routine object.","title":"compile"},{"location":"structmorapi__DnnRoutineCB.html#reset","text":"morapi_DnnRoutineCB_Reset morapi_DnnRoutineCB::reset resets the routine object.","title":"reset"},{"location":"structmorapi__DnnRoutinePlan.html","text":"morapi_DnnRoutinePlan Struct Reference dnn \u00bb prof Dnn routine plan. More... #include <morapi_softneuro.h> Public Member Functions const morapi_Char * morapi_DnnRoutinePlan_getDescText (const morapi_DnnRoutinePlan *self) const morapi_Params * morapi_DnnRoutinePlan_getParams (const morapi_DnnRoutinePlan *self) const morapi_DnnNetPlan * morapi_DnnRoutinePlan_getChild (const morapi_DnnRoutinePlan *self) morapi_Real morapi_DnnRoutinePlan_getUsec (const morapi_DnnRoutinePlan *self) morapi_Int32 morapi_DnnRoutinePlan_getUsecNum (const morapi_DnnRoutinePlan *self) const morapi_Real * morapi_DnnRoutinePlan_getUsecs (const morapi_DnnRoutinePlan *self) Detailed Description Dnn routine plan. Member Function Documentation morapi_DnnRoutinePlan_getDescText() const morapi_Char * morapi_DnnRoutinePlan_getDescText (const morapi_DnnRoutinePlan * self) Gets the routine descriptor. morapi_DnnRoutinePlan_getParams() const morapi_Params * morapi_DnnRoutinePlan_getParams (const morapi_DnnRoutinePlan * self) Gets the routine parameters. morapi_DnnRoutinePlan_getChild() const morapi_DnnNetPlan * morapi_DnnRoutinePlan_getChild (const morapi_DnnRoutinePlan * self) Gets the child net plan. morapi_DnnRoutinePlan_getUsec() morapi_Real morapi_DnnRoutinePlan_getUsec (const morapi_DnnRoutinePlan * self) Gets the forward time (usec). morapi_DnnRoutinePlan_getUsecNum() morapi_Int32 morapi_DnnRoutinePlan_getUsecNum (const morapi_DnnRoutinePlan * self) Gets the number of measured forward times (usec). morapi_DnnRoutinePlan_getUsecs() const morapi_Real * morapi_DnnRoutinePlan_getUsecs (const morapi_DnnRoutinePlan * self) Gets the measured forward times (usec).","title":"morapi_DnnRoutinePlan"},{"location":"structmorapi__DnnRoutinePlan.html#morapi_dnnroutineplan-struct-reference","text":"dnn \u00bb prof Dnn routine plan. More... #include <morapi_softneuro.h>","title":"morapi_DnnRoutinePlan Struct Reference"},{"location":"structmorapi__DnnRoutinePlan.html#public-member-functions","text":"const morapi_Char * morapi_DnnRoutinePlan_getDescText (const morapi_DnnRoutinePlan *self) const morapi_Params * morapi_DnnRoutinePlan_getParams (const morapi_DnnRoutinePlan *self) const morapi_DnnNetPlan * morapi_DnnRoutinePlan_getChild (const morapi_DnnRoutinePlan *self) morapi_Real morapi_DnnRoutinePlan_getUsec (const morapi_DnnRoutinePlan *self) morapi_Int32 morapi_DnnRoutinePlan_getUsecNum (const morapi_DnnRoutinePlan *self) const morapi_Real * morapi_DnnRoutinePlan_getUsecs (const morapi_DnnRoutinePlan *self)","title":"Public Member Functions"},{"location":"structmorapi__DnnRoutinePlan.html#detailed-description","text":"Dnn routine plan.","title":"Detailed Description"},{"location":"structmorapi__DnnRoutinePlan.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__DnnRoutinePlan.html#morapi_dnnroutineplan_getdesctext","text":"const morapi_Char * morapi_DnnRoutinePlan_getDescText (const morapi_DnnRoutinePlan * self) Gets the routine descriptor.","title":"morapi_DnnRoutinePlan_getDescText()"},{"location":"structmorapi__DnnRoutinePlan.html#morapi_dnnroutineplan_getparams","text":"const morapi_Params * morapi_DnnRoutinePlan_getParams (const morapi_DnnRoutinePlan * self) Gets the routine parameters.","title":"morapi_DnnRoutinePlan_getParams()"},{"location":"structmorapi__DnnRoutinePlan.html#morapi_dnnroutineplan_getchild","text":"const morapi_DnnNetPlan * morapi_DnnRoutinePlan_getChild (const morapi_DnnRoutinePlan * self) Gets the child net plan.","title":"morapi_DnnRoutinePlan_getChild()"},{"location":"structmorapi__DnnRoutinePlan.html#morapi_dnnroutineplan_getusec","text":"morapi_Real morapi_DnnRoutinePlan_getUsec (const morapi_DnnRoutinePlan * self) Gets the forward time (usec).","title":"morapi_DnnRoutinePlan_getUsec()"},{"location":"structmorapi__DnnRoutinePlan.html#morapi_dnnroutineplan_getusecnum","text":"morapi_Int32 morapi_DnnRoutinePlan_getUsecNum (const morapi_DnnRoutinePlan * self) Gets the number of measured forward times (usec).","title":"morapi_DnnRoutinePlan_getUsecNum()"},{"location":"structmorapi__DnnRoutinePlan.html#morapi_dnnroutineplan_getusecs","text":"const morapi_Real * morapi_DnnRoutinePlan_getUsecs (const morapi_DnnRoutinePlan * self) Gets the measured forward times (usec).","title":"morapi_DnnRoutinePlan_getUsecs()"},{"location":"structmorapi__DnnSchemaPlan.html","text":"morapi_DnnSchemaPlan Struct Reference dnn \u00bb prof Dnn schema plan. More... #include <morapi_softneuro.h> Public Member Functions const morapi_Char * morapi_DnnSchemaPlan_getName (const morapi_DnnSchemaPlan *self) morapi_Int32 morapi_DnnSchemaPlan_getRoutinePlanNum (const morapi_DnnSchemaPlan *self) morapi_DnnRoutinePlan * morapi_DnnSchemaPlan_getRoutinePlan (const morapi_DnnSchemaPlan *self, morapi_Int32 i_index) morapi_DnnRoutinePlan * morapi_DnnSchemaPlan_getOptimalRoutinePlan (const morapi_DnnSchemaPlan *self) morapi_Real morapi_DnnSchemaPlan_getUsec (const morapi_DnnSchemaPlan *self) morapi_Bool morapi_DnnSchemaPlan_isOptimal (const morapi_DnnSchemaPlan *self) morapi_Bool morapi_DnnSchemaPlan_hasAdapt (const morapi_DnnSchemaPlan *self) morapi_Int32 morapi_DnnSchemaPlan_getAdaptNum (const morapi_DnnSchemaPlan *self) morapi_DnnRoutinePlan * morapi_DnnSchemaPlan_getAdapt (const morapi_DnnSchemaPlan *self, morapi_Int32 i_index) morapi_Real morapi_DnnSchemaPlan_getAdaptUsec (const morapi_DnnSchemaPlan *self) Detailed Description Dnn schema plan. Plan for dnn routine schema. Member Function Documentation morapi_DnnSchemaPlan_getName() const morapi_Char * morapi_DnnSchemaPlan_getName (const morapi_DnnSchemaPlan * self) Gets the routine schema name. morapi_DnnSchemaPlan_getRoutinePlanNum() morapi_Int32 morapi_DnnSchemaPlan_getRoutinePlanNum (const morapi_DnnSchemaPlan * self) Gets the number of routine plans. morapi_DnnSchemaPlan_getRoutinePlan() morapi_DnnRoutinePlan * morapi_DnnSchemaPlan_getRoutinePlan (const morapi_DnnSchemaPlan * self, morapi_Int32 i_index) Gets the i_index-th routine plan. morapi_DnnSchemaPlan_getOptimalRoutinePlan() morapi_DnnRoutinePlan * morapi_DnnSchemaPlan_getOptimalRoutinePlan (const morapi_DnnSchemaPlan * self) Gets the optimal routine plan. morapi_DnnSchemaPlan_getUsec() morapi_Real morapi_DnnSchemaPlan_getUsec (const morapi_DnnSchemaPlan * self) Gets the forward time (usec). morapi_DnnSchemaPlan_isOptimal() morapi_Bool morapi_DnnSchemaPlan_isOptimal (const morapi_DnnSchemaPlan * self) Returns whether self is optimal or not. morapi_DnnSchemaPlan_hasAdapt() morapi_Bool morapi_DnnSchemaPlan_hasAdapt (const morapi_DnnSchemaPlan * self) Returns whether self has an adapt routine plan or not. morapi_DnnSchemaPlan_getAdaptNum() morapi_Int32 morapi_DnnSchemaPlan_getAdaptNum (const morapi_DnnSchemaPlan * self) Gets the number of adapt routine plans. morapi_DnnSchemaPlan_getAdapt() morapi_DnnRoutinePlan * morapi_DnnSchemaPlan_getAdapt (const morapi_DnnSchemaPlan * self, morapi_Int32 i_index) Gets the i_index-th adapt routine plans. morapi_DnnSchemaPlan_getAdaptUsec() morapi_Real morapi_DnnSchemaPlan_getAdaptUsec (const morapi_DnnSchemaPlan * self) Gets the adapt time (usec).","title":"morapi_DnnSchemaPlan"},{"location":"structmorapi__DnnSchemaPlan.html#morapi_dnnschemaplan-struct-reference","text":"dnn \u00bb prof Dnn schema plan. More... #include <morapi_softneuro.h>","title":"morapi_DnnSchemaPlan Struct Reference"},{"location":"structmorapi__DnnSchemaPlan.html#public-member-functions","text":"const morapi_Char * morapi_DnnSchemaPlan_getName (const morapi_DnnSchemaPlan *self) morapi_Int32 morapi_DnnSchemaPlan_getRoutinePlanNum (const morapi_DnnSchemaPlan *self) morapi_DnnRoutinePlan * morapi_DnnSchemaPlan_getRoutinePlan (const morapi_DnnSchemaPlan *self, morapi_Int32 i_index) morapi_DnnRoutinePlan * morapi_DnnSchemaPlan_getOptimalRoutinePlan (const morapi_DnnSchemaPlan *self) morapi_Real morapi_DnnSchemaPlan_getUsec (const morapi_DnnSchemaPlan *self) morapi_Bool morapi_DnnSchemaPlan_isOptimal (const morapi_DnnSchemaPlan *self) morapi_Bool morapi_DnnSchemaPlan_hasAdapt (const morapi_DnnSchemaPlan *self) morapi_Int32 morapi_DnnSchemaPlan_getAdaptNum (const morapi_DnnSchemaPlan *self) morapi_DnnRoutinePlan * morapi_DnnSchemaPlan_getAdapt (const morapi_DnnSchemaPlan *self, morapi_Int32 i_index) morapi_Real morapi_DnnSchemaPlan_getAdaptUsec (const morapi_DnnSchemaPlan *self)","title":"Public Member Functions"},{"location":"structmorapi__DnnSchemaPlan.html#detailed-description","text":"Dnn schema plan. Plan for dnn routine schema.","title":"Detailed Description"},{"location":"structmorapi__DnnSchemaPlan.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__DnnSchemaPlan.html#morapi_dnnschemaplan_getname","text":"const morapi_Char * morapi_DnnSchemaPlan_getName (const morapi_DnnSchemaPlan * self) Gets the routine schema name.","title":"morapi_DnnSchemaPlan_getName()"},{"location":"structmorapi__DnnSchemaPlan.html#morapi_dnnschemaplan_getroutineplannum","text":"morapi_Int32 morapi_DnnSchemaPlan_getRoutinePlanNum (const morapi_DnnSchemaPlan * self) Gets the number of routine plans.","title":"morapi_DnnSchemaPlan_getRoutinePlanNum()"},{"location":"structmorapi__DnnSchemaPlan.html#morapi_dnnschemaplan_getroutineplan","text":"morapi_DnnRoutinePlan * morapi_DnnSchemaPlan_getRoutinePlan (const morapi_DnnSchemaPlan * self, morapi_Int32 i_index) Gets the i_index-th routine plan.","title":"morapi_DnnSchemaPlan_getRoutinePlan()"},{"location":"structmorapi__DnnSchemaPlan.html#morapi_dnnschemaplan_getoptimalroutineplan","text":"morapi_DnnRoutinePlan * morapi_DnnSchemaPlan_getOptimalRoutinePlan (const morapi_DnnSchemaPlan * self) Gets the optimal routine plan.","title":"morapi_DnnSchemaPlan_getOptimalRoutinePlan()"},{"location":"structmorapi__DnnSchemaPlan.html#morapi_dnnschemaplan_getusec","text":"morapi_Real morapi_DnnSchemaPlan_getUsec (const morapi_DnnSchemaPlan * self) Gets the forward time (usec).","title":"morapi_DnnSchemaPlan_getUsec()"},{"location":"structmorapi__DnnSchemaPlan.html#morapi_dnnschemaplan_isoptimal","text":"morapi_Bool morapi_DnnSchemaPlan_isOptimal (const morapi_DnnSchemaPlan * self) Returns whether self is optimal or not.","title":"morapi_DnnSchemaPlan_isOptimal()"},{"location":"structmorapi__DnnSchemaPlan.html#morapi_dnnschemaplan_hasadapt","text":"morapi_Bool morapi_DnnSchemaPlan_hasAdapt (const morapi_DnnSchemaPlan * self) Returns whether self has an adapt routine plan or not.","title":"morapi_DnnSchemaPlan_hasAdapt()"},{"location":"structmorapi__DnnSchemaPlan.html#morapi_dnnschemaplan_getadaptnum","text":"morapi_Int32 morapi_DnnSchemaPlan_getAdaptNum (const morapi_DnnSchemaPlan * self) Gets the number of adapt routine plans.","title":"morapi_DnnSchemaPlan_getAdaptNum()"},{"location":"structmorapi__DnnSchemaPlan.html#morapi_dnnschemaplan_getadapt","text":"morapi_DnnRoutinePlan * morapi_DnnSchemaPlan_getAdapt (const morapi_DnnSchemaPlan * self, morapi_Int32 i_index) Gets the i_index-th adapt routine plans.","title":"morapi_DnnSchemaPlan_getAdapt()"},{"location":"structmorapi__DnnSchemaPlan.html#morapi_dnnschemaplan_getadaptusec","text":"morapi_Real morapi_DnnSchemaPlan_getAdaptUsec (const morapi_DnnSchemaPlan * self) Gets the adapt time (usec).","title":"morapi_DnnSchemaPlan_getAdaptUsec()"},{"location":"structmorapi__Env.html","text":"morapi_Env Struct Reference core \u00bb env Environment. More... #include <morapi_core.h> Public Member Functions morapi_Env * morapi_create_Env (void *io_heap_beg, morapi_Size i_heap_size) morapi_Result morapi_destroy_Env ( morapi_Env *env) Memory allocation void * morapi_Env_malloc ( morapi_Env *self, morapi_Size i_size) morapi_Result morapi_Env_free ( morapi_Env *self, void *io_ptr) morapi_Size morapi_Env_getMaxHeapSize ( morapi_Env *self) Logging morapi_Result morapi_Env_setLogFunc ( morapi_Env *self, morapi_LogFunc i_log_func, void *i_log_obj) morapi_Result morapi_Env_setMsgFunc ( morapi_Env *self, morapi_LogFunc i_msg_func, morapi_FlushFunc i_flush_func, void *i_msg_obj) morapi_Result morapi_Env_setLogLevel ( morapi_Env *self, morapi_LogLevel i_level) void morapi_Env_logInfo ( morapi_Env *self, const morapi_Char *i_module, const morapi_Char *i_fmt,...) Detailed Description Environment. test_decompose_api.c , test_dnn_api.c , and test_prof_api.c . Member Function Documentation morapi_create_Env() morapi_Env * morapi_create_Env (void * io_heap_beg, morapi_Size i_heap_size) Allocates and constructs an environment. Parameters io_heap_beg : begining of heap address. i_heap_size : size of heap. test_decompose_api.c , test_dnn_api.c , and test_prof_api.c . morapi_destroy_Env() morapi_Result morapi_destroy_Env ( morapi_Env * env) Destructs and deallocates an environment. test_decompose_api.c , test_dnn_api.c , and test_prof_api.c . morapi_Env_malloc() void * morapi_Env_malloc ( morapi_Env * self, morapi_Size i_size) Allocates heap memory. morapi_Env_free() morapi_Result morapi_Env_free ( morapi_Env * self, void * io_ptr) Deallocates heap memory. morapi_Env_getMaxHeapSize() morapi_Size morapi_Env_getMaxHeapSize ( morapi_Env * self) Gets used heap size. morapi_Env_setLogFunc() morapi_Result morapi_Env_setLogFunc ( morapi_Env * self, morapi_LogFunc i_log_func, void * i_log_obj) Sets a log function. A log is expected to output to stderr. test_decompose_api.c , and test_prof_api.c . morapi_Env_setMsgFunc() morapi_Result morapi_Env_setMsgFunc ( morapi_Env * self, morapi_LogFunc i_msg_func, morapi_FlushFunc i_flush_func, void * i_msg_obj) Sets a message function. A message is expected to output to stdout. test_decompose_api.c , and test_prof_api.c . morapi_Env_setLogLevel() morapi_Result morapi_Env_setLogLevel ( morapi_Env * self, morapi_LogLevel i_level) Sets a log level. morapi_Env_logInfo() void morapi_Env_logInfo ( morapi_Env * self, const morapi_Char * i_module, const morapi_Char * i_fmt, ...) Logs an infomation message.","title":"morapi_Env"},{"location":"structmorapi__Env.html#morapi_env-struct-reference","text":"core \u00bb env Environment. More... #include <morapi_core.h>","title":"morapi_Env Struct Reference"},{"location":"structmorapi__Env.html#public-member-functions","text":"morapi_Env * morapi_create_Env (void *io_heap_beg, morapi_Size i_heap_size) morapi_Result morapi_destroy_Env ( morapi_Env *env)","title":"Public Member Functions"},{"location":"structmorapi__Env.html#memory-allocation","text":"void * morapi_Env_malloc ( morapi_Env *self, morapi_Size i_size) morapi_Result morapi_Env_free ( morapi_Env *self, void *io_ptr) morapi_Size morapi_Env_getMaxHeapSize ( morapi_Env *self)","title":"Memory allocation"},{"location":"structmorapi__Env.html#logging","text":"morapi_Result morapi_Env_setLogFunc ( morapi_Env *self, morapi_LogFunc i_log_func, void *i_log_obj) morapi_Result morapi_Env_setMsgFunc ( morapi_Env *self, morapi_LogFunc i_msg_func, morapi_FlushFunc i_flush_func, void *i_msg_obj) morapi_Result morapi_Env_setLogLevel ( morapi_Env *self, morapi_LogLevel i_level) void morapi_Env_logInfo ( morapi_Env *self, const morapi_Char *i_module, const morapi_Char *i_fmt,...)","title":"Logging"},{"location":"structmorapi__Env.html#detailed-description","text":"Environment. test_decompose_api.c , test_dnn_api.c , and test_prof_api.c .","title":"Detailed Description"},{"location":"structmorapi__Env.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__Env.html#morapi_create_env","text":"morapi_Env * morapi_create_Env (void * io_heap_beg, morapi_Size i_heap_size) Allocates and constructs an environment. Parameters io_heap_beg : begining of heap address. i_heap_size : size of heap. test_decompose_api.c , test_dnn_api.c , and test_prof_api.c .","title":"morapi_create_Env()"},{"location":"structmorapi__Env.html#morapi_destroy_env","text":"morapi_Result morapi_destroy_Env ( morapi_Env * env) Destructs and deallocates an environment. test_decompose_api.c , test_dnn_api.c , and test_prof_api.c .","title":"morapi_destroy_Env()"},{"location":"structmorapi__Env.html#morapi_env_malloc","text":"void * morapi_Env_malloc ( morapi_Env * self, morapi_Size i_size) Allocates heap memory.","title":"morapi_Env_malloc()"},{"location":"structmorapi__Env.html#morapi_env_free","text":"morapi_Result morapi_Env_free ( morapi_Env * self, void * io_ptr) Deallocates heap memory.","title":"morapi_Env_free()"},{"location":"structmorapi__Env.html#morapi_env_getmaxheapsize","text":"morapi_Size morapi_Env_getMaxHeapSize ( morapi_Env * self) Gets used heap size.","title":"morapi_Env_getMaxHeapSize()"},{"location":"structmorapi__Env.html#morapi_env_setlogfunc","text":"morapi_Result morapi_Env_setLogFunc ( morapi_Env * self, morapi_LogFunc i_log_func, void * i_log_obj) Sets a log function. A log is expected to output to stderr. test_decompose_api.c , and test_prof_api.c .","title":"morapi_Env_setLogFunc()"},{"location":"structmorapi__Env.html#morapi_env_setmsgfunc","text":"morapi_Result morapi_Env_setMsgFunc ( morapi_Env * self, morapi_LogFunc i_msg_func, morapi_FlushFunc i_flush_func, void * i_msg_obj) Sets a message function. A message is expected to output to stdout. test_decompose_api.c , and test_prof_api.c .","title":"morapi_Env_setMsgFunc()"},{"location":"structmorapi__Env.html#morapi_env_setloglevel","text":"morapi_Result morapi_Env_setLogLevel ( morapi_Env * self, morapi_LogLevel i_level) Sets a log level.","title":"morapi_Env_setLogLevel()"},{"location":"structmorapi__Env.html#morapi_env_loginfo","text":"void morapi_Env_logInfo ( morapi_Env * self, const morapi_Char * i_module, const morapi_Char * i_fmt, ...) Logs an infomation message.","title":"morapi_Env_logInfo()"},{"location":"structmorapi__IStream.html","text":"morapi_IStream Struct Reference core \u00bb stream \u00bb istream An input stream. More... #include <morapi_core_old.h> Inherited by morapi_IStreamByteArray , morapi_IStreamFile , and morapi_IStreamString . Public Member Functions Construction and destruction morapi_IStream * morapi_create_IStream ( morapi_Env *io_env) morapi_Result morapi_destroy_IStream ( morapi_Env *io_env, morapi_IStream *self) morapi_Result morapi_IStream_setVF ( morapi_IStream *self, morapi_VF_IStream *i_vf, void *i_derived) morapi_Result morapi_IStream_initialize ( morapi_IStream *self) morapi_Result morapi_IStream_init ( morapi_IStream *self, morapi_Int32 i_buf_size, void *i_buf) morapi_Result morapi_IStream_cleanup ( morapi_IStream *self) Operation morapi_Result morapi_IStream_setPos ( morapi_IStream *self, morapi_Pos i_pos) morapi_Int32 morapi_IStream_readP ( morapi_IStream *self, void *o_dst, morapi_Int32 i_size, morapi_Size i_num, morapi_Bool i_swaps_endian) morapi_Int32 morapi_IStream_read ( morapi_IStream *self, void *o_dst, morapi_Size i_size) Getters morapi_Pos morapi_IStream_getPos ( morapi_IStream *self) morapi_Bool morapi_IStream_isEos ( morapi_IStream *self) morapi_Uint8 * morapi_IStream_getBuf ( morapi_IStream *self) morapi_Int32 morapi_IStream_getBufSize ( morapi_IStream *self) morapi_Bool morapi_IStream_isThreadSafe ( morapi_IStream *self) Detailed Description An input stream. Member Function Documentation morapi_create_IStream() morapi_IStream * morapi_create_IStream ( morapi_Env * io_env) Creates the input stream. morapi_destroy_IStream() morapi_Result morapi_destroy_IStream ( morapi_Env * io_env, morapi_IStream * self) Destroys the input stream. morapi_IStream_setVF() morapi_Result morapi_IStream_setVF ( morapi_IStream * self, morapi_VF_IStream * i_vf, void * i_derived) Sets virtual functions and a derived object. morapi_IStream_initialize() morapi_Result morapi_IStream_initialize ( morapi_IStream * self) Initializes the input stream with default parameters. Same as morapi_IStream_init(self,4096,NULL). morapi_IStream_init() morapi_Result morapi_IStream_init ( morapi_IStream * self, morapi_Int32 i_buf_size, void * i_buf) Initializes the input stream. Parameters self : the input stream. i_buf_size : buffer size. i_buf : a buffer. If NULL is given, it allocates the buffer internally. morapi_IStream_cleanup() morapi_Result morapi_IStream_cleanup ( morapi_IStream * self) Cleans up the input stream. morapi_IStream_setPos() morapi_Result morapi_IStream_setPos ( morapi_IStream * self, morapi_Pos i_pos) Sets the stream position to i_pos. morapi_IStream_readP() morapi_Int32 morapi_IStream_readP ( morapi_IStream * self, void * o_dst, morapi_Int32 i_size, morapi_Size i_num, morapi_Bool i_swaps_endian) Reads i_num elements of each i_size bytes data. Returns the number of elements read. morapi_IStream_read() morapi_Int32 morapi_IStream_read ( morapi_IStream * self, void * o_dst, morapi_Size i_size) Reads data of i_size bytes to o_dst. Returns byte counts to be read. morapi_IStream_getPos() morapi_Pos morapi_IStream_getPos ( morapi_IStream * self) Gets the stream position. morapi_IStream_isEos() morapi_Bool morapi_IStream_isEos ( morapi_IStream * self) Returns whether the stream position is the end. morapi_IStream_getBuf() morapi_Uint8 * morapi_IStream_getBuf ( morapi_IStream * self) Gets the head pointer of the buffer. morapi_IStream_getBufSize() morapi_Int32 morapi_IStream_getBufSize ( morapi_IStream * self) Gets the buffer size. morapi_IStream_isThreadSafe() morapi_Bool morapi_IStream_isThreadSafe ( morapi_IStream * self) Returns whether the stream is thread safe.","title":"morapi_IStream Struct Reference"},{"location":"structmorapi__IStream.html#morapi_istream-struct-reference","text":"core \u00bb stream \u00bb istream An input stream. More... #include <morapi_core_old.h> Inherited by morapi_IStreamByteArray , morapi_IStreamFile , and morapi_IStreamString .","title":"morapi_IStream Struct Reference"},{"location":"structmorapi__IStream.html#public-member-functions","text":"","title":"Public Member Functions"},{"location":"structmorapi__IStream.html#construction-and-destruction","text":"morapi_IStream * morapi_create_IStream ( morapi_Env *io_env) morapi_Result morapi_destroy_IStream ( morapi_Env *io_env, morapi_IStream *self) morapi_Result morapi_IStream_setVF ( morapi_IStream *self, morapi_VF_IStream *i_vf, void *i_derived) morapi_Result morapi_IStream_initialize ( morapi_IStream *self) morapi_Result morapi_IStream_init ( morapi_IStream *self, morapi_Int32 i_buf_size, void *i_buf) morapi_Result morapi_IStream_cleanup ( morapi_IStream *self)","title":"Construction and destruction"},{"location":"structmorapi__IStream.html#operation","text":"morapi_Result morapi_IStream_setPos ( morapi_IStream *self, morapi_Pos i_pos) morapi_Int32 morapi_IStream_readP ( morapi_IStream *self, void *o_dst, morapi_Int32 i_size, morapi_Size i_num, morapi_Bool i_swaps_endian) morapi_Int32 morapi_IStream_read ( morapi_IStream *self, void *o_dst, morapi_Size i_size)","title":"Operation"},{"location":"structmorapi__IStream.html#getters","text":"morapi_Pos morapi_IStream_getPos ( morapi_IStream *self) morapi_Bool morapi_IStream_isEos ( morapi_IStream *self) morapi_Uint8 * morapi_IStream_getBuf ( morapi_IStream *self) morapi_Int32 morapi_IStream_getBufSize ( morapi_IStream *self) morapi_Bool morapi_IStream_isThreadSafe ( morapi_IStream *self)","title":"Getters"},{"location":"structmorapi__IStream.html#detailed-description","text":"An input stream.","title":"Detailed Description"},{"location":"structmorapi__IStream.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__IStream.html#morapi_create_istream","text":"morapi_IStream * morapi_create_IStream ( morapi_Env * io_env) Creates the input stream.","title":"morapi_create_IStream()"},{"location":"structmorapi__IStream.html#morapi_destroy_istream","text":"morapi_Result morapi_destroy_IStream ( morapi_Env * io_env, morapi_IStream * self) Destroys the input stream.","title":"morapi_destroy_IStream()"},{"location":"structmorapi__IStream.html#morapi_istream_setvf","text":"morapi_Result morapi_IStream_setVF ( morapi_IStream * self, morapi_VF_IStream * i_vf, void * i_derived) Sets virtual functions and a derived object.","title":"morapi_IStream_setVF()"},{"location":"structmorapi__IStream.html#morapi_istream_initialize","text":"morapi_Result morapi_IStream_initialize ( morapi_IStream * self) Initializes the input stream with default parameters. Same as morapi_IStream_init(self,4096,NULL).","title":"morapi_IStream_initialize()"},{"location":"structmorapi__IStream.html#morapi_istream_init","text":"morapi_Result morapi_IStream_init ( morapi_IStream * self, morapi_Int32 i_buf_size, void * i_buf) Initializes the input stream. Parameters self : the input stream. i_buf_size : buffer size. i_buf : a buffer. If NULL is given, it allocates the buffer internally.","title":"morapi_IStream_init()"},{"location":"structmorapi__IStream.html#morapi_istream_cleanup","text":"morapi_Result morapi_IStream_cleanup ( morapi_IStream * self) Cleans up the input stream.","title":"morapi_IStream_cleanup()"},{"location":"structmorapi__IStream.html#morapi_istream_setpos","text":"morapi_Result morapi_IStream_setPos ( morapi_IStream * self, morapi_Pos i_pos) Sets the stream position to i_pos.","title":"morapi_IStream_setPos()"},{"location":"structmorapi__IStream.html#morapi_istream_readp","text":"morapi_Int32 morapi_IStream_readP ( morapi_IStream * self, void * o_dst, morapi_Int32 i_size, morapi_Size i_num, morapi_Bool i_swaps_endian) Reads i_num elements of each i_size bytes data. Returns the number of elements read.","title":"morapi_IStream_readP()"},{"location":"structmorapi__IStream.html#morapi_istream_read","text":"morapi_Int32 morapi_IStream_read ( morapi_IStream * self, void * o_dst, morapi_Size i_size) Reads data of i_size bytes to o_dst. Returns byte counts to be read.","title":"morapi_IStream_read()"},{"location":"structmorapi__IStream.html#morapi_istream_getpos","text":"morapi_Pos morapi_IStream_getPos ( morapi_IStream * self) Gets the stream position.","title":"morapi_IStream_getPos()"},{"location":"structmorapi__IStream.html#morapi_istream_iseos","text":"morapi_Bool morapi_IStream_isEos ( morapi_IStream * self) Returns whether the stream position is the end.","title":"morapi_IStream_isEos()"},{"location":"structmorapi__IStream.html#morapi_istream_getbuf","text":"morapi_Uint8 * morapi_IStream_getBuf ( morapi_IStream * self) Gets the head pointer of the buffer.","title":"morapi_IStream_getBuf()"},{"location":"structmorapi__IStream.html#morapi_istream_getbufsize","text":"morapi_Int32 morapi_IStream_getBufSize ( morapi_IStream * self) Gets the buffer size.","title":"morapi_IStream_getBufSize()"},{"location":"structmorapi__IStream.html#morapi_istream_isthreadsafe","text":"morapi_Bool morapi_IStream_isThreadSafe ( morapi_IStream * self) Returns whether the stream is thread safe.","title":"morapi_IStream_isThreadSafe()"},{"location":"structmorapi__IStreamByteArray.html","text":"morapi_IStreamByteArray Struct Reference core \u00bb stream \u00bb istream An input stream from a byte array. More... #include <morapi_core_old.h> Inherits morapi_IStream . Public Member Functions morapi_IStreamByteArray * morapi_create_IStreamByteArray ( morapi_Env *io_env) morapi_Result morapi_destroy_IStreamByteArray ( morapi_Env *io_env, morapi_IStreamByteArray *self) morapi_Result morapi_IStreamByteArray_initialize ( morapi_IStreamByteArray *self) morapi_Result morapi_IStreamByteArray_init ( morapi_IStreamByteArray *self) morapi_Result morapi_IStreamByteArray_cleanup ( morapi_IStreamByteArray *self) morapi_Env * morapi_IStreamByteArray_getEnv ( morapi_IStreamByteArray *self) morapi_IStream * morapi_IStreamByteArray_getBase ( morapi_IStreamByteArray *self) morapi_Result morapi_IStreamByteArray_open ( morapi_IStreamByteArray *self, const morapi_ByteArray *io_byte_array) morapi_Result morapi_IStreamByteArray_close ( morapi_IStreamByteArray *self) morapi_Bool morapi_IStreamByteArray_isOpen (const morapi_IStreamByteArray *self) morapi_IStream * morapi_create_IStream ( morapi_Env *io_env) morapi_Result morapi_destroy_IStream ( morapi_Env *io_env, morapi_IStream *self) morapi_Result morapi_IStream_setVF ( morapi_IStream *self, morapi_VF_IStream *i_vf, void *i_derived) morapi_Result morapi_IStream_initialize ( morapi_IStream *self) morapi_Result morapi_IStream_init ( morapi_IStream *self, morapi_Int32 i_buf_size, void *i_buf) morapi_Result morapi_IStream_cleanup ( morapi_IStream *self) morapi_Result morapi_IStream_setPos ( morapi_IStream *self, morapi_Pos i_pos) morapi_Int32 morapi_IStream_readP ( morapi_IStream *self, void *o_dst, morapi_Int32 i_size, morapi_Size i_num, morapi_Bool i_swaps_endian) morapi_Int32 morapi_IStream_read ( morapi_IStream *self, void *o_dst, morapi_Size i_size) morapi_Pos morapi_IStream_getPos ( morapi_IStream *self) morapi_Bool morapi_IStream_isEos ( morapi_IStream *self) morapi_Uint8 * morapi_IStream_getBuf ( morapi_IStream *self) morapi_Int32 morapi_IStream_getBufSize ( morapi_IStream *self) morapi_Bool morapi_IStream_isThreadSafe ( morapi_IStream *self) Detailed Description An input stream from a byte array. Member Function Documentation morapi_create_IStreamByteArray() morapi_IStreamByteArray * morapi_create_IStreamByteArray ( morapi_Env * io_env) Creates. morapi_destroy_IStreamByteArray() morapi_Result morapi_destroy_IStreamByteArray ( morapi_Env * io_env, morapi_IStreamByteArray * self) Destroys. morapi_IStreamByteArray_initialize() morapi_Result morapi_IStreamByteArray_initialize ( morapi_IStreamByteArray * self) Initializes with default parameters. morapi_IStreamByteArray_init() morapi_Result morapi_IStreamByteArray_init ( morapi_IStreamByteArray * self) Initializes. morapi_IStreamByteArray_cleanup() morapi_Result morapi_IStreamByteArray_cleanup ( morapi_IStreamByteArray * self) Cleans up. morapi_IStreamByteArray_getEnv() morapi_Env * morapi_IStreamByteArray_getEnv ( morapi_IStreamByteArray * self) Gets an environment. morapi_IStreamByteArray_getBase() morapi_IStream * morapi_IStreamByteArray_getBase ( morapi_IStreamByteArray * self) Gets a base input stream. morapi_IStreamByteArray_open() morapi_Result morapi_IStreamByteArray_open ( morapi_IStreamByteArray * self, const morapi_ByteArray * io_byte_array) Opens an input stream. morapi_IStreamByteArray_close() morapi_Result morapi_IStreamByteArray_close ( morapi_IStreamByteArray * self) Closes an input stream. morapi_IStreamByteArray_isOpen() morapi_Bool morapi_IStreamByteArray_isOpen (const morapi_IStreamByteArray * self) Returns whether an input stream is open or not.","title":"morapi_IStreamByteArray Struct Reference"},{"location":"structmorapi__IStreamByteArray.html#morapi_istreambytearray-struct-reference","text":"core \u00bb stream \u00bb istream An input stream from a byte array. More... #include <morapi_core_old.h> Inherits morapi_IStream .","title":"morapi_IStreamByteArray Struct Reference"},{"location":"structmorapi__IStreamByteArray.html#public-member-functions","text":"morapi_IStreamByteArray * morapi_create_IStreamByteArray ( morapi_Env *io_env) morapi_Result morapi_destroy_IStreamByteArray ( morapi_Env *io_env, morapi_IStreamByteArray *self) morapi_Result morapi_IStreamByteArray_initialize ( morapi_IStreamByteArray *self) morapi_Result morapi_IStreamByteArray_init ( morapi_IStreamByteArray *self) morapi_Result morapi_IStreamByteArray_cleanup ( morapi_IStreamByteArray *self) morapi_Env * morapi_IStreamByteArray_getEnv ( morapi_IStreamByteArray *self) morapi_IStream * morapi_IStreamByteArray_getBase ( morapi_IStreamByteArray *self) morapi_Result morapi_IStreamByteArray_open ( morapi_IStreamByteArray *self, const morapi_ByteArray *io_byte_array) morapi_Result morapi_IStreamByteArray_close ( morapi_IStreamByteArray *self) morapi_Bool morapi_IStreamByteArray_isOpen (const morapi_IStreamByteArray *self) morapi_IStream * morapi_create_IStream ( morapi_Env *io_env) morapi_Result morapi_destroy_IStream ( morapi_Env *io_env, morapi_IStream *self) morapi_Result morapi_IStream_setVF ( morapi_IStream *self, morapi_VF_IStream *i_vf, void *i_derived) morapi_Result morapi_IStream_initialize ( morapi_IStream *self) morapi_Result morapi_IStream_init ( morapi_IStream *self, morapi_Int32 i_buf_size, void *i_buf) morapi_Result morapi_IStream_cleanup ( morapi_IStream *self) morapi_Result morapi_IStream_setPos ( morapi_IStream *self, morapi_Pos i_pos) morapi_Int32 morapi_IStream_readP ( morapi_IStream *self, void *o_dst, morapi_Int32 i_size, morapi_Size i_num, morapi_Bool i_swaps_endian) morapi_Int32 morapi_IStream_read ( morapi_IStream *self, void *o_dst, morapi_Size i_size) morapi_Pos morapi_IStream_getPos ( morapi_IStream *self) morapi_Bool morapi_IStream_isEos ( morapi_IStream *self) morapi_Uint8 * morapi_IStream_getBuf ( morapi_IStream *self) morapi_Int32 morapi_IStream_getBufSize ( morapi_IStream *self) morapi_Bool morapi_IStream_isThreadSafe ( morapi_IStream *self)","title":"Public Member Functions"},{"location":"structmorapi__IStreamByteArray.html#detailed-description","text":"An input stream from a byte array.","title":"Detailed Description"},{"location":"structmorapi__IStreamByteArray.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__IStreamByteArray.html#morapi_create_istreambytearray","text":"morapi_IStreamByteArray * morapi_create_IStreamByteArray ( morapi_Env * io_env) Creates.","title":"morapi_create_IStreamByteArray()"},{"location":"structmorapi__IStreamByteArray.html#morapi_destroy_istreambytearray","text":"morapi_Result morapi_destroy_IStreamByteArray ( morapi_Env * io_env, morapi_IStreamByteArray * self) Destroys.","title":"morapi_destroy_IStreamByteArray()"},{"location":"structmorapi__IStreamByteArray.html#morapi_istreambytearray_initialize","text":"morapi_Result morapi_IStreamByteArray_initialize ( morapi_IStreamByteArray * self) Initializes with default parameters.","title":"morapi_IStreamByteArray_initialize()"},{"location":"structmorapi__IStreamByteArray.html#morapi_istreambytearray_init","text":"morapi_Result morapi_IStreamByteArray_init ( morapi_IStreamByteArray * self) Initializes.","title":"morapi_IStreamByteArray_init()"},{"location":"structmorapi__IStreamByteArray.html#morapi_istreambytearray_cleanup","text":"morapi_Result morapi_IStreamByteArray_cleanup ( morapi_IStreamByteArray * self) Cleans up.","title":"morapi_IStreamByteArray_cleanup()"},{"location":"structmorapi__IStreamByteArray.html#morapi_istreambytearray_getenv","text":"morapi_Env * morapi_IStreamByteArray_getEnv ( morapi_IStreamByteArray * self) Gets an environment.","title":"morapi_IStreamByteArray_getEnv()"},{"location":"structmorapi__IStreamByteArray.html#morapi_istreambytearray_getbase","text":"morapi_IStream * morapi_IStreamByteArray_getBase ( morapi_IStreamByteArray * self) Gets a base input stream.","title":"morapi_IStreamByteArray_getBase()"},{"location":"structmorapi__IStreamByteArray.html#morapi_istreambytearray_open","text":"morapi_Result morapi_IStreamByteArray_open ( morapi_IStreamByteArray * self, const morapi_ByteArray * io_byte_array) Opens an input stream.","title":"morapi_IStreamByteArray_open()"},{"location":"structmorapi__IStreamByteArray.html#morapi_istreambytearray_close","text":"morapi_Result morapi_IStreamByteArray_close ( morapi_IStreamByteArray * self) Closes an input stream.","title":"morapi_IStreamByteArray_close()"},{"location":"structmorapi__IStreamByteArray.html#morapi_istreambytearray_isopen","text":"morapi_Bool morapi_IStreamByteArray_isOpen (const morapi_IStreamByteArray * self) Returns whether an input stream is open or not.","title":"morapi_IStreamByteArray_isOpen()"},{"location":"structmorapi__IStreamFile.html","text":"morapi_IStreamFile Struct Reference core \u00bb stream \u00bb istream A file input stream. More... #include <morapi_core_old.h> Inherits morapi_IStream . Public Member Functions Construction and destruction morapi_IStreamFile * morapi_create_IStreamFile ( morapi_Env *io_env) morapi_Result morapi_destroy_IStreamFile ( morapi_Env *io_env, morapi_IStreamFile *self) morapi_Result morapi_IStreamFile_initialize ( morapi_IStreamFile *self) morapi_Result morapi_IStreamFile_init ( morapi_IStreamFile *self, morapi_Int32 i_file_name_len_max, morapi_Int32 i_buf_size, void *i_buf) morapi_Result morapi_IStreamFile_cleanup ( morapi_IStreamFile *self) Operation morapi_Result morapi_IStreamFile_open ( morapi_IStreamFile *self, const morapi_Char *i_file_name) morapi_Result morapi_IStreamFile_close ( morapi_IStreamFile *self) Getters morapi_IStream * morapi_IStreamFile_getBase ( morapi_IStreamFile *self) const morapi_Char * morapi_IStreamFile_getFileName ( morapi_IStreamFile *self) morapi_Bool morapi_IStreamFile_isOpen ( morapi_IStreamFile *self) morapi_IStream * morapi_create_IStream ( morapi_Env *io_env) morapi_Result morapi_destroy_IStream ( morapi_Env *io_env, morapi_IStream *self) morapi_Result morapi_IStream_setVF ( morapi_IStream *self, morapi_VF_IStream *i_vf, void *i_derived) morapi_Result morapi_IStream_initialize ( morapi_IStream *self) morapi_Result morapi_IStream_init ( morapi_IStream *self, morapi_Int32 i_buf_size, void *i_buf) morapi_Result morapi_IStream_cleanup ( morapi_IStream *self) morapi_Result morapi_IStream_setPos ( morapi_IStream *self, morapi_Pos i_pos) morapi_Int32 morapi_IStream_readP ( morapi_IStream *self, void *o_dst, morapi_Int32 i_size, morapi_Size i_num, morapi_Bool i_swaps_endian) morapi_Int32 morapi_IStream_read ( morapi_IStream *self, void *o_dst, morapi_Size i_size) morapi_Pos morapi_IStream_getPos ( morapi_IStream *self) morapi_Bool morapi_IStream_isEos ( morapi_IStream *self) morapi_Uint8 * morapi_IStream_getBuf ( morapi_IStream *self) morapi_Int32 morapi_IStream_getBufSize ( morapi_IStream *self) morapi_Bool morapi_IStream_isThreadSafe ( morapi_IStream *self) Detailed Description A file input stream. Member Function Documentation morapi_create_IStreamFile() morapi_IStreamFile * morapi_create_IStreamFile ( morapi_Env * io_env) Creates a file input stream. morapi_destroy_IStreamFile() morapi_Result morapi_destroy_IStreamFile ( morapi_Env * io_env, morapi_IStreamFile * self) Destroys the file input stream. morapi_IStreamFile_initialize() morapi_Result morapi_IStreamFile_initialize ( morapi_IStreamFile * self) Initializes the file input stream with default parameters. Same as morapi_IStreamFile_init(self,0,4096,NULL). morapi_IStreamFile_init() morapi_Result morapi_IStreamFile_init ( morapi_IStreamFile * self, morapi_Int32 i_file_name_len_max, morapi_Int32 i_buf_size, void * i_buf) Initializes the file input stream. Parameters self : the file input stream. i_file_name_len_max : the maximum length of the file name. If 0 is given, the file name is dynamically allocated. i_buf_size : the buffer size of the input stream. i_buf : the buffer of the input stream. If NULL is given, the buffer is allocated internally. morapi_IStreamFile_cleanup() morapi_Result morapi_IStreamFile_cleanup ( morapi_IStreamFile * self) Cleans up the file input stream. morapi_IStreamFile_open() morapi_Result morapi_IStreamFile_open ( morapi_IStreamFile * self, const morapi_Char * i_file_name) Opens the file input stream. Parameters self : the file input stream. i_file_name : the name of the file to open. morapi_IStreamFile_close() morapi_Result morapi_IStreamFile_close ( morapi_IStreamFile * self) Closes the file input stream. After calling this function, The file name remains and can be gotton using morapi_IStreamFile_getFileName() . morapi_IStreamFile_getBase() morapi_IStream * morapi_IStreamFile_getBase ( morapi_IStreamFile * self) Gets the base input stream. morapi_IStreamFile_getFileName() const morapi_Char * morapi_IStreamFile_getFileName ( morapi_IStreamFile * self) Gets the file name. morapi_IStreamFile_isOpen() morapi_Bool morapi_IStreamFile_isOpen ( morapi_IStreamFile * self) Returns whether the file input stream is open.","title":"morapi_IStreamFile Struct Reference"},{"location":"structmorapi__IStreamFile.html#morapi_istreamfile-struct-reference","text":"core \u00bb stream \u00bb istream A file input stream. More... #include <morapi_core_old.h> Inherits morapi_IStream .","title":"morapi_IStreamFile Struct Reference"},{"location":"structmorapi__IStreamFile.html#public-member-functions","text":"","title":"Public Member Functions"},{"location":"structmorapi__IStreamFile.html#construction-and-destruction","text":"morapi_IStreamFile * morapi_create_IStreamFile ( morapi_Env *io_env) morapi_Result morapi_destroy_IStreamFile ( morapi_Env *io_env, morapi_IStreamFile *self) morapi_Result morapi_IStreamFile_initialize ( morapi_IStreamFile *self) morapi_Result morapi_IStreamFile_init ( morapi_IStreamFile *self, morapi_Int32 i_file_name_len_max, morapi_Int32 i_buf_size, void *i_buf) morapi_Result morapi_IStreamFile_cleanup ( morapi_IStreamFile *self)","title":"Construction and destruction"},{"location":"structmorapi__IStreamFile.html#operation","text":"morapi_Result morapi_IStreamFile_open ( morapi_IStreamFile *self, const morapi_Char *i_file_name) morapi_Result morapi_IStreamFile_close ( morapi_IStreamFile *self)","title":"Operation"},{"location":"structmorapi__IStreamFile.html#getters","text":"morapi_IStream * morapi_IStreamFile_getBase ( morapi_IStreamFile *self) const morapi_Char * morapi_IStreamFile_getFileName ( morapi_IStreamFile *self) morapi_Bool morapi_IStreamFile_isOpen ( morapi_IStreamFile *self) morapi_IStream * morapi_create_IStream ( morapi_Env *io_env) morapi_Result morapi_destroy_IStream ( morapi_Env *io_env, morapi_IStream *self) morapi_Result morapi_IStream_setVF ( morapi_IStream *self, morapi_VF_IStream *i_vf, void *i_derived) morapi_Result morapi_IStream_initialize ( morapi_IStream *self) morapi_Result morapi_IStream_init ( morapi_IStream *self, morapi_Int32 i_buf_size, void *i_buf) morapi_Result morapi_IStream_cleanup ( morapi_IStream *self) morapi_Result morapi_IStream_setPos ( morapi_IStream *self, morapi_Pos i_pos) morapi_Int32 morapi_IStream_readP ( morapi_IStream *self, void *o_dst, morapi_Int32 i_size, morapi_Size i_num, morapi_Bool i_swaps_endian) morapi_Int32 morapi_IStream_read ( morapi_IStream *self, void *o_dst, morapi_Size i_size) morapi_Pos morapi_IStream_getPos ( morapi_IStream *self) morapi_Bool morapi_IStream_isEos ( morapi_IStream *self) morapi_Uint8 * morapi_IStream_getBuf ( morapi_IStream *self) morapi_Int32 morapi_IStream_getBufSize ( morapi_IStream *self) morapi_Bool morapi_IStream_isThreadSafe ( morapi_IStream *self)","title":"Getters"},{"location":"structmorapi__IStreamFile.html#detailed-description","text":"A file input stream.","title":"Detailed Description"},{"location":"structmorapi__IStreamFile.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__IStreamFile.html#morapi_create_istreamfile","text":"morapi_IStreamFile * morapi_create_IStreamFile ( morapi_Env * io_env) Creates a file input stream.","title":"morapi_create_IStreamFile()"},{"location":"structmorapi__IStreamFile.html#morapi_destroy_istreamfile","text":"morapi_Result morapi_destroy_IStreamFile ( morapi_Env * io_env, morapi_IStreamFile * self) Destroys the file input stream.","title":"morapi_destroy_IStreamFile()"},{"location":"structmorapi__IStreamFile.html#morapi_istreamfile_initialize","text":"morapi_Result morapi_IStreamFile_initialize ( morapi_IStreamFile * self) Initializes the file input stream with default parameters. Same as morapi_IStreamFile_init(self,0,4096,NULL).","title":"morapi_IStreamFile_initialize()"},{"location":"structmorapi__IStreamFile.html#morapi_istreamfile_init","text":"morapi_Result morapi_IStreamFile_init ( morapi_IStreamFile * self, morapi_Int32 i_file_name_len_max, morapi_Int32 i_buf_size, void * i_buf) Initializes the file input stream. Parameters self : the file input stream. i_file_name_len_max : the maximum length of the file name. If 0 is given, the file name is dynamically allocated. i_buf_size : the buffer size of the input stream. i_buf : the buffer of the input stream. If NULL is given, the buffer is allocated internally.","title":"morapi_IStreamFile_init()"},{"location":"structmorapi__IStreamFile.html#morapi_istreamfile_cleanup","text":"morapi_Result morapi_IStreamFile_cleanup ( morapi_IStreamFile * self) Cleans up the file input stream.","title":"morapi_IStreamFile_cleanup()"},{"location":"structmorapi__IStreamFile.html#morapi_istreamfile_open","text":"morapi_Result morapi_IStreamFile_open ( morapi_IStreamFile * self, const morapi_Char * i_file_name) Opens the file input stream. Parameters self : the file input stream. i_file_name : the name of the file to open.","title":"morapi_IStreamFile_open()"},{"location":"structmorapi__IStreamFile.html#morapi_istreamfile_close","text":"morapi_Result morapi_IStreamFile_close ( morapi_IStreamFile * self) Closes the file input stream. After calling this function, The file name remains and can be gotton using morapi_IStreamFile_getFileName() .","title":"morapi_IStreamFile_close()"},{"location":"structmorapi__IStreamFile.html#morapi_istreamfile_getbase","text":"morapi_IStream * morapi_IStreamFile_getBase ( morapi_IStreamFile * self) Gets the base input stream.","title":"morapi_IStreamFile_getBase()"},{"location":"structmorapi__IStreamFile.html#morapi_istreamfile_getfilename","text":"const morapi_Char * morapi_IStreamFile_getFileName ( morapi_IStreamFile * self) Gets the file name.","title":"morapi_IStreamFile_getFileName()"},{"location":"structmorapi__IStreamFile.html#morapi_istreamfile_isopen","text":"morapi_Bool morapi_IStreamFile_isOpen ( morapi_IStreamFile * self) Returns whether the file input stream is open.","title":"morapi_IStreamFile_isOpen()"},{"location":"structmorapi__IStreamString.html","text":"morapi_IStreamString Struct Reference core \u00bb stream \u00bb istream An input stream from a string. More... #include <morapi_core_old.h> Inherits morapi_IStream . Public Member Functions Construction and destruction morapi_IStreamString * morapi_create_IStreamString ( morapi_Env *io_env) morapi_Result morapi_destroy_IStreamString ( morapi_Env *io_env, morapi_IStreamString *self) morapi_Result morapi_IStreamString_initialize ( morapi_IStreamString *self) morapi_Result morapi_IStreamString_cleanup ( morapi_IStreamString *self) Operations morapi_Result morapi_IStreamString_open ( morapi_IStreamString *self, const morapi_Char *i_string) Getters morapi_IStream * morapi_IStreamString_getBase ( morapi_IStreamString *self) morapi_IStream * morapi_create_IStream ( morapi_Env *io_env) morapi_Result morapi_destroy_IStream ( morapi_Env *io_env, morapi_IStream *self) morapi_Result morapi_IStream_setVF ( morapi_IStream *self, morapi_VF_IStream *i_vf, void *i_derived) morapi_Result morapi_IStream_initialize ( morapi_IStream *self) morapi_Result morapi_IStream_init ( morapi_IStream *self, morapi_Int32 i_buf_size, void *i_buf) morapi_Result morapi_IStream_cleanup ( morapi_IStream *self) morapi_Result morapi_IStream_setPos ( morapi_IStream *self, morapi_Pos i_pos) morapi_Int32 morapi_IStream_readP ( morapi_IStream *self, void *o_dst, morapi_Int32 i_size, morapi_Size i_num, morapi_Bool i_swaps_endian) morapi_Int32 morapi_IStream_read ( morapi_IStream *self, void *o_dst, morapi_Size i_size) morapi_Pos morapi_IStream_getPos ( morapi_IStream *self) morapi_Bool morapi_IStream_isEos ( morapi_IStream *self) morapi_Uint8 * morapi_IStream_getBuf ( morapi_IStream *self) morapi_Int32 morapi_IStream_getBufSize ( morapi_IStream *self) morapi_Bool morapi_IStream_isThreadSafe ( morapi_IStream *self) Detailed Description An input stream from a string. Unescapes 0xFF 0xFF and 0xFF 0xFE to 0xFF and 0x00 respectively. Member Function Documentation morapi_create_IStreamString() morapi_IStreamString * morapi_create_IStreamString ( morapi_Env * io_env) Creates a input stream from a string. morapi_destroy_IStreamString() morapi_Result morapi_destroy_IStreamString ( morapi_Env * io_env, morapi_IStreamString * self) Destroys the input stream. morapi_IStreamString_initialize() morapi_Result morapi_IStreamString_initialize ( morapi_IStreamString * self) Initializes the input stream. morapi_IStreamString_cleanup() morapi_Result morapi_IStreamString_cleanup ( morapi_IStreamString * self) Cleans up the input stream. morapi_IStreamString_open() morapi_Result morapi_IStreamString_open ( morapi_IStreamString * self, const morapi_Char * i_string) Opens the input stream with a string. morapi_IStreamString_getBase() morapi_IStream * morapi_IStreamString_getBase ( morapi_IStreamString * self) Gets the base object.","title":"morapi_IStreamString Struct Reference"},{"location":"structmorapi__IStreamString.html#morapi_istreamstring-struct-reference","text":"core \u00bb stream \u00bb istream An input stream from a string. More... #include <morapi_core_old.h> Inherits morapi_IStream .","title":"morapi_IStreamString Struct Reference"},{"location":"structmorapi__IStreamString.html#public-member-functions","text":"","title":"Public Member Functions"},{"location":"structmorapi__IStreamString.html#construction-and-destruction","text":"morapi_IStreamString * morapi_create_IStreamString ( morapi_Env *io_env) morapi_Result morapi_destroy_IStreamString ( morapi_Env *io_env, morapi_IStreamString *self) morapi_Result morapi_IStreamString_initialize ( morapi_IStreamString *self) morapi_Result morapi_IStreamString_cleanup ( morapi_IStreamString *self)","title":"Construction and destruction"},{"location":"structmorapi__IStreamString.html#operations","text":"morapi_Result morapi_IStreamString_open ( morapi_IStreamString *self, const morapi_Char *i_string)","title":"Operations"},{"location":"structmorapi__IStreamString.html#getters","text":"morapi_IStream * morapi_IStreamString_getBase ( morapi_IStreamString *self) morapi_IStream * morapi_create_IStream ( morapi_Env *io_env) morapi_Result morapi_destroy_IStream ( morapi_Env *io_env, morapi_IStream *self) morapi_Result morapi_IStream_setVF ( morapi_IStream *self, morapi_VF_IStream *i_vf, void *i_derived) morapi_Result morapi_IStream_initialize ( morapi_IStream *self) morapi_Result morapi_IStream_init ( morapi_IStream *self, morapi_Int32 i_buf_size, void *i_buf) morapi_Result morapi_IStream_cleanup ( morapi_IStream *self) morapi_Result morapi_IStream_setPos ( morapi_IStream *self, morapi_Pos i_pos) morapi_Int32 morapi_IStream_readP ( morapi_IStream *self, void *o_dst, morapi_Int32 i_size, morapi_Size i_num, morapi_Bool i_swaps_endian) morapi_Int32 morapi_IStream_read ( morapi_IStream *self, void *o_dst, morapi_Size i_size) morapi_Pos morapi_IStream_getPos ( morapi_IStream *self) morapi_Bool morapi_IStream_isEos ( morapi_IStream *self) morapi_Uint8 * morapi_IStream_getBuf ( morapi_IStream *self) morapi_Int32 morapi_IStream_getBufSize ( morapi_IStream *self) morapi_Bool morapi_IStream_isThreadSafe ( morapi_IStream *self)","title":"Getters"},{"location":"structmorapi__IStreamString.html#detailed-description","text":"An input stream from a string. Unescapes 0xFF 0xFF and 0xFF 0xFE to 0xFF and 0x00 respectively.","title":"Detailed Description"},{"location":"structmorapi__IStreamString.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__IStreamString.html#morapi_create_istreamstring","text":"morapi_IStreamString * morapi_create_IStreamString ( morapi_Env * io_env) Creates a input stream from a string.","title":"morapi_create_IStreamString()"},{"location":"structmorapi__IStreamString.html#morapi_destroy_istreamstring","text":"morapi_Result morapi_destroy_IStreamString ( morapi_Env * io_env, morapi_IStreamString * self) Destroys the input stream.","title":"morapi_destroy_IStreamString()"},{"location":"structmorapi__IStreamString.html#morapi_istreamstring_initialize","text":"morapi_Result morapi_IStreamString_initialize ( morapi_IStreamString * self) Initializes the input stream.","title":"morapi_IStreamString_initialize()"},{"location":"structmorapi__IStreamString.html#morapi_istreamstring_cleanup","text":"morapi_Result morapi_IStreamString_cleanup ( morapi_IStreamString * self) Cleans up the input stream.","title":"morapi_IStreamString_cleanup()"},{"location":"structmorapi__IStreamString.html#morapi_istreamstring_open","text":"morapi_Result morapi_IStreamString_open ( morapi_IStreamString * self, const morapi_Char * i_string) Opens the input stream with a string.","title":"morapi_IStreamString_open()"},{"location":"structmorapi__IStreamString.html#morapi_istreamstring_getbase","text":"morapi_IStream * morapi_IStreamString_getBase ( morapi_IStreamString * self) Gets the base object.","title":"morapi_IStreamString_getBase()"},{"location":"structmorapi__Image.html","text":"morapi_Image Struct Reference image Image. More... #include <morapi_image.h> Public Member Functions Constructs, destructs, initializes and cleans up morapi_Image * morapi_create_Image ( morapi_Env *io_env) morapi_Result morapi_destroy_Image ( morapi_Env *io_env, morapi_Image *self) morapi_Result morapi_Image_init ( morapi_Image *self, morapi_ImageFormat i_format, morapi_Int32 i_width, morapi_Int32 i_height, morapi_ImagePlane *i_plane) morapi_Result morapi_Image_cleanup ( morapi_Image *self) Gets a image format, width and height morapi_ImageFormat morapi_Image_getFormat (const morapi_Image *self) morapi_Int32 morapi_Image_getWidth (const morapi_Image *self) morapi_Int32 morapi_Image_getHeight (const morapi_Image *self) Gets a pixel morapi_Uint8 * morapi_Image_getPlaneUint8 (const morapi_Image *self, morapi_Int32 i_plane, morapi_Int32 i_x, morapi_Int32 i_y) morapi_Int8 * morapi_Image_getPlaneInt8 (const morapi_Image *self, morapi_Int32 i_plane, morapi_Int32 i_x, morapi_Int32 i_y) morapi_Uint16 * morapi_Image_getPlaneUint16 (const morapi_Image *self, morapi_Int32 i_plane, morapi_Int32 i_x, morapi_Int32 i_y) morapi_Int16 * morapi_Image_getPlaneInt16 (const morapi_Image *self, morapi_Int32 i_plane, morapi_Int32 i_x, morapi_Int32 i_y) morapi_Uint32 * morapi_Image_getPlaneUint32 (const morapi_Image *self, morapi_Int32 i_plane, morapi_Int32 i_x, morapi_Int32 i_y) morapi_Int32 * morapi_Image_getPlaneInt32 (const morapi_Image *self, morapi_Int32 i_plane, morapi_Int32 i_x, morapi_Int32 i_y) morapi_Uint64 * morapi_Image_getPlaneUint64 (const morapi_Image *self, morapi_Int32 i_plane, morapi_Int32 i_x, morapi_Int32 i_y) morapi_Int64 * morapi_Image_getPlaneInt64 (const morapi_Image *self, morapi_Int32 i_plane, morapi_Int32 i_x, morapi_Int32 i_y) morapi_Uint8 * morapi_Image_getUint8 (const morapi_Image *self, morapi_Int32 i_x, morapi_Int32 i_y) morapi_Int8 * morapi_Image_getInt8 (const morapi_Image *self, morapi_Int32 i_x, morapi_Int32 i_y) morapi_Uint16 * morapi_Image_getUint16 (const morapi_Image *self, morapi_Int32 i_x, morapi_Int32 i_y) morapi_Int16 * morapi_Image_getInt16 (const morapi_Image *self, morapi_Int32 i_x, morapi_Int32 i_y) morapi_Uint32 * morapi_Image_getUint32 (const morapi_Image *self, morapi_Int32 i_x, morapi_Int32 i_y) morapi_Int32 * morapi_Image_getInt32 (const morapi_Image *self, morapi_Int32 i_x, morapi_Int32 i_y) morapi_Uint64 * morapi_Image_getUint64 (const morapi_Image *self, morapi_Int32 i_x, morapi_Int32 i_y) morapi_Int64 * morapi_Image_getInt64 (const morapi_Image *self, morapi_Int32 i_x, morapi_Int32 i_y) Operations morapi_Result morapi_Image_clear ( morapi_Image *self, morapi_Uint32 i_col0, morapi_Uint32 i_col1, morapi_Uint32 i_col2, morapi_Uint32 i_col3) Detailed Description Image. test_dnn_api.c . Member Function Documentation morapi_create_Image() morapi_Image * morapi_create_Image ( morapi_Env * io_env) Creates the images. test_dnn_api.c . morapi_destroy_Image() morapi_Result morapi_destroy_Image ( morapi_Env * io_env, morapi_Image * self) Destroys the images. test_dnn_api.c . morapi_Image_init() morapi_Result morapi_Image_init ( morapi_Image * self, morapi_ImageFormat i_format, morapi_Int32 i_width, morapi_Int32 i_height, morapi_ImagePlane * i_plane) Initializes the image data. Parameters self : the initialized image. i_format : the image format. i_width,i_height : the width and height of the image. i_plane : the plane data. If NULL is specified, the plane data and the line step are automatically and internally allocated. If plane[i].data is NULL, it is automatically and internally allocated. If plane[i].line_step is less than or equals to 0, it is automatically calculated and set. morapi_Image_cleanup() morapi_Result morapi_Image_cleanup ( morapi_Image * self) Cleans up the image. morapi_Image_getFormat() morapi_ImageFormat morapi_Image_getFormat (const morapi_Image * self) Gets the image format. morapi_Image_getWidth() morapi_Int32 morapi_Image_getWidth (const morapi_Image * self) Gets the width of the image. morapi_Image_getHeight() morapi_Int32 morapi_Image_getHeight (const morapi_Image * self) Gets the height of the image. morapi_Image_getPlaneUint8() morapi_Uint8 * morapi_Image_getPlaneUint8 (const morapi_Image * self, morapi_Int32 i_plane, morapi_Int32 i_x, morapi_Int32 i_y) Gets a pixel at (i_x, i_y) in a plane i_plane (morapi_Uint8 version). morapi_Image_getPlaneInt8() morapi_Int8 * morapi_Image_getPlaneInt8 (const morapi_Image * self, morapi_Int32 i_plane, morapi_Int32 i_x, morapi_Int32 i_y) Gets a pixel at (i_x, i_y) in a plane i_plane (morapi_Int8 version). morapi_Image_getPlaneUint16() morapi_Uint16 * morapi_Image_getPlaneUint16 (const morapi_Image * self, morapi_Int32 i_plane, morapi_Int32 i_x, morapi_Int32 i_y) Gets a pixel at (i_x, i_y) in a plane i_plane (morapi_Uint16 version). morapi_Image_getPlaneInt16() morapi_Int16 * morapi_Image_getPlaneInt16 (const morapi_Image * self, morapi_Int32 i_plane, morapi_Int32 i_x, morapi_Int32 i_y) Gets a pixel at (i_x, i_y) in a plane i_plane (morapi_Int16 version). morapi_Image_getPlaneUint32() morapi_Uint32 * morapi_Image_getPlaneUint32 (const morapi_Image * self, morapi_Int32 i_plane, morapi_Int32 i_x, morapi_Int32 i_y) Gets a pixel at (i_x, i_y) in a plane i_plane (morapi_Uint32 version). morapi_Image_getPlaneInt32() morapi_Int32 * morapi_Image_getPlaneInt32 (const morapi_Image * self, morapi_Int32 i_plane, morapi_Int32 i_x, morapi_Int32 i_y) Gets a pixel at (i_x, i_y) in a plane i_plane (morapi_Int32 version). morapi_Image_getPlaneUint64() morapi_Uint64 * morapi_Image_getPlaneUint64 (const morapi_Image * self, morapi_Int32 i_plane, morapi_Int32 i_x, morapi_Int32 i_y) Gets a pixel at (i_x, i_y) in a plane i_plane (morapi_Uint64 version). morapi_Image_getPlaneInt64() morapi_Int64 * morapi_Image_getPlaneInt64 (const morapi_Image * self, morapi_Int32 i_plane, morapi_Int32 i_x, morapi_Int32 i_y) Gets a pixel at (i_x, i_y) in a plane i_plane (morapi_Int64 version). morapi_Image_getUint8() morapi_Uint8 * morapi_Image_getUint8 (const morapi_Image * self, morapi_Int32 i_x, morapi_Int32 i_y) Gets a pixel at (i_x, i_y) in the first plane (morapi_Uint8 version). morapi_Image_getInt8() morapi_Int8 * morapi_Image_getInt8 (const morapi_Image * self, morapi_Int32 i_x, morapi_Int32 i_y) Gets a pixel at (i_x, i_y) in the first plane (morapi_Int8 version). morapi_Image_getUint16() morapi_Uint16 * morapi_Image_getUint16 (const morapi_Image * self, morapi_Int32 i_x, morapi_Int32 i_y) Gets a pixel at (i_x, i_y) in the first plane (morapi_Uint16 version). morapi_Image_getInt16() morapi_Int16 * morapi_Image_getInt16 (const morapi_Image * self, morapi_Int32 i_x, morapi_Int32 i_y) Gets a pixel at (i_x, i_y) in the first plane (morapi_Int16 version). morapi_Image_getUint32() morapi_Uint32 * morapi_Image_getUint32 (const morapi_Image * self, morapi_Int32 i_x, morapi_Int32 i_y) Gets a pixel at (i_x, i_y) in the first plane (morapi_Uint32 version). morapi_Image_getInt32() morapi_Int32 * morapi_Image_getInt32 (const morapi_Image * self, morapi_Int32 i_x, morapi_Int32 i_y) Gets a pixel at (i_x, i_y) in the first plane (morapi_Int32 version). morapi_Image_getUint64() morapi_Uint64 * morapi_Image_getUint64 (const morapi_Image * self, morapi_Int32 i_x, morapi_Int32 i_y) Gets a pixel at (i_x, i_y) in the first plane (morapi_Uint64 version). morapi_Image_getInt64() morapi_Int64 * morapi_Image_getInt64 (const morapi_Image * self, morapi_Int32 i_x, morapi_Int32 i_y) Gets a pixel at (i_x, i_y) in the first plane (morapi_Int64 version). morapi_Image_clear() morapi_Result morapi_Image_clear ( morapi_Image * self, morapi_Uint32 i_col0, morapi_Uint32 i_col1, morapi_Uint32 i_col2, morapi_Uint32 i_col3) Clears the image. Parameters self : the image to clear. i_col0,i_col1,i_col2,i_col3 : the color which is used to clear the image.","title":"morapi_Image"},{"location":"structmorapi__Image.html#morapi_image-struct-reference","text":"image Image. More... #include <morapi_image.h>","title":"morapi_Image Struct Reference"},{"location":"structmorapi__Image.html#public-member-functions","text":"","title":"Public Member Functions"},{"location":"structmorapi__Image.html#constructs-destructs-initializes-and-cleans-up","text":"morapi_Image * morapi_create_Image ( morapi_Env *io_env) morapi_Result morapi_destroy_Image ( morapi_Env *io_env, morapi_Image *self) morapi_Result morapi_Image_init ( morapi_Image *self, morapi_ImageFormat i_format, morapi_Int32 i_width, morapi_Int32 i_height, morapi_ImagePlane *i_plane) morapi_Result morapi_Image_cleanup ( morapi_Image *self)","title":"Constructs, destructs, initializes and cleans up"},{"location":"structmorapi__Image.html#gets-a-image-format-width-and-height","text":"morapi_ImageFormat morapi_Image_getFormat (const morapi_Image *self) morapi_Int32 morapi_Image_getWidth (const morapi_Image *self) morapi_Int32 morapi_Image_getHeight (const morapi_Image *self)","title":"Gets a image format, width and height"},{"location":"structmorapi__Image.html#gets-a-pixel","text":"morapi_Uint8 * morapi_Image_getPlaneUint8 (const morapi_Image *self, morapi_Int32 i_plane, morapi_Int32 i_x, morapi_Int32 i_y) morapi_Int8 * morapi_Image_getPlaneInt8 (const morapi_Image *self, morapi_Int32 i_plane, morapi_Int32 i_x, morapi_Int32 i_y) morapi_Uint16 * morapi_Image_getPlaneUint16 (const morapi_Image *self, morapi_Int32 i_plane, morapi_Int32 i_x, morapi_Int32 i_y) morapi_Int16 * morapi_Image_getPlaneInt16 (const morapi_Image *self, morapi_Int32 i_plane, morapi_Int32 i_x, morapi_Int32 i_y) morapi_Uint32 * morapi_Image_getPlaneUint32 (const morapi_Image *self, morapi_Int32 i_plane, morapi_Int32 i_x, morapi_Int32 i_y) morapi_Int32 * morapi_Image_getPlaneInt32 (const morapi_Image *self, morapi_Int32 i_plane, morapi_Int32 i_x, morapi_Int32 i_y) morapi_Uint64 * morapi_Image_getPlaneUint64 (const morapi_Image *self, morapi_Int32 i_plane, morapi_Int32 i_x, morapi_Int32 i_y) morapi_Int64 * morapi_Image_getPlaneInt64 (const morapi_Image *self, morapi_Int32 i_plane, morapi_Int32 i_x, morapi_Int32 i_y) morapi_Uint8 * morapi_Image_getUint8 (const morapi_Image *self, morapi_Int32 i_x, morapi_Int32 i_y) morapi_Int8 * morapi_Image_getInt8 (const morapi_Image *self, morapi_Int32 i_x, morapi_Int32 i_y) morapi_Uint16 * morapi_Image_getUint16 (const morapi_Image *self, morapi_Int32 i_x, morapi_Int32 i_y) morapi_Int16 * morapi_Image_getInt16 (const morapi_Image *self, morapi_Int32 i_x, morapi_Int32 i_y) morapi_Uint32 * morapi_Image_getUint32 (const morapi_Image *self, morapi_Int32 i_x, morapi_Int32 i_y) morapi_Int32 * morapi_Image_getInt32 (const morapi_Image *self, morapi_Int32 i_x, morapi_Int32 i_y) morapi_Uint64 * morapi_Image_getUint64 (const morapi_Image *self, morapi_Int32 i_x, morapi_Int32 i_y) morapi_Int64 * morapi_Image_getInt64 (const morapi_Image *self, morapi_Int32 i_x, morapi_Int32 i_y)","title":"Gets a pixel"},{"location":"structmorapi__Image.html#operations","text":"morapi_Result morapi_Image_clear ( morapi_Image *self, morapi_Uint32 i_col0, morapi_Uint32 i_col1, morapi_Uint32 i_col2, morapi_Uint32 i_col3)","title":"Operations"},{"location":"structmorapi__Image.html#detailed-description","text":"Image. test_dnn_api.c .","title":"Detailed Description"},{"location":"structmorapi__Image.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__Image.html#morapi_create_image","text":"morapi_Image * morapi_create_Image ( morapi_Env * io_env) Creates the images. test_dnn_api.c .","title":"morapi_create_Image()"},{"location":"structmorapi__Image.html#morapi_destroy_image","text":"morapi_Result morapi_destroy_Image ( morapi_Env * io_env, morapi_Image * self) Destroys the images. test_dnn_api.c .","title":"morapi_destroy_Image()"},{"location":"structmorapi__Image.html#morapi_image_init","text":"morapi_Result morapi_Image_init ( morapi_Image * self, morapi_ImageFormat i_format, morapi_Int32 i_width, morapi_Int32 i_height, morapi_ImagePlane * i_plane) Initializes the image data. Parameters self : the initialized image. i_format : the image format. i_width,i_height : the width and height of the image. i_plane : the plane data. If NULL is specified, the plane data and the line step are automatically and internally allocated. If plane[i].data is NULL, it is automatically and internally allocated. If plane[i].line_step is less than or equals to 0, it is automatically calculated and set.","title":"morapi_Image_init()"},{"location":"structmorapi__Image.html#morapi_image_cleanup","text":"morapi_Result morapi_Image_cleanup ( morapi_Image * self) Cleans up the image.","title":"morapi_Image_cleanup()"},{"location":"structmorapi__Image.html#morapi_image_getformat","text":"morapi_ImageFormat morapi_Image_getFormat (const morapi_Image * self) Gets the image format.","title":"morapi_Image_getFormat()"},{"location":"structmorapi__Image.html#morapi_image_getwidth","text":"morapi_Int32 morapi_Image_getWidth (const morapi_Image * self) Gets the width of the image.","title":"morapi_Image_getWidth()"},{"location":"structmorapi__Image.html#morapi_image_getheight","text":"morapi_Int32 morapi_Image_getHeight (const morapi_Image * self) Gets the height of the image.","title":"morapi_Image_getHeight()"},{"location":"structmorapi__Image.html#morapi_image_getplaneuint8","text":"morapi_Uint8 * morapi_Image_getPlaneUint8 (const morapi_Image * self, morapi_Int32 i_plane, morapi_Int32 i_x, morapi_Int32 i_y) Gets a pixel at (i_x, i_y) in a plane i_plane (morapi_Uint8 version).","title":"morapi_Image_getPlaneUint8()"},{"location":"structmorapi__Image.html#morapi_image_getplaneint8","text":"morapi_Int8 * morapi_Image_getPlaneInt8 (const morapi_Image * self, morapi_Int32 i_plane, morapi_Int32 i_x, morapi_Int32 i_y) Gets a pixel at (i_x, i_y) in a plane i_plane (morapi_Int8 version).","title":"morapi_Image_getPlaneInt8()"},{"location":"structmorapi__Image.html#morapi_image_getplaneuint16","text":"morapi_Uint16 * morapi_Image_getPlaneUint16 (const morapi_Image * self, morapi_Int32 i_plane, morapi_Int32 i_x, morapi_Int32 i_y) Gets a pixel at (i_x, i_y) in a plane i_plane (morapi_Uint16 version).","title":"morapi_Image_getPlaneUint16()"},{"location":"structmorapi__Image.html#morapi_image_getplaneint16","text":"morapi_Int16 * morapi_Image_getPlaneInt16 (const morapi_Image * self, morapi_Int32 i_plane, morapi_Int32 i_x, morapi_Int32 i_y) Gets a pixel at (i_x, i_y) in a plane i_plane (morapi_Int16 version).","title":"morapi_Image_getPlaneInt16()"},{"location":"structmorapi__Image.html#morapi_image_getplaneuint32","text":"morapi_Uint32 * morapi_Image_getPlaneUint32 (const morapi_Image * self, morapi_Int32 i_plane, morapi_Int32 i_x, morapi_Int32 i_y) Gets a pixel at (i_x, i_y) in a plane i_plane (morapi_Uint32 version).","title":"morapi_Image_getPlaneUint32()"},{"location":"structmorapi__Image.html#morapi_image_getplaneint32","text":"morapi_Int32 * morapi_Image_getPlaneInt32 (const morapi_Image * self, morapi_Int32 i_plane, morapi_Int32 i_x, morapi_Int32 i_y) Gets a pixel at (i_x, i_y) in a plane i_plane (morapi_Int32 version).","title":"morapi_Image_getPlaneInt32()"},{"location":"structmorapi__Image.html#morapi_image_getplaneuint64","text":"morapi_Uint64 * morapi_Image_getPlaneUint64 (const morapi_Image * self, morapi_Int32 i_plane, morapi_Int32 i_x, morapi_Int32 i_y) Gets a pixel at (i_x, i_y) in a plane i_plane (morapi_Uint64 version).","title":"morapi_Image_getPlaneUint64()"},{"location":"structmorapi__Image.html#morapi_image_getplaneint64","text":"morapi_Int64 * morapi_Image_getPlaneInt64 (const morapi_Image * self, morapi_Int32 i_plane, morapi_Int32 i_x, morapi_Int32 i_y) Gets a pixel at (i_x, i_y) in a plane i_plane (morapi_Int64 version).","title":"morapi_Image_getPlaneInt64()"},{"location":"structmorapi__Image.html#morapi_image_getuint8","text":"morapi_Uint8 * morapi_Image_getUint8 (const morapi_Image * self, morapi_Int32 i_x, morapi_Int32 i_y) Gets a pixel at (i_x, i_y) in the first plane (morapi_Uint8 version).","title":"morapi_Image_getUint8()"},{"location":"structmorapi__Image.html#morapi_image_getint8","text":"morapi_Int8 * morapi_Image_getInt8 (const morapi_Image * self, morapi_Int32 i_x, morapi_Int32 i_y) Gets a pixel at (i_x, i_y) in the first plane (morapi_Int8 version).","title":"morapi_Image_getInt8()"},{"location":"structmorapi__Image.html#morapi_image_getuint16","text":"morapi_Uint16 * morapi_Image_getUint16 (const morapi_Image * self, morapi_Int32 i_x, morapi_Int32 i_y) Gets a pixel at (i_x, i_y) in the first plane (morapi_Uint16 version).","title":"morapi_Image_getUint16()"},{"location":"structmorapi__Image.html#morapi_image_getint16","text":"morapi_Int16 * morapi_Image_getInt16 (const morapi_Image * self, morapi_Int32 i_x, morapi_Int32 i_y) Gets a pixel at (i_x, i_y) in the first plane (morapi_Int16 version).","title":"morapi_Image_getInt16()"},{"location":"structmorapi__Image.html#morapi_image_getuint32","text":"morapi_Uint32 * morapi_Image_getUint32 (const morapi_Image * self, morapi_Int32 i_x, morapi_Int32 i_y) Gets a pixel at (i_x, i_y) in the first plane (morapi_Uint32 version).","title":"morapi_Image_getUint32()"},{"location":"structmorapi__Image.html#morapi_image_getint32","text":"morapi_Int32 * morapi_Image_getInt32 (const morapi_Image * self, morapi_Int32 i_x, morapi_Int32 i_y) Gets a pixel at (i_x, i_y) in the first plane (morapi_Int32 version).","title":"morapi_Image_getInt32()"},{"location":"structmorapi__Image.html#morapi_image_getuint64","text":"morapi_Uint64 * morapi_Image_getUint64 (const morapi_Image * self, morapi_Int32 i_x, morapi_Int32 i_y) Gets a pixel at (i_x, i_y) in the first plane (morapi_Uint64 version).","title":"morapi_Image_getUint64()"},{"location":"structmorapi__Image.html#morapi_image_getint64","text":"morapi_Int64 * morapi_Image_getInt64 (const morapi_Image * self, morapi_Int32 i_x, morapi_Int32 i_y) Gets a pixel at (i_x, i_y) in the first plane (morapi_Int64 version).","title":"morapi_Image_getInt64()"},{"location":"structmorapi__Image.html#morapi_image_clear","text":"morapi_Result morapi_Image_clear ( morapi_Image * self, morapi_Uint32 i_col0, morapi_Uint32 i_col1, morapi_Uint32 i_col2, morapi_Uint32 i_col3) Clears the image. Parameters self : the image to clear. i_col0,i_col1,i_col2,i_col3 : the color which is used to clear the image.","title":"morapi_Image_clear()"},{"location":"structmorapi__ImagePlane.html","text":"morapi_ImagePlane Struct Reference image Image plane. More... #include <morapi_image.h> Public Member Functions morapi_Result morapi_ImagePlane_clear ( morapi_ImagePlane *self) Data Fields morapi_Int32 line_step morapi_Uint8 * data Detailed Description Image plane. Member Function Documentation morapi_ImagePlane_clear() morapi_Result morapi_ImagePlane_clear ( morapi_ImagePlane * self) Clears an image plane. Field Documentation line_step morapi_Int32 line_step The line step of each scanline (byte). data morapi_Uint8 * data The image data.","title":"morapi_ImagePlane"},{"location":"structmorapi__ImagePlane.html#morapi_imageplane-struct-reference","text":"image Image plane. More... #include <morapi_image.h>","title":"morapi_ImagePlane Struct Reference"},{"location":"structmorapi__ImagePlane.html#public-member-functions","text":"morapi_Result morapi_ImagePlane_clear ( morapi_ImagePlane *self)","title":"Public Member Functions"},{"location":"structmorapi__ImagePlane.html#data-fields","text":"morapi_Int32 line_step morapi_Uint8 * data","title":"Data Fields"},{"location":"structmorapi__ImagePlane.html#detailed-description","text":"Image plane.","title":"Detailed Description"},{"location":"structmorapi__ImagePlane.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__ImagePlane.html#morapi_imageplane_clear","text":"morapi_Result morapi_ImagePlane_clear ( morapi_ImagePlane * self) Clears an image plane.","title":"morapi_ImagePlane_clear()"},{"location":"structmorapi__ImagePlane.html#field-documentation","text":"","title":"Field Documentation"},{"location":"structmorapi__ImagePlane.html#line_step","text":"morapi_Int32 line_step The line step of each scanline (byte).","title":"line_step"},{"location":"structmorapi__ImagePlane.html#data","text":"morapi_Uint8 * data The image data.","title":"data"},{"location":"structmorapi__Json.html","text":"morapi_Json Struct Reference core \u00bb json A json. More... #include <morapi_core_old.h> Public Member Functions Construction and destruction morapi_Json * morapi_create_Json ( morapi_Env *io_env) morapi_Result morapi_destroy_Json ( morapi_Env *io_env, morapi_Json *self) morapi_Result morapi_Json_initialize ( morapi_Json *self) Operations morapi_Result morapi_Json_clear ( morapi_Json *self) morapi_Result morapi_Json_copy ( morapi_Json *self, const morapi_Json *i_src) morapi_Result morapi_Json_read ( morapi_Json *self, morapi_IStream *i_istream) morapi_Result morapi_Json_write (const morapi_Json *self, morapi_OStream *o_ostream, morapi_Bool i_indents, morapi_Bool i_is_utf8) morapi_Result morapi_Json_readString ( morapi_Json *self, const morapi_Char *i_string) morapi_Result morapi_Json_writeString (const morapi_Json *self, morapi_String *o_string, morapi_Bool i_indents, morapi_Bool i_is_utf8) Getters morapi_JsonType morapi_Json_getType (const morapi_Json *self) const morapi_Char * morapi_Json_getKey (const morapi_Json *self) morapi_Json * morapi_Json_getParent (const morapi_Json *self) morapi_Json * morapi_Json_getPrev (const morapi_Json *self) morapi_Json * morapi_Json_getNext (const morapi_Json *self) morapi_JsonData * morapi_Json_getData (const morapi_Json *self) Detailed Description A json. Member Function Documentation morapi_create_Json() morapi_Json * morapi_create_Json ( morapi_Env * io_env) Creates a json. morapi_destroy_Json() morapi_Result morapi_destroy_Json ( morapi_Env * io_env, morapi_Json * self) Destroys the json. morapi_Json_initialize() morapi_Result morapi_Json_initialize ( morapi_Json * self) Initializes the json with default parameters. morapi_Json_clear() morapi_Result morapi_Json_clear ( morapi_Json * self) Clears the json. The json is set to MORAPI_JSON_TYPE_NULL. morapi_Json_copy() morapi_Result morapi_Json_copy ( morapi_Json * self, const morapi_Json * i_src) Copies a json deeply. morapi_Json_read() morapi_Result morapi_Json_read ( morapi_Json * self, morapi_IStream * i_istream) Reads the json from i_istream. If i_istream is empty, the self's type becomes MORAPI_JSON_TYPE_NULL. morapi_Json_write() morapi_Result morapi_Json_write (const morapi_Json * self, morapi_OStream * o_ostream, morapi_Bool i_indents, morapi_Bool i_is_utf8) Writes the json to o_ostream. Parameters self : the json. o_ostream : the output stream. i_indents : whether outputs with indenting or not. i_is_utf8 : whether outputs UTF8 directly (MORAPI_TRUE) or escaped (MORAPI_FALSE). morapi_Json_readString() morapi_Result morapi_Json_readString ( morapi_Json * self, const morapi_Char * i_string) Reads the json from i_string and returns self. morapi_Json_writeString() morapi_Result morapi_Json_writeString (const morapi_Json * self, morapi_String * o_string, morapi_Bool i_indents, morapi_Bool i_is_utf8) Writes the json to o_string. Parameters self : the json. o_string : the output string. Note that it automatically clears o_string before writing. i_indents : whether outputs with indenting or not. i_is_utf8 : whether outputs UTF8 directly (MORAPI_TRUE) or escaped (MORAPI_FALSE). morapi_Json_getType() morapi_JsonType morapi_Json_getType (const morapi_Json * self) Gets a json type. morapi_Json_getKey() const morapi_Char * morapi_Json_getKey (const morapi_Json * self) Gets the key of the json if exists, otherwise returns NULL. morapi_Json_getParent() morapi_Json * morapi_Json_getParent (const morapi_Json * self) Gets the parent of the json. morapi_Json_getPrev() morapi_Json * morapi_Json_getPrev (const morapi_Json * self) Gets the previous json of self if exists, otherwise returns NULL. morapi_Json_getNext() morapi_Json * morapi_Json_getNext (const morapi_Json * self) Gets the next json of self if exists, otherwise returns NULL. morapi_Json_getData() morapi_JsonData * morapi_Json_getData (const morapi_Json * self) Gets the json data.","title":"morapi_Json Struct Reference"},{"location":"structmorapi__Json.html#morapi_json-struct-reference","text":"core \u00bb json A json. More... #include <morapi_core_old.h>","title":"morapi_Json Struct Reference"},{"location":"structmorapi__Json.html#public-member-functions","text":"","title":"Public Member Functions"},{"location":"structmorapi__Json.html#construction-and-destruction","text":"morapi_Json * morapi_create_Json ( morapi_Env *io_env) morapi_Result morapi_destroy_Json ( morapi_Env *io_env, morapi_Json *self) morapi_Result morapi_Json_initialize ( morapi_Json *self)","title":"Construction and destruction"},{"location":"structmorapi__Json.html#operations","text":"morapi_Result morapi_Json_clear ( morapi_Json *self) morapi_Result morapi_Json_copy ( morapi_Json *self, const morapi_Json *i_src) morapi_Result morapi_Json_read ( morapi_Json *self, morapi_IStream *i_istream) morapi_Result morapi_Json_write (const morapi_Json *self, morapi_OStream *o_ostream, morapi_Bool i_indents, morapi_Bool i_is_utf8) morapi_Result morapi_Json_readString ( morapi_Json *self, const morapi_Char *i_string) morapi_Result morapi_Json_writeString (const morapi_Json *self, morapi_String *o_string, morapi_Bool i_indents, morapi_Bool i_is_utf8)","title":"Operations"},{"location":"structmorapi__Json.html#getters","text":"morapi_JsonType morapi_Json_getType (const morapi_Json *self) const morapi_Char * morapi_Json_getKey (const morapi_Json *self) morapi_Json * morapi_Json_getParent (const morapi_Json *self) morapi_Json * morapi_Json_getPrev (const morapi_Json *self) morapi_Json * morapi_Json_getNext (const morapi_Json *self) morapi_JsonData * morapi_Json_getData (const morapi_Json *self)","title":"Getters"},{"location":"structmorapi__Json.html#detailed-description","text":"A json.","title":"Detailed Description"},{"location":"structmorapi__Json.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__Json.html#morapi_create_json","text":"morapi_Json * morapi_create_Json ( morapi_Env * io_env) Creates a json.","title":"morapi_create_Json()"},{"location":"structmorapi__Json.html#morapi_destroy_json","text":"morapi_Result morapi_destroy_Json ( morapi_Env * io_env, morapi_Json * self) Destroys the json.","title":"morapi_destroy_Json()"},{"location":"structmorapi__Json.html#morapi_json_initialize","text":"morapi_Result morapi_Json_initialize ( morapi_Json * self) Initializes the json with default parameters.","title":"morapi_Json_initialize()"},{"location":"structmorapi__Json.html#morapi_json_clear","text":"morapi_Result morapi_Json_clear ( morapi_Json * self) Clears the json. The json is set to MORAPI_JSON_TYPE_NULL.","title":"morapi_Json_clear()"},{"location":"structmorapi__Json.html#morapi_json_copy","text":"morapi_Result morapi_Json_copy ( morapi_Json * self, const morapi_Json * i_src) Copies a json deeply.","title":"morapi_Json_copy()"},{"location":"structmorapi__Json.html#morapi_json_read","text":"morapi_Result morapi_Json_read ( morapi_Json * self, morapi_IStream * i_istream) Reads the json from i_istream. If i_istream is empty, the self's type becomes MORAPI_JSON_TYPE_NULL.","title":"morapi_Json_read()"},{"location":"structmorapi__Json.html#morapi_json_write","text":"morapi_Result morapi_Json_write (const morapi_Json * self, morapi_OStream * o_ostream, morapi_Bool i_indents, morapi_Bool i_is_utf8) Writes the json to o_ostream. Parameters self : the json. o_ostream : the output stream. i_indents : whether outputs with indenting or not. i_is_utf8 : whether outputs UTF8 directly (MORAPI_TRUE) or escaped (MORAPI_FALSE).","title":"morapi_Json_write()"},{"location":"structmorapi__Json.html#morapi_json_readstring","text":"morapi_Result morapi_Json_readString ( morapi_Json * self, const morapi_Char * i_string) Reads the json from i_string and returns self.","title":"morapi_Json_readString()"},{"location":"structmorapi__Json.html#morapi_json_writestring","text":"morapi_Result morapi_Json_writeString (const morapi_Json * self, morapi_String * o_string, morapi_Bool i_indents, morapi_Bool i_is_utf8) Writes the json to o_string. Parameters self : the json. o_string : the output string. Note that it automatically clears o_string before writing. i_indents : whether outputs with indenting or not. i_is_utf8 : whether outputs UTF8 directly (MORAPI_TRUE) or escaped (MORAPI_FALSE).","title":"morapi_Json_writeString()"},{"location":"structmorapi__Json.html#morapi_json_gettype","text":"morapi_JsonType morapi_Json_getType (const morapi_Json * self) Gets a json type.","title":"morapi_Json_getType()"},{"location":"structmorapi__Json.html#morapi_json_getkey","text":"const morapi_Char * morapi_Json_getKey (const morapi_Json * self) Gets the key of the json if exists, otherwise returns NULL.","title":"morapi_Json_getKey()"},{"location":"structmorapi__Json.html#morapi_json_getparent","text":"morapi_Json * morapi_Json_getParent (const morapi_Json * self) Gets the parent of the json.","title":"morapi_Json_getParent()"},{"location":"structmorapi__Json.html#morapi_json_getprev","text":"morapi_Json * morapi_Json_getPrev (const morapi_Json * self) Gets the previous json of self if exists, otherwise returns NULL.","title":"morapi_Json_getPrev()"},{"location":"structmorapi__Json.html#morapi_json_getnext","text":"morapi_Json * morapi_Json_getNext (const morapi_Json * self) Gets the next json of self if exists, otherwise returns NULL.","title":"morapi_Json_getNext()"},{"location":"structmorapi__Json.html#morapi_json_getdata","text":"morapi_JsonData * morapi_Json_getData (const morapi_Json * self) Gets the json data.","title":"morapi_Json_getData()"},{"location":"structmorapi__JsonArray.html","text":"morapi_JsonArray Struct Reference core \u00bb json A json array. More... #include <morapi_core_old.h> Public Member Functions morapi_Json * morapi_JsonArray_pushFront ( morapi_JsonArray *self, morapi_JsonType i_type) morapi_Json * morapi_JsonArray_get ( morapi_JsonArray *self, morapi_Int32 i_index) morapi_Int32 morapi_JsonArray_getNum ( morapi_JsonArray *self) Detailed Description A json array. Member Function Documentation morapi_JsonArray_pushFront() morapi_Json * morapi_JsonArray_pushFront ( morapi_JsonArray * self, morapi_JsonType i_type) Inserts a new json object whose type is i_type at the front of this array. morapi_JsonArray_get() morapi_Json * morapi_JsonArray_get ( morapi_JsonArray * self, morapi_Int32 i_index) Gets the i_index-th json object. morapi_JsonArray_getNum() morapi_Int32 morapi_JsonArray_getNum ( morapi_JsonArray * self) Gets the number of children.","title":"morapi_JsonArray Struct Reference"},{"location":"structmorapi__JsonArray.html#morapi_jsonarray-struct-reference","text":"core \u00bb json A json array. More... #include <morapi_core_old.h>","title":"morapi_JsonArray Struct Reference"},{"location":"structmorapi__JsonArray.html#public-member-functions","text":"morapi_Json * morapi_JsonArray_pushFront ( morapi_JsonArray *self, morapi_JsonType i_type) morapi_Json * morapi_JsonArray_get ( morapi_JsonArray *self, morapi_Int32 i_index) morapi_Int32 morapi_JsonArray_getNum ( morapi_JsonArray *self)","title":"Public Member Functions"},{"location":"structmorapi__JsonArray.html#detailed-description","text":"A json array.","title":"Detailed Description"},{"location":"structmorapi__JsonArray.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__JsonArray.html#morapi_jsonarray_pushfront","text":"morapi_Json * morapi_JsonArray_pushFront ( morapi_JsonArray * self, morapi_JsonType i_type) Inserts a new json object whose type is i_type at the front of this array.","title":"morapi_JsonArray_pushFront()"},{"location":"structmorapi__JsonArray.html#morapi_jsonarray_get","text":"morapi_Json * morapi_JsonArray_get ( morapi_JsonArray * self, morapi_Int32 i_index) Gets the i_index-th json object.","title":"morapi_JsonArray_get()"},{"location":"structmorapi__JsonArray.html#morapi_jsonarray_getnum","text":"morapi_Int32 morapi_JsonArray_getNum ( morapi_JsonArray * self) Gets the number of children.","title":"morapi_JsonArray_getNum()"},{"location":"structmorapi__JsonObject.html","text":"morapi_JsonObject Struct Reference core \u00bb json A json object. More... #include <morapi_core_old.h> Public Member Functions morapi_Json * morapi_JsonObject_pushBack ( morapi_JsonObject *self, const morapi_Char *i_key, morapi_JsonType i_type) morapi_Json * morapi_JsonObject_pushFront ( morapi_JsonObject *self, const morapi_Char *i_key, morapi_JsonType i_type) Detailed Description A json object. Member Function Documentation morapi_JsonObject_pushBack() morapi_Json * morapi_JsonObject_pushBack ( morapi_JsonObject * self, const morapi_Char * i_key, morapi_JsonType i_type) Inserts a new json object whose key is i_key and type is i_type at the back of this dictionary. morapi_JsonObject_pushFront() morapi_Json * morapi_JsonObject_pushFront ( morapi_JsonObject * self, const morapi_Char * i_key, morapi_JsonType i_type) Inserts a new json object whose key is i_key and type is i_type at the front of this dictionary.","title":"morapi_JsonObject Struct Reference"},{"location":"structmorapi__JsonObject.html#morapi_jsonobject-struct-reference","text":"core \u00bb json A json object. More... #include <morapi_core_old.h>","title":"morapi_JsonObject Struct Reference"},{"location":"structmorapi__JsonObject.html#public-member-functions","text":"morapi_Json * morapi_JsonObject_pushBack ( morapi_JsonObject *self, const morapi_Char *i_key, morapi_JsonType i_type) morapi_Json * morapi_JsonObject_pushFront ( morapi_JsonObject *self, const morapi_Char *i_key, morapi_JsonType i_type)","title":"Public Member Functions"},{"location":"structmorapi__JsonObject.html#detailed-description","text":"A json object.","title":"Detailed Description"},{"location":"structmorapi__JsonObject.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__JsonObject.html#morapi_jsonobject_pushback","text":"morapi_Json * morapi_JsonObject_pushBack ( morapi_JsonObject * self, const morapi_Char * i_key, morapi_JsonType i_type) Inserts a new json object whose key is i_key and type is i_type at the back of this dictionary.","title":"morapi_JsonObject_pushBack()"},{"location":"structmorapi__JsonObject.html#morapi_jsonobject_pushfront","text":"morapi_Json * morapi_JsonObject_pushFront ( morapi_JsonObject * self, const morapi_Char * i_key, morapi_JsonType i_type) Inserts a new json object whose key is i_key and type is i_type at the front of this dictionary.","title":"morapi_JsonObject_pushFront()"},{"location":"structmorapi__OStream.html","text":"morapi_OStream Struct Reference core \u00bb stream \u00bb ostream An output stream. More... #include <morapi_core_old.h> Inherited by morapi_OStreamByteArray , morapi_OStreamFile , and morapi_OStreamString . Public Member Functions Construction and destruction morapi_OStream * morapi_create_OStream ( morapi_Env *io_env) morapi_Result morapi_destroy_OStream ( morapi_Env *io_env, morapi_OStream *self) morapi_Result morapi_OStream_initialize ( morapi_OStream *self) morapi_Result morapi_OStream_init ( morapi_OStream *self, morapi_Int32 i_buf_size, void *i_buf) morapi_Result morapi_OStream_cleanup ( morapi_OStream *self) Operation morapi_Result morapi_OStream_setPos ( morapi_OStream *self, morapi_Pos i_pos) morapi_Result morapi_OStream_writeP ( morapi_OStream *self, const void *i_src, morapi_Int32 i_size, morapi_Size i_num, morapi_Bool i_swap_endian) morapi_Result morapi_OStream_printf ( morapi_OStream *self, const morapi_Char *i_format,...) Getters morapi_Pos morapi_OStream_getPos ( morapi_OStream *self) morapi_Uint8 * morapi_OStream_getBuf ( morapi_OStream *self) morapi_Int32 morapi_OStream_getBufSize ( morapi_OStream *self) Detailed Description An output stream. Member Function Documentation morapi_create_OStream() morapi_OStream * morapi_create_OStream ( morapi_Env * io_env) Creates an output stream. morapi_destroy_OStream() morapi_Result morapi_destroy_OStream ( morapi_Env * io_env, morapi_OStream * self) Destroys the output stream. morapi_OStream_initialize() morapi_Result morapi_OStream_initialize ( morapi_OStream * self) Initializes the output stream with default parameters. Same as morapi_OStream_init(self,4096,NULL). morapi_OStream_init() morapi_Result morapi_OStream_init ( morapi_OStream * self, morapi_Int32 i_buf_size, void * i_buf) Initializes the output stream. Parameters self : the output stream. i_buf_size : the buffer size. i_buf : the pointer to the buffer. If NULL is given, the buffer is allocated internally. morapi_OStream_cleanup() morapi_Result morapi_OStream_cleanup ( morapi_OStream * self) Cleans up the output stream. morapi_OStream_setPos() morapi_Result morapi_OStream_setPos ( morapi_OStream * self, morapi_Pos i_pos) Sets the current stream postion. morapi_OStream_writeP() morapi_Result morapi_OStream_writeP ( morapi_OStream * self, const void * i_src, morapi_Int32 i_size, morapi_Size i_num, morapi_Bool i_swap_endian) Writes i_num elements of each i_size bytes data. morapi_OStream_printf() morapi_Result morapi_OStream_printf ( morapi_OStream * self, const morapi_Char * i_format, ...) Writes a formatted string. morapi_OStream_getPos() morapi_Pos morapi_OStream_getPos ( morapi_OStream * self) Gets the current stream position. morapi_OStream_getBuf() morapi_Uint8 * morapi_OStream_getBuf ( morapi_OStream * self) Gets the buffer. morapi_OStream_getBufSize() morapi_Int32 morapi_OStream_getBufSize ( morapi_OStream * self) Gets the buffer size.","title":"morapi_OStream Struct Reference"},{"location":"structmorapi__OStream.html#morapi_ostream-struct-reference","text":"core \u00bb stream \u00bb ostream An output stream. More... #include <morapi_core_old.h> Inherited by morapi_OStreamByteArray , morapi_OStreamFile , and morapi_OStreamString .","title":"morapi_OStream Struct Reference"},{"location":"structmorapi__OStream.html#public-member-functions","text":"","title":"Public Member Functions"},{"location":"structmorapi__OStream.html#construction-and-destruction","text":"morapi_OStream * morapi_create_OStream ( morapi_Env *io_env) morapi_Result morapi_destroy_OStream ( morapi_Env *io_env, morapi_OStream *self) morapi_Result morapi_OStream_initialize ( morapi_OStream *self) morapi_Result morapi_OStream_init ( morapi_OStream *self, morapi_Int32 i_buf_size, void *i_buf) morapi_Result morapi_OStream_cleanup ( morapi_OStream *self)","title":"Construction and destruction"},{"location":"structmorapi__OStream.html#operation","text":"morapi_Result morapi_OStream_setPos ( morapi_OStream *self, morapi_Pos i_pos) morapi_Result morapi_OStream_writeP ( morapi_OStream *self, const void *i_src, morapi_Int32 i_size, morapi_Size i_num, morapi_Bool i_swap_endian) morapi_Result morapi_OStream_printf ( morapi_OStream *self, const morapi_Char *i_format,...)","title":"Operation"},{"location":"structmorapi__OStream.html#getters","text":"morapi_Pos morapi_OStream_getPos ( morapi_OStream *self) morapi_Uint8 * morapi_OStream_getBuf ( morapi_OStream *self) morapi_Int32 morapi_OStream_getBufSize ( morapi_OStream *self)","title":"Getters"},{"location":"structmorapi__OStream.html#detailed-description","text":"An output stream.","title":"Detailed Description"},{"location":"structmorapi__OStream.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__OStream.html#morapi_create_ostream","text":"morapi_OStream * morapi_create_OStream ( morapi_Env * io_env) Creates an output stream.","title":"morapi_create_OStream()"},{"location":"structmorapi__OStream.html#morapi_destroy_ostream","text":"morapi_Result morapi_destroy_OStream ( morapi_Env * io_env, morapi_OStream * self) Destroys the output stream.","title":"morapi_destroy_OStream()"},{"location":"structmorapi__OStream.html#morapi_ostream_initialize","text":"morapi_Result morapi_OStream_initialize ( morapi_OStream * self) Initializes the output stream with default parameters. Same as morapi_OStream_init(self,4096,NULL).","title":"morapi_OStream_initialize()"},{"location":"structmorapi__OStream.html#morapi_ostream_init","text":"morapi_Result morapi_OStream_init ( morapi_OStream * self, morapi_Int32 i_buf_size, void * i_buf) Initializes the output stream. Parameters self : the output stream. i_buf_size : the buffer size. i_buf : the pointer to the buffer. If NULL is given, the buffer is allocated internally.","title":"morapi_OStream_init()"},{"location":"structmorapi__OStream.html#morapi_ostream_cleanup","text":"morapi_Result morapi_OStream_cleanup ( morapi_OStream * self) Cleans up the output stream.","title":"morapi_OStream_cleanup()"},{"location":"structmorapi__OStream.html#morapi_ostream_setpos","text":"morapi_Result morapi_OStream_setPos ( morapi_OStream * self, morapi_Pos i_pos) Sets the current stream postion.","title":"morapi_OStream_setPos()"},{"location":"structmorapi__OStream.html#morapi_ostream_writep","text":"morapi_Result morapi_OStream_writeP ( morapi_OStream * self, const void * i_src, morapi_Int32 i_size, morapi_Size i_num, morapi_Bool i_swap_endian) Writes i_num elements of each i_size bytes data.","title":"morapi_OStream_writeP()"},{"location":"structmorapi__OStream.html#morapi_ostream_printf","text":"morapi_Result morapi_OStream_printf ( morapi_OStream * self, const morapi_Char * i_format, ...) Writes a formatted string.","title":"morapi_OStream_printf()"},{"location":"structmorapi__OStream.html#morapi_ostream_getpos","text":"morapi_Pos morapi_OStream_getPos ( morapi_OStream * self) Gets the current stream position.","title":"morapi_OStream_getPos()"},{"location":"structmorapi__OStream.html#morapi_ostream_getbuf","text":"morapi_Uint8 * morapi_OStream_getBuf ( morapi_OStream * self) Gets the buffer.","title":"morapi_OStream_getBuf()"},{"location":"structmorapi__OStream.html#morapi_ostream_getbufsize","text":"morapi_Int32 morapi_OStream_getBufSize ( morapi_OStream * self) Gets the buffer size.","title":"morapi_OStream_getBufSize()"},{"location":"structmorapi__OStreamByteArray.html","text":"morapi_OStreamByteArray Struct Reference core \u00bb stream \u00bb ostream An output stream to a byte array. More... #include <morapi_core_old.h> Inherits morapi_OStream . Public Member Functions morapi_OStreamByteArray * morapi_create_OStreamByteArray ( morapi_Env *io_env) morapi_Result morapi_destroy_OStreamByteArray ( morapi_Env *io_env, morapi_OStreamByteArray *self) morapi_Result morapi_OStreamByteArray_initialize ( morapi_OStreamByteArray *self) morapi_Result morapi_OStreamByteArray_init ( morapi_OStreamByteArray *self) morapi_Result morapi_OStreamByteArray_cleanup ( morapi_OStreamByteArray *self) morapi_Env * morapi_OStreamByteArray_getEnv ( morapi_OStreamByteArray *self) morapi_OStream * morapi_OStreamByteArray_getBase ( morapi_OStreamByteArray *self) morapi_Result morapi_OStreamByteArray_open ( morapi_OStreamByteArray *self, morapi_ByteArray *io_byte_array) morapi_Result morapi_OStreamByteArray_close ( morapi_OStreamByteArray *self) morapi_Bool morapi_OStreamByteArray_isOpen (const morapi_OStreamByteArray *self) morapi_OStream * morapi_create_OStream ( morapi_Env *io_env) morapi_Result morapi_destroy_OStream ( morapi_Env *io_env, morapi_OStream *self) morapi_Result morapi_OStream_initialize ( morapi_OStream *self) morapi_Result morapi_OStream_init ( morapi_OStream *self, morapi_Int32 i_buf_size, void *i_buf) morapi_Result morapi_OStream_cleanup ( morapi_OStream *self) morapi_Result morapi_OStream_setPos ( morapi_OStream *self, morapi_Pos i_pos) morapi_Result morapi_OStream_writeP ( morapi_OStream *self, const void *i_src, morapi_Int32 i_size, morapi_Size i_num, morapi_Bool i_swap_endian) morapi_Result morapi_OStream_printf ( morapi_OStream *self, const morapi_Char *i_format,...) morapi_Pos morapi_OStream_getPos ( morapi_OStream *self) morapi_Uint8 * morapi_OStream_getBuf ( morapi_OStream *self) morapi_Int32 morapi_OStream_getBufSize ( morapi_OStream *self) Detailed Description An output stream to a byte array. Member Function Documentation morapi_create_OStreamByteArray() morapi_OStreamByteArray * morapi_create_OStreamByteArray ( morapi_Env * io_env) Creates. morapi_destroy_OStreamByteArray() morapi_Result morapi_destroy_OStreamByteArray ( morapi_Env * io_env, morapi_OStreamByteArray * self) Destroys. morapi_OStreamByteArray_initialize() morapi_Result morapi_OStreamByteArray_initialize ( morapi_OStreamByteArray * self) Initializes with default parameters. morapi_OStreamByteArray_init() morapi_Result morapi_OStreamByteArray_init ( morapi_OStreamByteArray * self) Initializes. morapi_OStreamByteArray_cleanup() morapi_Result morapi_OStreamByteArray_cleanup ( morapi_OStreamByteArray * self) Cleans up. morapi_OStreamByteArray_getEnv() morapi_Env * morapi_OStreamByteArray_getEnv ( morapi_OStreamByteArray * self) Gets an environment. morapi_OStreamByteArray_getBase() morapi_OStream * morapi_OStreamByteArray_getBase ( morapi_OStreamByteArray * self) Gets a base ostream. morapi_OStreamByteArray_open() morapi_Result morapi_OStreamByteArray_open ( morapi_OStreamByteArray * self, morapi_ByteArray * io_byte_array) Opens an output stream. It clears io_byte_array automatically. morapi_OStreamByteArray_close() morapi_Result morapi_OStreamByteArray_close ( morapi_OStreamByteArray * self) Closes an output stream. morapi_OStreamByteArray_isOpen() morapi_Bool morapi_OStreamByteArray_isOpen (const morapi_OStreamByteArray * self) Returns whether an output stream.","title":"morapi_OStreamByteArray Struct Reference"},{"location":"structmorapi__OStreamByteArray.html#morapi_ostreambytearray-struct-reference","text":"core \u00bb stream \u00bb ostream An output stream to a byte array. More... #include <morapi_core_old.h> Inherits morapi_OStream .","title":"morapi_OStreamByteArray Struct Reference"},{"location":"structmorapi__OStreamByteArray.html#public-member-functions","text":"morapi_OStreamByteArray * morapi_create_OStreamByteArray ( morapi_Env *io_env) morapi_Result morapi_destroy_OStreamByteArray ( morapi_Env *io_env, morapi_OStreamByteArray *self) morapi_Result morapi_OStreamByteArray_initialize ( morapi_OStreamByteArray *self) morapi_Result morapi_OStreamByteArray_init ( morapi_OStreamByteArray *self) morapi_Result morapi_OStreamByteArray_cleanup ( morapi_OStreamByteArray *self) morapi_Env * morapi_OStreamByteArray_getEnv ( morapi_OStreamByteArray *self) morapi_OStream * morapi_OStreamByteArray_getBase ( morapi_OStreamByteArray *self) morapi_Result morapi_OStreamByteArray_open ( morapi_OStreamByteArray *self, morapi_ByteArray *io_byte_array) morapi_Result morapi_OStreamByteArray_close ( morapi_OStreamByteArray *self) morapi_Bool morapi_OStreamByteArray_isOpen (const morapi_OStreamByteArray *self) morapi_OStream * morapi_create_OStream ( morapi_Env *io_env) morapi_Result morapi_destroy_OStream ( morapi_Env *io_env, morapi_OStream *self) morapi_Result morapi_OStream_initialize ( morapi_OStream *self) morapi_Result morapi_OStream_init ( morapi_OStream *self, morapi_Int32 i_buf_size, void *i_buf) morapi_Result morapi_OStream_cleanup ( morapi_OStream *self) morapi_Result morapi_OStream_setPos ( morapi_OStream *self, morapi_Pos i_pos) morapi_Result morapi_OStream_writeP ( morapi_OStream *self, const void *i_src, morapi_Int32 i_size, morapi_Size i_num, morapi_Bool i_swap_endian) morapi_Result morapi_OStream_printf ( morapi_OStream *self, const morapi_Char *i_format,...) morapi_Pos morapi_OStream_getPos ( morapi_OStream *self) morapi_Uint8 * morapi_OStream_getBuf ( morapi_OStream *self) morapi_Int32 morapi_OStream_getBufSize ( morapi_OStream *self)","title":"Public Member Functions"},{"location":"structmorapi__OStreamByteArray.html#detailed-description","text":"An output stream to a byte array.","title":"Detailed Description"},{"location":"structmorapi__OStreamByteArray.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__OStreamByteArray.html#morapi_create_ostreambytearray","text":"morapi_OStreamByteArray * morapi_create_OStreamByteArray ( morapi_Env * io_env) Creates.","title":"morapi_create_OStreamByteArray()"},{"location":"structmorapi__OStreamByteArray.html#morapi_destroy_ostreambytearray","text":"morapi_Result morapi_destroy_OStreamByteArray ( morapi_Env * io_env, morapi_OStreamByteArray * self) Destroys.","title":"morapi_destroy_OStreamByteArray()"},{"location":"structmorapi__OStreamByteArray.html#morapi_ostreambytearray_initialize","text":"morapi_Result morapi_OStreamByteArray_initialize ( morapi_OStreamByteArray * self) Initializes with default parameters.","title":"morapi_OStreamByteArray_initialize()"},{"location":"structmorapi__OStreamByteArray.html#morapi_ostreambytearray_init","text":"morapi_Result morapi_OStreamByteArray_init ( morapi_OStreamByteArray * self) Initializes.","title":"morapi_OStreamByteArray_init()"},{"location":"structmorapi__OStreamByteArray.html#morapi_ostreambytearray_cleanup","text":"morapi_Result morapi_OStreamByteArray_cleanup ( morapi_OStreamByteArray * self) Cleans up.","title":"morapi_OStreamByteArray_cleanup()"},{"location":"structmorapi__OStreamByteArray.html#morapi_ostreambytearray_getenv","text":"morapi_Env * morapi_OStreamByteArray_getEnv ( morapi_OStreamByteArray * self) Gets an environment.","title":"morapi_OStreamByteArray_getEnv()"},{"location":"structmorapi__OStreamByteArray.html#morapi_ostreambytearray_getbase","text":"morapi_OStream * morapi_OStreamByteArray_getBase ( morapi_OStreamByteArray * self) Gets a base ostream.","title":"morapi_OStreamByteArray_getBase()"},{"location":"structmorapi__OStreamByteArray.html#morapi_ostreambytearray_open","text":"morapi_Result morapi_OStreamByteArray_open ( morapi_OStreamByteArray * self, morapi_ByteArray * io_byte_array) Opens an output stream. It clears io_byte_array automatically.","title":"morapi_OStreamByteArray_open()"},{"location":"structmorapi__OStreamByteArray.html#morapi_ostreambytearray_close","text":"morapi_Result morapi_OStreamByteArray_close ( morapi_OStreamByteArray * self) Closes an output stream.","title":"morapi_OStreamByteArray_close()"},{"location":"structmorapi__OStreamByteArray.html#morapi_ostreambytearray_isopen","text":"morapi_Bool morapi_OStreamByteArray_isOpen (const morapi_OStreamByteArray * self) Returns whether an output stream.","title":"morapi_OStreamByteArray_isOpen()"},{"location":"structmorapi__OStreamFile.html","text":"morapi_OStreamFile Struct Reference core \u00bb stream \u00bb ostream An output file stream. More... #include <morapi_core_old.h> Inherits morapi_OStream . Public Member Functions Construction and destruction morapi_OStreamFile * morapi_create_OStreamFile ( morapi_Env *io_env) morapi_Result morapi_destroy_OStreamFile ( morapi_Env *io_env, morapi_OStreamFile *self) morapi_Result morapi_OStreamFile_initialize ( morapi_OStreamFile *self) morapi_Result morapi_OStreamFile_init ( morapi_OStreamFile *self, morapi_Int32 i_file_name_len_max, morapi_Int32 i_buf_size, void *i_buf) morapi_Result morapi_OStreamFile_cleanup ( morapi_OStreamFile *self) Operation morapi_Result morapi_OStreamFile_open ( morapi_OStreamFile *self, const morapi_Char *i_file_name) morapi_Result morapi_OStreamFile_close ( morapi_OStreamFile *self) Getters morapi_OStream * morapi_OStreamFile_getBase ( morapi_OStreamFile *self) const morapi_Char * morapi_OStreamFile_getFileName ( morapi_OStreamFile *self) morapi_Bool morapi_OStreamFile_isOpen (const morapi_OStreamFile *self) morapi_OStream * morapi_create_OStream ( morapi_Env *io_env) morapi_Result morapi_destroy_OStream ( morapi_Env *io_env, morapi_OStream *self) morapi_Result morapi_OStream_initialize ( morapi_OStream *self) morapi_Result morapi_OStream_init ( morapi_OStream *self, morapi_Int32 i_buf_size, void *i_buf) morapi_Result morapi_OStream_cleanup ( morapi_OStream *self) morapi_Result morapi_OStream_setPos ( morapi_OStream *self, morapi_Pos i_pos) morapi_Result morapi_OStream_writeP ( morapi_OStream *self, const void *i_src, morapi_Int32 i_size, morapi_Size i_num, morapi_Bool i_swap_endian) morapi_Result morapi_OStream_printf ( morapi_OStream *self, const morapi_Char *i_format,...) morapi_Pos morapi_OStream_getPos ( morapi_OStream *self) morapi_Uint8 * morapi_OStream_getBuf ( morapi_OStream *self) morapi_Int32 morapi_OStream_getBufSize ( morapi_OStream *self) Detailed Description An output file stream. Member Function Documentation morapi_create_OStreamFile() morapi_OStreamFile * morapi_create_OStreamFile ( morapi_Env * io_env) Creates an output file stream. morapi_destroy_OStreamFile() morapi_Result morapi_destroy_OStreamFile ( morapi_Env * io_env, morapi_OStreamFile * self) Destroys the output file stream. morapi_OStreamFile_initialize() morapi_Result morapi_OStreamFile_initialize ( morapi_OStreamFile * self) Initializes the output file stream with default parameters. Same as morapi_OStreamFile_init(self,0,4096,NULL). morapi_OStreamFile_init() morapi_Result morapi_OStreamFile_init ( morapi_OStreamFile * self, morapi_Int32 i_file_name_len_max, morapi_Int32 i_buf_size, void * i_buf) Initializes the output file stream. Parameters self : the output file stream. i_file_name_len_max : The max length of a file name. If 0 is given, the file name is dynamically allocated. i_buf_size : The size of the output buffer. i_buf : The output buffer. If NULL is given, the buffer is allocated internally. morapi_OStreamFile_cleanup() morapi_Result morapi_OStreamFile_cleanup ( morapi_OStreamFile * self) Cleans up the output file stream. morapi_OStreamFile_open() morapi_Result morapi_OStreamFile_open ( morapi_OStreamFile * self, const morapi_Char * i_file_name) Opens the output file stream. The actual open operation is NOT processed in this function. It is processed later when the output buffer is full and is flushed. Parameters self : the output file stream. i_file_name : the name of the file to open. morapi_OStreamFile_close() morapi_Result morapi_OStreamFile_close ( morapi_OStreamFile * self) Closes the output file stream. After this function, the file name remains and can be gotton using morapi_OStreamFile_getFileName() . Parameters self : the output file stream. morapi_OStreamFile_getBase() morapi_OStream * morapi_OStreamFile_getBase ( morapi_OStreamFile * self) Gets the base output stream. morapi_OStreamFile_getFileName() const morapi_Char * morapi_OStreamFile_getFileName ( morapi_OStreamFile * self) Gets the name of the file to open. morapi_OStreamFile_isOpen() morapi_Bool morapi_OStreamFile_isOpen (const morapi_OStreamFile * self) Returns whether the output file stream is open.","title":"morapi_OStreamFile Struct Reference"},{"location":"structmorapi__OStreamFile.html#morapi_ostreamfile-struct-reference","text":"core \u00bb stream \u00bb ostream An output file stream. More... #include <morapi_core_old.h> Inherits morapi_OStream .","title":"morapi_OStreamFile Struct Reference"},{"location":"structmorapi__OStreamFile.html#public-member-functions","text":"","title":"Public Member Functions"},{"location":"structmorapi__OStreamFile.html#construction-and-destruction","text":"morapi_OStreamFile * morapi_create_OStreamFile ( morapi_Env *io_env) morapi_Result morapi_destroy_OStreamFile ( morapi_Env *io_env, morapi_OStreamFile *self) morapi_Result morapi_OStreamFile_initialize ( morapi_OStreamFile *self) morapi_Result morapi_OStreamFile_init ( morapi_OStreamFile *self, morapi_Int32 i_file_name_len_max, morapi_Int32 i_buf_size, void *i_buf) morapi_Result morapi_OStreamFile_cleanup ( morapi_OStreamFile *self)","title":"Construction and destruction"},{"location":"structmorapi__OStreamFile.html#operation","text":"morapi_Result morapi_OStreamFile_open ( morapi_OStreamFile *self, const morapi_Char *i_file_name) morapi_Result morapi_OStreamFile_close ( morapi_OStreamFile *self)","title":"Operation"},{"location":"structmorapi__OStreamFile.html#getters","text":"morapi_OStream * morapi_OStreamFile_getBase ( morapi_OStreamFile *self) const morapi_Char * morapi_OStreamFile_getFileName ( morapi_OStreamFile *self) morapi_Bool morapi_OStreamFile_isOpen (const morapi_OStreamFile *self) morapi_OStream * morapi_create_OStream ( morapi_Env *io_env) morapi_Result morapi_destroy_OStream ( morapi_Env *io_env, morapi_OStream *self) morapi_Result morapi_OStream_initialize ( morapi_OStream *self) morapi_Result morapi_OStream_init ( morapi_OStream *self, morapi_Int32 i_buf_size, void *i_buf) morapi_Result morapi_OStream_cleanup ( morapi_OStream *self) morapi_Result morapi_OStream_setPos ( morapi_OStream *self, morapi_Pos i_pos) morapi_Result morapi_OStream_writeP ( morapi_OStream *self, const void *i_src, morapi_Int32 i_size, morapi_Size i_num, morapi_Bool i_swap_endian) morapi_Result morapi_OStream_printf ( morapi_OStream *self, const morapi_Char *i_format,...) morapi_Pos morapi_OStream_getPos ( morapi_OStream *self) morapi_Uint8 * morapi_OStream_getBuf ( morapi_OStream *self) morapi_Int32 morapi_OStream_getBufSize ( morapi_OStream *self)","title":"Getters"},{"location":"structmorapi__OStreamFile.html#detailed-description","text":"An output file stream.","title":"Detailed Description"},{"location":"structmorapi__OStreamFile.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__OStreamFile.html#morapi_create_ostreamfile","text":"morapi_OStreamFile * morapi_create_OStreamFile ( morapi_Env * io_env) Creates an output file stream.","title":"morapi_create_OStreamFile()"},{"location":"structmorapi__OStreamFile.html#morapi_destroy_ostreamfile","text":"morapi_Result morapi_destroy_OStreamFile ( morapi_Env * io_env, morapi_OStreamFile * self) Destroys the output file stream.","title":"morapi_destroy_OStreamFile()"},{"location":"structmorapi__OStreamFile.html#morapi_ostreamfile_initialize","text":"morapi_Result morapi_OStreamFile_initialize ( morapi_OStreamFile * self) Initializes the output file stream with default parameters. Same as morapi_OStreamFile_init(self,0,4096,NULL).","title":"morapi_OStreamFile_initialize()"},{"location":"structmorapi__OStreamFile.html#morapi_ostreamfile_init","text":"morapi_Result morapi_OStreamFile_init ( morapi_OStreamFile * self, morapi_Int32 i_file_name_len_max, morapi_Int32 i_buf_size, void * i_buf) Initializes the output file stream. Parameters self : the output file stream. i_file_name_len_max : The max length of a file name. If 0 is given, the file name is dynamically allocated. i_buf_size : The size of the output buffer. i_buf : The output buffer. If NULL is given, the buffer is allocated internally.","title":"morapi_OStreamFile_init()"},{"location":"structmorapi__OStreamFile.html#morapi_ostreamfile_cleanup","text":"morapi_Result morapi_OStreamFile_cleanup ( morapi_OStreamFile * self) Cleans up the output file stream.","title":"morapi_OStreamFile_cleanup()"},{"location":"structmorapi__OStreamFile.html#morapi_ostreamfile_open","text":"morapi_Result morapi_OStreamFile_open ( morapi_OStreamFile * self, const morapi_Char * i_file_name) Opens the output file stream. The actual open operation is NOT processed in this function. It is processed later when the output buffer is full and is flushed. Parameters self : the output file stream. i_file_name : the name of the file to open.","title":"morapi_OStreamFile_open()"},{"location":"structmorapi__OStreamFile.html#morapi_ostreamfile_close","text":"morapi_Result morapi_OStreamFile_close ( morapi_OStreamFile * self) Closes the output file stream. After this function, the file name remains and can be gotton using morapi_OStreamFile_getFileName() . Parameters self : the output file stream.","title":"morapi_OStreamFile_close()"},{"location":"structmorapi__OStreamFile.html#morapi_ostreamfile_getbase","text":"morapi_OStream * morapi_OStreamFile_getBase ( morapi_OStreamFile * self) Gets the base output stream.","title":"morapi_OStreamFile_getBase()"},{"location":"structmorapi__OStreamFile.html#morapi_ostreamfile_getfilename","text":"const morapi_Char * morapi_OStreamFile_getFileName ( morapi_OStreamFile * self) Gets the name of the file to open.","title":"morapi_OStreamFile_getFileName()"},{"location":"structmorapi__OStreamFile.html#morapi_ostreamfile_isopen","text":"morapi_Bool morapi_OStreamFile_isOpen (const morapi_OStreamFile * self) Returns whether the output file stream is open.","title":"morapi_OStreamFile_isOpen()"},{"location":"structmorapi__OStreamString.html","text":"morapi_OStreamString Struct Reference core \u00bb stream \u00bb ostream An output stream to a string. More... #include <morapi_core_old.h> Inherits morapi_OStream . Public Member Functions Construction and destruction morapi_OStreamString * morapi_create_OStreamString ( morapi_Env *io_env) morapi_Result morapi_destroy_OStreamString ( morapi_Env *io_env, morapi_OStreamString *self) morapi_Result morapi_OStreamString_initialize ( morapi_OStreamString *self) morapi_Result morapi_OStreamString_cleanup ( morapi_OStreamString *self) Operations morapi_Result morapi_OStreamString_open ( morapi_OStreamString *self, morapi_String *io_string) morapi_Result morapi_OStreamString_close ( morapi_OStreamString *self) Getters morapi_OStream * morapi_OStreamString_getBase ( morapi_OStreamString *self) morapi_Bool morapi_OStreamString_isOpen ( morapi_OStreamString *self) morapi_OStream * morapi_create_OStream ( morapi_Env *io_env) morapi_Result morapi_destroy_OStream ( morapi_Env *io_env, morapi_OStream *self) morapi_Result morapi_OStream_initialize ( morapi_OStream *self) morapi_Result morapi_OStream_init ( morapi_OStream *self, morapi_Int32 i_buf_size, void *i_buf) morapi_Result morapi_OStream_cleanup ( morapi_OStream *self) morapi_Result morapi_OStream_setPos ( morapi_OStream *self, morapi_Pos i_pos) morapi_Result morapi_OStream_writeP ( morapi_OStream *self, const void *i_src, morapi_Int32 i_size, morapi_Size i_num, morapi_Bool i_swap_endian) morapi_Result morapi_OStream_printf ( morapi_OStream *self, const morapi_Char *i_format,...) morapi_Pos morapi_OStream_getPos ( morapi_OStream *self) morapi_Uint8 * morapi_OStream_getBuf ( morapi_OStream *self) morapi_Int32 morapi_OStream_getBufSize ( morapi_OStream *self) Detailed Description An output stream to a string. Escapes 0xFF and 0x00 to 0xFF 0xFF and 0xFF 0xFE respectively. Member Function Documentation morapi_create_OStreamString() morapi_OStreamString * morapi_create_OStreamString ( morapi_Env * io_env) Creates a output stream to a string. morapi_destroy_OStreamString() morapi_Result morapi_destroy_OStreamString ( morapi_Env * io_env, morapi_OStreamString * self) Destroys the output stream. morapi_OStreamString_initialize() morapi_Result morapi_OStreamString_initialize ( morapi_OStreamString * self) Initializes the output stream. morapi_OStreamString_cleanup() morapi_Result morapi_OStreamString_cleanup ( morapi_OStreamString * self) Cleans up the output stream. morapi_OStreamString_open() morapi_Result morapi_OStreamString_open ( morapi_OStreamString * self, morapi_String * io_string) Opens the output stream to a string. It clears io_string automatically. morapi_OStreamString_close() morapi_Result morapi_OStreamString_close ( morapi_OStreamString * self) Closes the output stream. morapi_OStreamString_getBase() morapi_OStream * morapi_OStreamString_getBase ( morapi_OStreamString * self) Gets the base object. morapi_OStreamString_isOpen() morapi_Bool morapi_OStreamString_isOpen ( morapi_OStreamString * self) Returns whether the stream is open.","title":"morapi_OStreamString Struct Reference"},{"location":"structmorapi__OStreamString.html#morapi_ostreamstring-struct-reference","text":"core \u00bb stream \u00bb ostream An output stream to a string. More... #include <morapi_core_old.h> Inherits morapi_OStream .","title":"morapi_OStreamString Struct Reference"},{"location":"structmorapi__OStreamString.html#public-member-functions","text":"","title":"Public Member Functions"},{"location":"structmorapi__OStreamString.html#construction-and-destruction","text":"morapi_OStreamString * morapi_create_OStreamString ( morapi_Env *io_env) morapi_Result morapi_destroy_OStreamString ( morapi_Env *io_env, morapi_OStreamString *self) morapi_Result morapi_OStreamString_initialize ( morapi_OStreamString *self) morapi_Result morapi_OStreamString_cleanup ( morapi_OStreamString *self)","title":"Construction and destruction"},{"location":"structmorapi__OStreamString.html#operations","text":"morapi_Result morapi_OStreamString_open ( morapi_OStreamString *self, morapi_String *io_string) morapi_Result morapi_OStreamString_close ( morapi_OStreamString *self)","title":"Operations"},{"location":"structmorapi__OStreamString.html#getters","text":"morapi_OStream * morapi_OStreamString_getBase ( morapi_OStreamString *self) morapi_Bool morapi_OStreamString_isOpen ( morapi_OStreamString *self) morapi_OStream * morapi_create_OStream ( morapi_Env *io_env) morapi_Result morapi_destroy_OStream ( morapi_Env *io_env, morapi_OStream *self) morapi_Result morapi_OStream_initialize ( morapi_OStream *self) morapi_Result morapi_OStream_init ( morapi_OStream *self, morapi_Int32 i_buf_size, void *i_buf) morapi_Result morapi_OStream_cleanup ( morapi_OStream *self) morapi_Result morapi_OStream_setPos ( morapi_OStream *self, morapi_Pos i_pos) morapi_Result morapi_OStream_writeP ( morapi_OStream *self, const void *i_src, morapi_Int32 i_size, morapi_Size i_num, morapi_Bool i_swap_endian) morapi_Result morapi_OStream_printf ( morapi_OStream *self, const morapi_Char *i_format,...) morapi_Pos morapi_OStream_getPos ( morapi_OStream *self) morapi_Uint8 * morapi_OStream_getBuf ( morapi_OStream *self) morapi_Int32 morapi_OStream_getBufSize ( morapi_OStream *self)","title":"Getters"},{"location":"structmorapi__OStreamString.html#detailed-description","text":"An output stream to a string. Escapes 0xFF and 0x00 to 0xFF 0xFF and 0xFF 0xFE respectively.","title":"Detailed Description"},{"location":"structmorapi__OStreamString.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__OStreamString.html#morapi_create_ostreamstring","text":"morapi_OStreamString * morapi_create_OStreamString ( morapi_Env * io_env) Creates a output stream to a string.","title":"morapi_create_OStreamString()"},{"location":"structmorapi__OStreamString.html#morapi_destroy_ostreamstring","text":"morapi_Result morapi_destroy_OStreamString ( morapi_Env * io_env, morapi_OStreamString * self) Destroys the output stream.","title":"morapi_destroy_OStreamString()"},{"location":"structmorapi__OStreamString.html#morapi_ostreamstring_initialize","text":"morapi_Result morapi_OStreamString_initialize ( morapi_OStreamString * self) Initializes the output stream.","title":"morapi_OStreamString_initialize()"},{"location":"structmorapi__OStreamString.html#morapi_ostreamstring_cleanup","text":"morapi_Result morapi_OStreamString_cleanup ( morapi_OStreamString * self) Cleans up the output stream.","title":"morapi_OStreamString_cleanup()"},{"location":"structmorapi__OStreamString.html#morapi_ostreamstring_open","text":"morapi_Result morapi_OStreamString_open ( morapi_OStreamString * self, morapi_String * io_string) Opens the output stream to a string. It clears io_string automatically.","title":"morapi_OStreamString_open()"},{"location":"structmorapi__OStreamString.html#morapi_ostreamstring_close","text":"morapi_Result morapi_OStreamString_close ( morapi_OStreamString * self) Closes the output stream.","title":"morapi_OStreamString_close()"},{"location":"structmorapi__OStreamString.html#morapi_ostreamstring_getbase","text":"morapi_OStream * morapi_OStreamString_getBase ( morapi_OStreamString * self) Gets the base object.","title":"morapi_OStreamString_getBase()"},{"location":"structmorapi__OStreamString.html#morapi_ostreamstring_isopen","text":"morapi_Bool morapi_OStreamString_isOpen ( morapi_OStreamString * self) Returns whether the stream is open.","title":"morapi_OStreamString_isOpen()"},{"location":"structmorapi__Param.html","text":"morapi_Param Struct Reference dnn \u00bb param Parameter key and value. More... #include <morapi_softneuro.h> Public Member Functions morapi_ParamType morapi_Param_getType (const morapi_Param *self) Data Fields const morapi_Char * key morapi_Int32 num const morapi_Bool * bools const morapi_Real * reals const morapi_Char ** texts const morapi_Params ** params Detailed Description Parameter key and value. test_dnn_api.c . Member Function Documentation morapi_Param_getType() morapi_ParamType morapi_Param_getType (const morapi_Param * self) Gets the parameter type. Parameters self : parameter object Field Documentation key const morapi_Char * key parameter key. num morapi_Int32 num the number of values. bools const morapi_Bool * bools bool values. reals const morapi_Real * reals real values. texts const morapi_Char ** texts text values. test_dnn_api.c . params const morapi_Params ** params parameters.","title":"morapi_Param"},{"location":"structmorapi__Param.html#morapi_param-struct-reference","text":"dnn \u00bb param Parameter key and value. More... #include <morapi_softneuro.h>","title":"morapi_Param Struct Reference"},{"location":"structmorapi__Param.html#public-member-functions","text":"morapi_ParamType morapi_Param_getType (const morapi_Param *self)","title":"Public Member Functions"},{"location":"structmorapi__Param.html#data-fields","text":"const morapi_Char * key morapi_Int32 num const morapi_Bool * bools const morapi_Real * reals const morapi_Char ** texts const morapi_Params ** params","title":"Data Fields"},{"location":"structmorapi__Param.html#detailed-description","text":"Parameter key and value. test_dnn_api.c .","title":"Detailed Description"},{"location":"structmorapi__Param.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__Param.html#morapi_param_gettype","text":"morapi_ParamType morapi_Param_getType (const morapi_Param * self) Gets the parameter type. Parameters self : parameter object","title":"morapi_Param_getType()"},{"location":"structmorapi__Param.html#field-documentation","text":"","title":"Field Documentation"},{"location":"structmorapi__Param.html#key","text":"const morapi_Char * key parameter key.","title":"key"},{"location":"structmorapi__Param.html#num","text":"morapi_Int32 num the number of values.","title":"num"},{"location":"structmorapi__Param.html#bools","text":"const morapi_Bool * bools bool values.","title":"bools"},{"location":"structmorapi__Param.html#reals","text":"const morapi_Real * reals real values.","title":"reals"},{"location":"structmorapi__Param.html#texts","text":"const morapi_Char ** texts text values. test_dnn_api.c .","title":"texts"},{"location":"structmorapi__Param.html#params","text":"const morapi_Params ** params parameters.","title":"params"},{"location":"structmorapi__Params.html","text":"morapi_Params Struct Reference dnn \u00bb param Parameters. More... #include <morapi_softneuro.h> Public Member Functions morapi_Result morapi_Params_clear ( morapi_Params *self) morapi_Result morapi_Params_addBool ( morapi_Params *self, const morapi_Char *i_key, morapi_Bool i_bool) morapi_Result morapi_Params_addBools ( morapi_Params *self, const morapi_Char *i_key, morapi_Int32 i_num, const morapi_Bool *i_bools) morapi_Result morapi_Params_setBool ( morapi_Params *self, const morapi_Char *i_key, morapi_Int32 i_index, morapi_Bool i_bool) morapi_Result morapi_Params_addReal ( morapi_Params *self, const morapi_Char *i_key, morapi_Real i_real) morapi_Result morapi_Params_addInt32 ( morapi_Params *self, const morapi_Char *i_key, morapi_Int32 i_int32) morapi_Result morapi_Params_addReals ( morapi_Params *self, const morapi_Char *i_key, morapi_Int32 i_num, const morapi_Real *i_reals) morapi_Result morapi_Params_setReals ( morapi_Params *self, const morapi_Char *i_key, morapi_Int32 i_num, const morapi_Real *i_reals) morapi_Result morapi_Params_addInt32s ( morapi_Params *self, const morapi_Char *i_key, morapi_Int32 i_num, const morapi_Int32 *i_int32s) morapi_Result morapi_Params_setInt32s ( morapi_Params *self, const morapi_Char *i_key, morapi_Int32 i_num, const morapi_Int32 *i_int32s) morapi_Result morapi_Params_setReal ( morapi_Params *self, const morapi_Char *i_key, morapi_Int32 i_index, morapi_Real i_real) morapi_Result morapi_Params_setInt32 ( morapi_Params *self, const morapi_Char *i_key, morapi_Int32 i_index, morapi_Int32 i_int32) morapi_Result morapi_Params_addText ( morapi_Params *self, const morapi_Char *i_key, const morapi_Char *i_text) morapi_Result morapi_Params_addTexts ( morapi_Params *self, const morapi_Char *i_key, morapi_Int32 i_num, const morapi_Char **i_texts) morapi_Result morapi_Params_setText ( morapi_Params *self, const morapi_Char *i_key, morapi_Int32 i_index, const morapi_Char *i_text) morapi_Params * morapi_Params_addParams ( morapi_Params *self, const morapi_Char *i_key) morapi_Result morapi_Params_erase ( morapi_Params *self, const morapi_Char *i_key) morapi_Int32 morapi_Params_getNum (const morapi_Params *self) const morapi_Param * morapi_Params_get (const morapi_Params *self, morapi_Int32 i_index) const morapi_Param * morapi_Params_find (const morapi_Params *self, const morapi_Char *i_key) Detailed Description Parameters. Member Function Documentation morapi_Params_clear() morapi_Result morapi_Params_clear ( morapi_Params * self) Clears the parameter set. Parameters self : parameter object morapi_Params_addBool() morapi_Result morapi_Params_addBool ( morapi_Params * self, const morapi_Char * i_key, morapi_Bool i_bool) Adds a bool value. Parameters self : parameter object i_key : parameter key i_bool : bool value morapi_Params_addBools() morapi_Result morapi_Params_addBools ( morapi_Params * self, const morapi_Char * i_key, morapi_Int32 i_num, const morapi_Bool * i_bools) Adds bool values. Parameters self : parameter object i_key : parameter key i_num : parameter count i_bools : bool values morapi_Params_setBool() morapi_Result morapi_Params_setBool ( morapi_Params * self, const morapi_Char * i_key, morapi_Int32 i_index, morapi_Bool i_bool) Sets a bool value. Parameters self : parameter object i_key : parameter key i_index : index in the parameter values. i_bool : bool value. morapi_Params_addReal() morapi_Result morapi_Params_addReal ( morapi_Params * self, const morapi_Char * i_key, morapi_Real i_real) Adds a real value. Parameters self : parameter object i_key : parameter key i_real : real value morapi_Params_addInt32() morapi_Result morapi_Params_addInt32 ( morapi_Params * self, const morapi_Char * i_key, morapi_Int32 i_int32) Adds a int32 value. Parameters self : parameter object i_key : parameter key i_int32 : int32 value morapi_Params_addReals() morapi_Result morapi_Params_addReals ( morapi_Params * self, const morapi_Char * i_key, morapi_Int32 i_num, const morapi_Real * i_reals) Adds real values. Parameters self : parameter object i_key : parameter key i_num : parameter count i_reals : real values morapi_Params_setReals() morapi_Result morapi_Params_setReals ( morapi_Params * self, const morapi_Char * i_key, morapi_Int32 i_num, const morapi_Real * i_reals) Sets real values. Parameters self : parameter object. i_key : parameter key. i_num : parameter count. i_reals : real values. morapi_Params_addInt32s() morapi_Result morapi_Params_addInt32s ( morapi_Params * self, const morapi_Char * i_key, morapi_Int32 i_num, const morapi_Int32 * i_int32s) Adds int32 values. Parameters self : parameter object i_key : parameter key i_num : parameter count i_int32s : int32 values morapi_Params_setInt32s() morapi_Result morapi_Params_setInt32s ( morapi_Params * self, const morapi_Char * i_key, morapi_Int32 i_num, const morapi_Int32 * i_int32s) Sets int32 values. Parameters self : parameter object i_key : parameter key i_num : parameter count i_int32s : int32 values morapi_Params_setReal() morapi_Result morapi_Params_setReal ( morapi_Params * self, const morapi_Char * i_key, morapi_Int32 i_index, morapi_Real i_real) Sets a real value. Parameters self : parameter object i_key : parameter key i_index : index in the parameter values. i_real : real value. morapi_Params_setInt32() morapi_Result morapi_Params_setInt32 ( morapi_Params * self, const morapi_Char * i_key, morapi_Int32 i_index, morapi_Int32 i_int32) Sets a int32 value. Parameters self : parameter object i_key : parameter key i_index : index in the parameter values. i_int32 : int32 value. morapi_Params_addText() morapi_Result morapi_Params_addText ( morapi_Params * self, const morapi_Char * i_key, const morapi_Char * i_text) Adds a text. Parameters self : parameter object i_key : parameter key i_text : text value morapi_Params_addTexts() morapi_Result morapi_Params_addTexts ( morapi_Params * self, const morapi_Char * i_key, morapi_Int32 i_num, const morapi_Char ** i_texts) Adds texts. Parameters self : parameter object i_key : parameter key i_num : parameter count i_texts : text values morapi_Params_setText() morapi_Result morapi_Params_setText ( morapi_Params * self, const morapi_Char * i_key, morapi_Int32 i_index, const morapi_Char * i_text) Sets a text. Parameters self : parameter object i_key : parameter key i_index : index in the parameter values. i_text : text. morapi_Params_addParams() morapi_Params * morapi_Params_addParams ( morapi_Params * self, const morapi_Char * i_key) Adds a parameter set. Parameters self : parameter object i_key : parameter key morapi_Params_erase() morapi_Result morapi_Params_erase ( morapi_Params * self, const morapi_Char * i_key) Erases the parameter whose key is i_key. Parameters self : parameter object i_key : parameter key morapi_Params_getNum() morapi_Int32 morapi_Params_getNum (const morapi_Params * self) Gets the number of parameters. Parameters self : parameter object morapi_Params_get() const morapi_Param * morapi_Params_get (const morapi_Params * self, morapi_Int32 i_index) Gets the i_index-th parameter. Parameters self : parameter object i_index : parameter index morapi_Params_find() const morapi_Param * morapi_Params_find (const morapi_Params * self, const morapi_Char * i_key) Finds a parameter whose key is i_key. Parameters self : parameter object i_key : parameter key Returns morapi_Param object test_dnn_api.c .","title":"morapi_Params"},{"location":"structmorapi__Params.html#morapi_params-struct-reference","text":"dnn \u00bb param Parameters. More... #include <morapi_softneuro.h>","title":"morapi_Params Struct Reference"},{"location":"structmorapi__Params.html#public-member-functions","text":"morapi_Result morapi_Params_clear ( morapi_Params *self) morapi_Result morapi_Params_addBool ( morapi_Params *self, const morapi_Char *i_key, morapi_Bool i_bool) morapi_Result morapi_Params_addBools ( morapi_Params *self, const morapi_Char *i_key, morapi_Int32 i_num, const morapi_Bool *i_bools) morapi_Result morapi_Params_setBool ( morapi_Params *self, const morapi_Char *i_key, morapi_Int32 i_index, morapi_Bool i_bool) morapi_Result morapi_Params_addReal ( morapi_Params *self, const morapi_Char *i_key, morapi_Real i_real) morapi_Result morapi_Params_addInt32 ( morapi_Params *self, const morapi_Char *i_key, morapi_Int32 i_int32) morapi_Result morapi_Params_addReals ( morapi_Params *self, const morapi_Char *i_key, morapi_Int32 i_num, const morapi_Real *i_reals) morapi_Result morapi_Params_setReals ( morapi_Params *self, const morapi_Char *i_key, morapi_Int32 i_num, const morapi_Real *i_reals) morapi_Result morapi_Params_addInt32s ( morapi_Params *self, const morapi_Char *i_key, morapi_Int32 i_num, const morapi_Int32 *i_int32s) morapi_Result morapi_Params_setInt32s ( morapi_Params *self, const morapi_Char *i_key, morapi_Int32 i_num, const morapi_Int32 *i_int32s) morapi_Result morapi_Params_setReal ( morapi_Params *self, const morapi_Char *i_key, morapi_Int32 i_index, morapi_Real i_real) morapi_Result morapi_Params_setInt32 ( morapi_Params *self, const morapi_Char *i_key, morapi_Int32 i_index, morapi_Int32 i_int32) morapi_Result morapi_Params_addText ( morapi_Params *self, const morapi_Char *i_key, const morapi_Char *i_text) morapi_Result morapi_Params_addTexts ( morapi_Params *self, const morapi_Char *i_key, morapi_Int32 i_num, const morapi_Char **i_texts) morapi_Result morapi_Params_setText ( morapi_Params *self, const morapi_Char *i_key, morapi_Int32 i_index, const morapi_Char *i_text) morapi_Params * morapi_Params_addParams ( morapi_Params *self, const morapi_Char *i_key) morapi_Result morapi_Params_erase ( morapi_Params *self, const morapi_Char *i_key) morapi_Int32 morapi_Params_getNum (const morapi_Params *self) const morapi_Param * morapi_Params_get (const morapi_Params *self, morapi_Int32 i_index) const morapi_Param * morapi_Params_find (const morapi_Params *self, const morapi_Char *i_key)","title":"Public Member Functions"},{"location":"structmorapi__Params.html#detailed-description","text":"Parameters.","title":"Detailed Description"},{"location":"structmorapi__Params.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__Params.html#morapi_params_clear","text":"morapi_Result morapi_Params_clear ( morapi_Params * self) Clears the parameter set. Parameters self : parameter object","title":"morapi_Params_clear()"},{"location":"structmorapi__Params.html#morapi_params_addbool","text":"morapi_Result morapi_Params_addBool ( morapi_Params * self, const morapi_Char * i_key, morapi_Bool i_bool) Adds a bool value. Parameters self : parameter object i_key : parameter key i_bool : bool value","title":"morapi_Params_addBool()"},{"location":"structmorapi__Params.html#morapi_params_addbools","text":"morapi_Result morapi_Params_addBools ( morapi_Params * self, const morapi_Char * i_key, morapi_Int32 i_num, const morapi_Bool * i_bools) Adds bool values. Parameters self : parameter object i_key : parameter key i_num : parameter count i_bools : bool values","title":"morapi_Params_addBools()"},{"location":"structmorapi__Params.html#morapi_params_setbool","text":"morapi_Result morapi_Params_setBool ( morapi_Params * self, const morapi_Char * i_key, morapi_Int32 i_index, morapi_Bool i_bool) Sets a bool value. Parameters self : parameter object i_key : parameter key i_index : index in the parameter values. i_bool : bool value.","title":"morapi_Params_setBool()"},{"location":"structmorapi__Params.html#morapi_params_addreal","text":"morapi_Result morapi_Params_addReal ( morapi_Params * self, const morapi_Char * i_key, morapi_Real i_real) Adds a real value. Parameters self : parameter object i_key : parameter key i_real : real value","title":"morapi_Params_addReal()"},{"location":"structmorapi__Params.html#morapi_params_addint32","text":"morapi_Result morapi_Params_addInt32 ( morapi_Params * self, const morapi_Char * i_key, morapi_Int32 i_int32) Adds a int32 value. Parameters self : parameter object i_key : parameter key i_int32 : int32 value","title":"morapi_Params_addInt32()"},{"location":"structmorapi__Params.html#morapi_params_addreals","text":"morapi_Result morapi_Params_addReals ( morapi_Params * self, const morapi_Char * i_key, morapi_Int32 i_num, const morapi_Real * i_reals) Adds real values. Parameters self : parameter object i_key : parameter key i_num : parameter count i_reals : real values","title":"morapi_Params_addReals()"},{"location":"structmorapi__Params.html#morapi_params_setreals","text":"morapi_Result morapi_Params_setReals ( morapi_Params * self, const morapi_Char * i_key, morapi_Int32 i_num, const morapi_Real * i_reals) Sets real values. Parameters self : parameter object. i_key : parameter key. i_num : parameter count. i_reals : real values.","title":"morapi_Params_setReals()"},{"location":"structmorapi__Params.html#morapi_params_addint32s","text":"morapi_Result morapi_Params_addInt32s ( morapi_Params * self, const morapi_Char * i_key, morapi_Int32 i_num, const morapi_Int32 * i_int32s) Adds int32 values. Parameters self : parameter object i_key : parameter key i_num : parameter count i_int32s : int32 values","title":"morapi_Params_addInt32s()"},{"location":"structmorapi__Params.html#morapi_params_setint32s","text":"morapi_Result morapi_Params_setInt32s ( morapi_Params * self, const morapi_Char * i_key, morapi_Int32 i_num, const morapi_Int32 * i_int32s) Sets int32 values. Parameters self : parameter object i_key : parameter key i_num : parameter count i_int32s : int32 values","title":"morapi_Params_setInt32s()"},{"location":"structmorapi__Params.html#morapi_params_setreal","text":"morapi_Result morapi_Params_setReal ( morapi_Params * self, const morapi_Char * i_key, morapi_Int32 i_index, morapi_Real i_real) Sets a real value. Parameters self : parameter object i_key : parameter key i_index : index in the parameter values. i_real : real value.","title":"morapi_Params_setReal()"},{"location":"structmorapi__Params.html#morapi_params_setint32","text":"morapi_Result morapi_Params_setInt32 ( morapi_Params * self, const morapi_Char * i_key, morapi_Int32 i_index, morapi_Int32 i_int32) Sets a int32 value. Parameters self : parameter object i_key : parameter key i_index : index in the parameter values. i_int32 : int32 value.","title":"morapi_Params_setInt32()"},{"location":"structmorapi__Params.html#morapi_params_addtext","text":"morapi_Result morapi_Params_addText ( morapi_Params * self, const morapi_Char * i_key, const morapi_Char * i_text) Adds a text. Parameters self : parameter object i_key : parameter key i_text : text value","title":"morapi_Params_addText()"},{"location":"structmorapi__Params.html#morapi_params_addtexts","text":"morapi_Result morapi_Params_addTexts ( morapi_Params * self, const morapi_Char * i_key, morapi_Int32 i_num, const morapi_Char ** i_texts) Adds texts. Parameters self : parameter object i_key : parameter key i_num : parameter count i_texts : text values","title":"morapi_Params_addTexts()"},{"location":"structmorapi__Params.html#morapi_params_settext","text":"morapi_Result morapi_Params_setText ( morapi_Params * self, const morapi_Char * i_key, morapi_Int32 i_index, const morapi_Char * i_text) Sets a text. Parameters self : parameter object i_key : parameter key i_index : index in the parameter values. i_text : text.","title":"morapi_Params_setText()"},{"location":"structmorapi__Params.html#morapi_params_addparams","text":"morapi_Params * morapi_Params_addParams ( morapi_Params * self, const morapi_Char * i_key) Adds a parameter set. Parameters self : parameter object i_key : parameter key","title":"morapi_Params_addParams()"},{"location":"structmorapi__Params.html#morapi_params_erase","text":"morapi_Result morapi_Params_erase ( morapi_Params * self, const morapi_Char * i_key) Erases the parameter whose key is i_key. Parameters self : parameter object i_key : parameter key","title":"morapi_Params_erase()"},{"location":"structmorapi__Params.html#morapi_params_getnum","text":"morapi_Int32 morapi_Params_getNum (const morapi_Params * self) Gets the number of parameters. Parameters self : parameter object","title":"morapi_Params_getNum()"},{"location":"structmorapi__Params.html#morapi_params_get","text":"const morapi_Param * morapi_Params_get (const morapi_Params * self, morapi_Int32 i_index) Gets the i_index-th parameter. Parameters self : parameter object i_index : parameter index","title":"morapi_Params_get()"},{"location":"structmorapi__Params.html#morapi_params_find","text":"const morapi_Param * morapi_Params_find (const morapi_Params * self, const morapi_Char * i_key) Finds a parameter whose key is i_key. Parameters self : parameter object i_key : parameter key Returns morapi_Param object test_dnn_api.c .","title":"morapi_Params_find()"},{"location":"structmorapi__Quant.html","text":"morapi_Quant Struct Reference dnn \u00bb tensor Quantizer. More... #include <morapi_softneuro.h> Data Fields morapi_Float32 coef morapi_Float32 base morapi_Int32 zero_point Detailed Description Quantizer. Field Documentation coef morapi_Float32 coef coefficients value. base morapi_Float32 base base value. zero_point morapi_Int32 zero_point zero point.","title":"morapi_Quant"},{"location":"structmorapi__Quant.html#morapi_quant-struct-reference","text":"dnn \u00bb tensor Quantizer. More... #include <morapi_softneuro.h>","title":"morapi_Quant Struct Reference"},{"location":"structmorapi__Quant.html#data-fields","text":"morapi_Float32 coef morapi_Float32 base morapi_Int32 zero_point","title":"Data Fields"},{"location":"structmorapi__Quant.html#detailed-description","text":"Quantizer.","title":"Detailed Description"},{"location":"structmorapi__Quant.html#field-documentation","text":"","title":"Field Documentation"},{"location":"structmorapi__Quant.html#coef","text":"morapi_Float32 coef coefficients value.","title":"coef"},{"location":"structmorapi__Quant.html#base","text":"morapi_Float32 base base value.","title":"base"},{"location":"structmorapi__Quant.html#zero_point","text":"morapi_Int32 zero_point zero point.","title":"zero_point"},{"location":"structmorapi__String.html","text":"morapi_String Struct Reference core \u00bb string A string. More... #include <morapi_core_old.h> Public Member Functions Construction and destruction morapi_String * morapi_create_String ( morapi_Env *io_env) morapi_Result morapi_destroy_String ( morapi_Env *io_env, morapi_String *self) morapi_Result morapi_String_initialize ( morapi_String *self) morapi_Result morapi_String_init ( morapi_String *self, morapi_Int32 i_alloc_size, morapi_Char *buf) morapi_Result morapi_String_cleanup ( morapi_String *self) morapi_Result morapi_String_clear ( morapi_String *self) Operations morapi_Result morapi_String_insert ( morapi_String *self, morapi_Int32 i_ins_pos, const morapi_Char *i_str, morapi_Int32 i_strn) morapi_Result morapi_String_insertChar ( morapi_String *self, morapi_Int32 i_ins_pos, morapi_Char i_ch) morapi_Result morapi_String_setN ( morapi_String *self, const morapi_Char *i_str, morapi_Int32 i_strn) morapi_Result morapi_String_set ( morapi_String *self, const morapi_Char *i_str) morapi_Result morapi_String_append ( morapi_String *self, const morapi_Char *i_str) morapi_Result morapi_String_appendChar ( morapi_String *self, morapi_Char i_ch) morapi_Result morapi_String_erase ( morapi_String *self, morapi_Int32 i_begi, morapi_Int32 i_endi) morapi_Result morapi_String_eraseChar ( morapi_String *self, morapi_Int32 i_pos) Formatted String. morapi_Result morapi_String_appendf ( morapi_String *self, const morapi_Char *i_fmt,...) morapi_Result morapi_String_sprintf ( morapi_String *self, const morapi_Char *i_fmt,...) Getters morapi_Int32 morapi_String_getAllocSize ( morapi_String *self) morapi_Bool morapi_String_isEmpty ( morapi_String *self) morapi_Int32 morapi_String_getLen ( morapi_String *self) const morapi_Char * morapi_String_get ( morapi_String *self) const morapi_Char * morapi_String_getBack ( morapi_String *self) morapi_Bool morapi_String_isEqualTo ( morapi_String *self, const morapi_Char *i_str) morapi_Bool morapi_String_isCaseEqualTo ( morapi_String *self, const morapi_Char *i_str) morapi_Bool morapi_String_isNumEqualTo ( morapi_String *self, const morapi_Char *i_str, morapi_Int32 i_num) morapi_Bool morapi_String_isNumCaseEqualTo ( morapi_String *self, const morapi_Char *i_str, morapi_Int32 i_num) Detailed Description A string. Member Function Documentation morapi_create_String() morapi_String * morapi_create_String ( morapi_Env * io_env) Creates the string. Parameters io_env : the envrironment data. Returns the created string. morapi_destroy_String() morapi_Result morapi_destroy_String ( morapi_Env * io_env, morapi_String * self) Destroyes the string. Parameters io_env : the environment data. self : the string to destroy. morapi_String_initialize() morapi_Result morapi_String_initialize ( morapi_String * self) Initializes the string with default values. morapi_String_init() morapi_Result morapi_String_init ( morapi_String * self, morapi_Int32 i_alloc_size, morapi_Char * buf) Initializes the string. morapi_String_cleanup() morapi_Result morapi_String_cleanup ( morapi_String * self) Cleans up the string. morapi_String_clear() morapi_Result morapi_String_clear ( morapi_String * self) Clears the string. morapi_String_insert() morapi_Result morapi_String_insert ( morapi_String * self, morapi_Int32 i_ins_pos, const morapi_Char * i_str, morapi_Int32 i_strn) Inserts charactors to the string. If i_strn < 0, the whole of i_str is inserted. morapi_String_insertChar() morapi_Result morapi_String_insertChar ( morapi_String * self, morapi_Int32 i_ins_pos, morapi_Char i_ch) Inserts a charactor into the string. morapi_String_setN() morapi_Result morapi_String_setN ( morapi_String * self, const morapi_Char * i_str, morapi_Int32 i_strn) Sets the string first i_strn charactors of i_str. morapi_String_set() morapi_Result morapi_String_set ( morapi_String * self, const morapi_Char * i_str) Sets the string. morapi_String_append() morapi_Result morapi_String_append ( morapi_String * self, const morapi_Char * i_str) Appends a string. morapi_String_appendChar() morapi_Result morapi_String_appendChar ( morapi_String * self, morapi_Char i_ch) Appends a charactor. morapi_String_erase() morapi_Result morapi_String_erase ( morapi_String * self, morapi_Int32 i_begi, morapi_Int32 i_endi) Erases charactors in range (i_begi, i_endi]. morapi_String_eraseChar() morapi_Result morapi_String_eraseChar ( morapi_String * self, morapi_Int32 i_pos) Erases a charactor at i_pos. morapi_String_appendf() morapi_Result morapi_String_appendf ( morapi_String * self, const morapi_Char * i_fmt, ...) Append a formatted string. morapi_String_sprintf() morapi_Result morapi_String_sprintf ( morapi_String * self, const morapi_Char * i_fmt, ...) Make a formatted string. morapi_String_getAllocSize() morapi_Int32 morapi_String_getAllocSize ( morapi_String * self) Gets allocation size. See also morapi_String_getAllocSize() morapi_String_isEmpty() morapi_Bool morapi_String_isEmpty ( morapi_String * self) Returns whether the string is empty or not. morapi_String_getLen() morapi_Int32 morapi_String_getLen ( morapi_String * self) Gets the length of the string. morapi_String_get() const morapi_Char * morapi_String_get ( morapi_String * self) Gets the head of the string. morapi_String_getBack() const morapi_Char * morapi_String_getBack ( morapi_String * self) Gets the last of the string. morapi_String_isEqualTo() morapi_Bool morapi_String_isEqualTo ( morapi_String * self, const morapi_Char * i_str) Returns whether self is equal to i_str. morapi_String_isCaseEqualTo() morapi_Bool morapi_String_isCaseEqualTo ( morapi_String * self, const morapi_Char * i_str) Returns whether self is equal to i_str ignoring case. morapi_String_isNumEqualTo() morapi_Bool morapi_String_isNumEqualTo ( morapi_String * self, const morapi_Char * i_str, morapi_Int32 i_num) Returns whether self is equal to i_str. morapi_String_isNumCaseEqualTo() morapi_Bool morapi_String_isNumCaseEqualTo ( morapi_String * self, const morapi_Char * i_str, morapi_Int32 i_num) Returns whether self is equal to i_str ignoring case.","title":"morapi_String Struct Reference"},{"location":"structmorapi__String.html#morapi_string-struct-reference","text":"core \u00bb string A string. More... #include <morapi_core_old.h>","title":"morapi_String Struct Reference"},{"location":"structmorapi__String.html#public-member-functions","text":"","title":"Public Member Functions"},{"location":"structmorapi__String.html#construction-and-destruction","text":"morapi_String * morapi_create_String ( morapi_Env *io_env) morapi_Result morapi_destroy_String ( morapi_Env *io_env, morapi_String *self) morapi_Result morapi_String_initialize ( morapi_String *self) morapi_Result morapi_String_init ( morapi_String *self, morapi_Int32 i_alloc_size, morapi_Char *buf) morapi_Result morapi_String_cleanup ( morapi_String *self) morapi_Result morapi_String_clear ( morapi_String *self)","title":"Construction and destruction"},{"location":"structmorapi__String.html#operations","text":"morapi_Result morapi_String_insert ( morapi_String *self, morapi_Int32 i_ins_pos, const morapi_Char *i_str, morapi_Int32 i_strn) morapi_Result morapi_String_insertChar ( morapi_String *self, morapi_Int32 i_ins_pos, morapi_Char i_ch) morapi_Result morapi_String_setN ( morapi_String *self, const morapi_Char *i_str, morapi_Int32 i_strn) morapi_Result morapi_String_set ( morapi_String *self, const morapi_Char *i_str) morapi_Result morapi_String_append ( morapi_String *self, const morapi_Char *i_str) morapi_Result morapi_String_appendChar ( morapi_String *self, morapi_Char i_ch) morapi_Result morapi_String_erase ( morapi_String *self, morapi_Int32 i_begi, morapi_Int32 i_endi) morapi_Result morapi_String_eraseChar ( morapi_String *self, morapi_Int32 i_pos)","title":"Operations"},{"location":"structmorapi__String.html#formatted-string","text":"morapi_Result morapi_String_appendf ( morapi_String *self, const morapi_Char *i_fmt,...) morapi_Result morapi_String_sprintf ( morapi_String *self, const morapi_Char *i_fmt,...)","title":"Formatted String."},{"location":"structmorapi__String.html#getters","text":"morapi_Int32 morapi_String_getAllocSize ( morapi_String *self) morapi_Bool morapi_String_isEmpty ( morapi_String *self) morapi_Int32 morapi_String_getLen ( morapi_String *self) const morapi_Char * morapi_String_get ( morapi_String *self) const morapi_Char * morapi_String_getBack ( morapi_String *self) morapi_Bool morapi_String_isEqualTo ( morapi_String *self, const morapi_Char *i_str) morapi_Bool morapi_String_isCaseEqualTo ( morapi_String *self, const morapi_Char *i_str) morapi_Bool morapi_String_isNumEqualTo ( morapi_String *self, const morapi_Char *i_str, morapi_Int32 i_num) morapi_Bool morapi_String_isNumCaseEqualTo ( morapi_String *self, const morapi_Char *i_str, morapi_Int32 i_num)","title":"Getters"},{"location":"structmorapi__String.html#detailed-description","text":"A string.","title":"Detailed Description"},{"location":"structmorapi__String.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__String.html#morapi_create_string","text":"morapi_String * morapi_create_String ( morapi_Env * io_env) Creates the string. Parameters io_env : the envrironment data. Returns the created string.","title":"morapi_create_String()"},{"location":"structmorapi__String.html#morapi_destroy_string","text":"morapi_Result morapi_destroy_String ( morapi_Env * io_env, morapi_String * self) Destroyes the string. Parameters io_env : the environment data. self : the string to destroy.","title":"morapi_destroy_String()"},{"location":"structmorapi__String.html#morapi_string_initialize","text":"morapi_Result morapi_String_initialize ( morapi_String * self) Initializes the string with default values.","title":"morapi_String_initialize()"},{"location":"structmorapi__String.html#morapi_string_init","text":"morapi_Result morapi_String_init ( morapi_String * self, morapi_Int32 i_alloc_size, morapi_Char * buf) Initializes the string.","title":"morapi_String_init()"},{"location":"structmorapi__String.html#morapi_string_cleanup","text":"morapi_Result morapi_String_cleanup ( morapi_String * self) Cleans up the string.","title":"morapi_String_cleanup()"},{"location":"structmorapi__String.html#morapi_string_clear","text":"morapi_Result morapi_String_clear ( morapi_String * self) Clears the string.","title":"morapi_String_clear()"},{"location":"structmorapi__String.html#morapi_string_insert","text":"morapi_Result morapi_String_insert ( morapi_String * self, morapi_Int32 i_ins_pos, const morapi_Char * i_str, morapi_Int32 i_strn) Inserts charactors to the string. If i_strn < 0, the whole of i_str is inserted.","title":"morapi_String_insert()"},{"location":"structmorapi__String.html#morapi_string_insertchar","text":"morapi_Result morapi_String_insertChar ( morapi_String * self, morapi_Int32 i_ins_pos, morapi_Char i_ch) Inserts a charactor into the string.","title":"morapi_String_insertChar()"},{"location":"structmorapi__String.html#morapi_string_setn","text":"morapi_Result morapi_String_setN ( morapi_String * self, const morapi_Char * i_str, morapi_Int32 i_strn) Sets the string first i_strn charactors of i_str.","title":"morapi_String_setN()"},{"location":"structmorapi__String.html#morapi_string_set","text":"morapi_Result morapi_String_set ( morapi_String * self, const morapi_Char * i_str) Sets the string.","title":"morapi_String_set()"},{"location":"structmorapi__String.html#morapi_string_append","text":"morapi_Result morapi_String_append ( morapi_String * self, const morapi_Char * i_str) Appends a string.","title":"morapi_String_append()"},{"location":"structmorapi__String.html#morapi_string_appendchar","text":"morapi_Result morapi_String_appendChar ( morapi_String * self, morapi_Char i_ch) Appends a charactor.","title":"morapi_String_appendChar()"},{"location":"structmorapi__String.html#morapi_string_erase","text":"morapi_Result morapi_String_erase ( morapi_String * self, morapi_Int32 i_begi, morapi_Int32 i_endi) Erases charactors in range (i_begi, i_endi].","title":"morapi_String_erase()"},{"location":"structmorapi__String.html#morapi_string_erasechar","text":"morapi_Result morapi_String_eraseChar ( morapi_String * self, morapi_Int32 i_pos) Erases a charactor at i_pos.","title":"morapi_String_eraseChar()"},{"location":"structmorapi__String.html#morapi_string_appendf","text":"morapi_Result morapi_String_appendf ( morapi_String * self, const morapi_Char * i_fmt, ...) Append a formatted string.","title":"morapi_String_appendf()"},{"location":"structmorapi__String.html#morapi_string_sprintf","text":"morapi_Result morapi_String_sprintf ( morapi_String * self, const morapi_Char * i_fmt, ...) Make a formatted string.","title":"morapi_String_sprintf()"},{"location":"structmorapi__String.html#morapi_string_getallocsize","text":"morapi_Int32 morapi_String_getAllocSize ( morapi_String * self) Gets allocation size. See also morapi_String_getAllocSize()","title":"morapi_String_getAllocSize()"},{"location":"structmorapi__String.html#morapi_string_isempty","text":"morapi_Bool morapi_String_isEmpty ( morapi_String * self) Returns whether the string is empty or not.","title":"morapi_String_isEmpty()"},{"location":"structmorapi__String.html#morapi_string_getlen","text":"morapi_Int32 morapi_String_getLen ( morapi_String * self) Gets the length of the string.","title":"morapi_String_getLen()"},{"location":"structmorapi__String.html#morapi_string_get","text":"const morapi_Char * morapi_String_get ( morapi_String * self) Gets the head of the string.","title":"morapi_String_get()"},{"location":"structmorapi__String.html#morapi_string_getback","text":"const morapi_Char * morapi_String_getBack ( morapi_String * self) Gets the last of the string.","title":"morapi_String_getBack()"},{"location":"structmorapi__String.html#morapi_string_isequalto","text":"morapi_Bool morapi_String_isEqualTo ( morapi_String * self, const morapi_Char * i_str) Returns whether self is equal to i_str.","title":"morapi_String_isEqualTo()"},{"location":"structmorapi__String.html#morapi_string_iscaseequalto","text":"morapi_Bool morapi_String_isCaseEqualTo ( morapi_String * self, const morapi_Char * i_str) Returns whether self is equal to i_str ignoring case.","title":"morapi_String_isCaseEqualTo()"},{"location":"structmorapi__String.html#morapi_string_isnumequalto","text":"morapi_Bool morapi_String_isNumEqualTo ( morapi_String * self, const morapi_Char * i_str, morapi_Int32 i_num) Returns whether self is equal to i_str.","title":"morapi_String_isNumEqualTo()"},{"location":"structmorapi__String.html#morapi_string_isnumcaseequalto","text":"morapi_Bool morapi_String_isNumCaseEqualTo ( morapi_String * self, const morapi_Char * i_str, morapi_Int32 i_num) Returns whether self is equal to i_str ignoring case.","title":"morapi_String_isNumCaseEqualTo()"},{"location":"structmorapi__Tensor.html","text":"morapi_Tensor Struct Reference dnn \u00bb tensor Tensor. More... #include <morapi_softneuro.h> Public Member Functions Tensor functions const morapi_Char * morapi_Tensor_getName (const morapi_Tensor *self) morapi_Result morapi_Tensor_format ( morapi_Tensor *self, morapi_DType i_dtype, morapi_Int32 i_rank, const morapi_Int32 *i_shape) morapi_DType morapi_Tensor_getDType (const morapi_Tensor *self) morapi_Int32 morapi_Tensor_getRank (const morapi_Tensor *self) const morapi_Int32 * morapi_Tensor_getShape (const morapi_Tensor *self) morapi_Int32 morapi_Tensor_getNumAt (const morapi_Tensor *self, morapi_Int32 i_dim) morapi_Size morapi_Tensor_getNum (const morapi_Tensor *self) morapi_Size morapi_Tensor_getSize (const morapi_Tensor *self) Tensor operations morapi_Result morapi_Tensor_cast ( morapi_Tensor *self, morapi_DType i_dtype, const morapi_Tensor *i_src) morapi_Result morapi_Tensor_normalize ( morapi_Tensor *self, morapi_Bool *o_is_normalized) Device Buffer morapi_DeviceBuf * morapi_Tensor_findDeviceBuf (const morapi_Tensor *self, const morapi_Device *i_device) morapi_Result morapi_Tensor_allocCpuBuf ( morapi_Tensor *self) morapi_Result morapi_Tensor_deallocCpuBuf ( morapi_Tensor *self) morapi_Result morapi_Tensor_syncTo ( morapi_Tensor *self, const morapi_Device *i_dst_device) morapi_Result morapi_Tensor_syncFrom ( morapi_Tensor *self, const morapi_Device *i_src_device) Generic getters void * morapi_Tensor_get (const morapi_Tensor *self) void * morapi_Tensor_get1 ( morapi_Tensor *self, morapi_Int32 i_0) void * morapi_Tensor_get2 ( morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1) void * morapi_Tensor_get3 ( morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) void * morapi_Tensor_get4 ( morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) void * morapi_Tensor_get5 ( morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) void * morapi_Tensor_get6 ( morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) void * morapi_Tensor_get7 ( morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) void * morapi_Tensor_get8 ( morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Float16 getters morapi_Float16 * morapi_Tensor_getFloat16 (const morapi_Tensor *self) morapi_Float16 * morapi_Tensor_get1Float16 (const morapi_Tensor *self, morapi_Int32 i_0) morapi_Float16 * morapi_Tensor_get2Float16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1) morapi_Float16 * morapi_Tensor_get3Float16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) morapi_Float16 * morapi_Tensor_get4Float16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) morapi_Float16 * morapi_Tensor_get5Float16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) morapi_Float16 * morapi_Tensor_get6Float16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) morapi_Float16 * morapi_Tensor_get7Float16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) morapi_Float16 * morapi_Tensor_get8Float16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Float32 getters morapi_Float32 * morapi_Tensor_getFloat32 (const morapi_Tensor *self) morapi_Float32 * morapi_Tensor_get1Float32 (const morapi_Tensor *self, morapi_Int32 i_0) morapi_Float32 * morapi_Tensor_get2Float32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1) morapi_Float32 * morapi_Tensor_get3Float32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) morapi_Float32 * morapi_Tensor_get4Float32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) morapi_Float32 * morapi_Tensor_get5Float32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) morapi_Float32 * morapi_Tensor_get6Float32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) morapi_Float32 * morapi_Tensor_get7Float32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) morapi_Float32 * morapi_Tensor_get8Float32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Float64 getters morapi_Float64 * morapi_Tensor_getFloat64 (const morapi_Tensor *self) morapi_Float64 * morapi_Tensor_get1Float64 (const morapi_Tensor *self, morapi_Int32 i_0) morapi_Float64 * morapi_Tensor_get2Float64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1) morapi_Float64 * morapi_Tensor_get3Float64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) morapi_Float64 * morapi_Tensor_get4Float64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) morapi_Float64 * morapi_Tensor_get5Float64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) morapi_Float64 * morapi_Tensor_get6Float64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) morapi_Float64 * morapi_Tensor_get7Float64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) morapi_Float64 * morapi_Tensor_get8Float64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Uint8 getters morapi_Uint8 * morapi_Tensor_getUint8 (const morapi_Tensor *self) morapi_Uint8 * morapi_Tensor_get1Uint8 (const morapi_Tensor *self, morapi_Int32 i_0) morapi_Uint8 * morapi_Tensor_get2Uint8 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1) morapi_Uint8 * morapi_Tensor_get3Uint8 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) morapi_Uint8 * morapi_Tensor_get4Uint8 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) morapi_Uint8 * morapi_Tensor_get5Uint8 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) morapi_Uint8 * morapi_Tensor_get6Uint8 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) morapi_Uint8 * morapi_Tensor_get7Uint8 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) morapi_Uint8 * morapi_Tensor_get8Uint8 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Uint16 getters morapi_Uint16 * morapi_Tensor_getUint16 (const morapi_Tensor *self) morapi_Uint16 * morapi_Tensor_get1Uint16 (const morapi_Tensor *self, morapi_Int32 i_0) morapi_Uint16 * morapi_Tensor_get2Uint16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1) morapi_Uint16 * morapi_Tensor_get3Uint16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) morapi_Uint16 * morapi_Tensor_get4Uint16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) morapi_Uint16 * morapi_Tensor_get5Uint16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) morapi_Uint16 * morapi_Tensor_get6Uint16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) morapi_Uint16 * morapi_Tensor_get7Uint16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) morapi_Uint16 * morapi_Tensor_get8Uint16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Uint32 getters morapi_Uint32 * morapi_Tensor_getUint32 (const morapi_Tensor *self) morapi_Uint32 * morapi_Tensor_get1Uint32 (const morapi_Tensor *self, morapi_Int32 i_0) morapi_Uint32 * morapi_Tensor_get2Uint32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1) morapi_Uint32 * morapi_Tensor_get3Uint32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) morapi_Uint32 * morapi_Tensor_get4Uint32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) morapi_Uint32 * morapi_Tensor_get5Uint32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) morapi_Uint32 * morapi_Tensor_get6Uint32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) morapi_Uint32 * morapi_Tensor_get7Uint32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) morapi_Uint32 * morapi_Tensor_get8Uint32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Uint64 getters morapi_Uint64 * morapi_Tensor_getUint64 (const morapi_Tensor *self) morapi_Uint64 * morapi_Tensor_get1Uint64 (const morapi_Tensor *self, morapi_Int32 i_0) morapi_Uint64 * morapi_Tensor_get2Uint64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1) morapi_Uint64 * morapi_Tensor_get3Uint64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) morapi_Uint64 * morapi_Tensor_get4Uint64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) morapi_Uint64 * morapi_Tensor_get5Uint64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) morapi_Uint64 * morapi_Tensor_get6Uint64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) morapi_Uint64 * morapi_Tensor_get7Uint64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) morapi_Uint64 * morapi_Tensor_get8Uint64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Int8 getters morapi_Int8 * morapi_Tensor_getInt8 (const morapi_Tensor *self) morapi_Int8 * morapi_Tensor_get1Int8 (const morapi_Tensor *self, morapi_Int32 i_0) morapi_Int8 * morapi_Tensor_get2Int8 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1) morapi_Int8 * morapi_Tensor_get3Int8 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) morapi_Int8 * morapi_Tensor_get4Int8 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) morapi_Int8 * morapi_Tensor_get5Int8 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) morapi_Int8 * morapi_Tensor_get6Int8 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) morapi_Int8 * morapi_Tensor_get7Int8 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) morapi_Int8 * morapi_Tensor_get8Int8 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Int16 getters morapi_Int16 * morapi_Tensor_getInt16 (const morapi_Tensor *self) morapi_Int16 * morapi_Tensor_get1Int16 (const morapi_Tensor *self, morapi_Int32 i_0) morapi_Int16 * morapi_Tensor_get2Int16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1) morapi_Int16 * morapi_Tensor_get3Int16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) morapi_Int16 * morapi_Tensor_get4Int16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) morapi_Int16 * morapi_Tensor_get5Int16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) morapi_Int16 * morapi_Tensor_get6Int16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) morapi_Int16 * morapi_Tensor_get7Int16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) morapi_Int16 * morapi_Tensor_get8Int16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) morapi_Int32 * morapi_Tensor_getInt32 (const morapi_Tensor *self) Int32 getters morapi_Int32 * morapi_Tensor_get1Int32 (const morapi_Tensor *self, morapi_Int32 i_0) morapi_Int32 * morapi_Tensor_get2Int32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1) morapi_Int32 * morapi_Tensor_get3Int32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) morapi_Int32 * morapi_Tensor_get4Int32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) morapi_Int32 * morapi_Tensor_get5Int32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) morapi_Int32 * morapi_Tensor_get6Int32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) morapi_Int32 * morapi_Tensor_get7Int32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) morapi_Int32 * morapi_Tensor_get8Int32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Int64 getters morapi_Int64 * morapi_Tensor_getInt64 (const morapi_Tensor *self) morapi_Int64 * morapi_Tensor_get1Int64 (const morapi_Tensor *self, morapi_Int32 i_0) morapi_Int64 * morapi_Tensor_get2Int64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1) morapi_Int64 * morapi_Tensor_get3Int64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) morapi_Int64 * morapi_Tensor_get4Int64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) morapi_Int64 * morapi_Tensor_get5Int64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) morapi_Int64 * morapi_Tensor_get6Int64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) morapi_Int64 * morapi_Tensor_get7Int64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) morapi_Int64 * morapi_Tensor_get8Int64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Serialization morapi_Result morapi_Tensor_saveNumpy (const morapi_Tensor *self, const morapi_Char *i_filename) morapi_Result morapi_Tensor_loadNumpy ( morapi_Tensor *self, const morapi_Char *i_filename) Quantization morapi_Result morapi_Tensor_clearMinv ( morapi_Tensor *self) morapi_Result morapi_Tensor_clearMaxv ( morapi_Tensor *self) morapi_Result morapi_Tensor_setMinv ( morapi_Tensor *self, morapi_Float32 i_minv) morapi_Result morapi_Tensor_setMaxv ( morapi_Tensor *self, morapi_Float32 i_maxv) morapi_Bool morapi_Tensor_hasMinv (const morapi_Tensor *self) morapi_Bool morapi_Tensor_hasMaxv (const morapi_Tensor *self) morapi_Float32 morapi_Tensor_getMinv (const morapi_Tensor *self) morapi_Float32 morapi_Tensor_getMaxv (const morapi_Tensor *self) morapi_Bool morapi_Tensor_isFinite (const morapi_Tensor *self) morapi_Bool morapi_Tensor_hasRange (const morapi_Tensor *self) morapi_Result morapi_Tensor_initQuant ( morapi_Tensor *self, morapi_QMode i_qmode, morapi_Int32 i_qaxis) morapi_QMode morapi_Tensor_getQMode (const morapi_Tensor *self) morapi_Int32 morapi_Tensor_getQAxis (const morapi_Tensor *self) morapi_Result morapi_Tensor_calcQuant ( morapi_Tensor *self, const morapi_Tensor *i_src) morapi_Result morapi_Tensor_calcQuantFromMinvMaxv ( morapi_Tensor *self) morapi_Result morapi_Tensor_copyQuant ( morapi_Tensor *self, const morapi_Tensor *i_src) morapi_Int32 morapi_Tensor_getQuantNum (const morapi_Tensor *self) morapi_Quant * morapi_Tensor_getQuants ( morapi_Tensor *self) morapi_Quant * morapi_Tensor_getQuant (const morapi_Tensor *self, morapi_Int32 i_index) Detailed Description Tensor. test_dnn_api.c . Member Function Documentation morapi_Tensor_getName() const morapi_Char * morapi_Tensor_getName (const morapi_Tensor * self) Gets the name. Parameters self : tensor object morapi_Tensor_format() morapi_Result morapi_Tensor_format ( morapi_Tensor * self, morapi_DType i_dtype, morapi_Int32 i_rank, const morapi_Int32 * i_shape) Initializes and allocates the CPU buffer. Parameters self : the tensor i_dtype : data type. i_rank : rank. i_shape : shape ( integer array). morapi_Tensor_getDType() morapi_DType morapi_Tensor_getDType (const morapi_Tensor * self) Gets the data type. Parameters self : tensor object morapi_Tensor_getRank() morapi_Int32 morapi_Tensor_getRank (const morapi_Tensor * self) Gets the rank (the number of dimensions). Parameters self : tensor object morapi_Tensor_getShape() const morapi_Int32 * morapi_Tensor_getShape (const morapi_Tensor * self) Gets the shape. Parameters self : tensor object morapi_Tensor_getNumAt() morapi_Int32 morapi_Tensor_getNumAt (const morapi_Tensor * self, morapi_Int32 i_dim) Gets the number of elements in the i_dim-th dimension. Parameters self : tensor object i_dim : dimension index morapi_Tensor_getNum() morapi_Size morapi_Tensor_getNum (const morapi_Tensor * self) Gets the number of elements. Parameters self : tensor object test_dnn_api.c . morapi_Tensor_getSize() morapi_Size morapi_Tensor_getSize (const morapi_Tensor * self) Gets the data size. Parameters self : tensor object morapi_Tensor_cast() morapi_Result morapi_Tensor_cast ( morapi_Tensor * self, morapi_DType i_dtype, const morapi_Tensor * i_src) Cast & copy the tensor. morapi_Tensor_findDeviceBuf() morapi_DeviceBuf * morapi_Tensor_findDeviceBuf (const morapi_Tensor * self, const morapi_Device * i_device) Finds the device buffer. Parameters self : tensor object i_device : device buffer morapi_Tensor_allocCpuBuf() morapi_Result morapi_Tensor_allocCpuBuf ( morapi_Tensor * self) Adds and allocates the cpu device buffers. Parameters self : tensor object morapi_Tensor_deallocCpuBuf() morapi_Result morapi_Tensor_deallocCpuBuf ( morapi_Tensor * self) Deallocates the cpu device buffers. Parameters self : tensor object morapi_Tensor_syncTo() morapi_Result morapi_Tensor_syncTo ( morapi_Tensor * self, const morapi_Device * i_dst_device) Synchronizes the data from cpu to i_dst_device. Parameters self : tensor object i_dst_device : destination device morapi_Tensor_syncFrom() morapi_Result morapi_Tensor_syncFrom ( morapi_Tensor * self, const morapi_Device * i_src_device) Synchronizes the data from i_src_device to all device buffers. If NULL == i_src, it syncs from cpu. Parameters self : tensor object i_src_device : source device morapi_Tensor_normalize() morapi_Result morapi_Tensor_normalize ( morapi_Tensor * self, morapi_Bool * o_is_normalized) Normalize the values. morapi_Tensor_get() void * morapi_Tensor_get (const morapi_Tensor * self) Gets the head pointer of the CPU buffer. Parameters self : the tensor morapi_Tensor_get1() void * morapi_Tensor_get1 ( morapi_Tensor * self, morapi_Int32 i_0) Gets the 1D data pointer. Parameters self : the tensor i_0 : index for the first dimension morapi_Tensor_get2() void * morapi_Tensor_get2 ( morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1) Gets the 2D data pointer. Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension morapi_Tensor_get3() void * morapi_Tensor_get3 ( morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) Gets the 3D data pointer. Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension morapi_Tensor_get4() void * morapi_Tensor_get4 ( morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) Gets the 4D data pointer. Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension morapi_Tensor_get5() void * morapi_Tensor_get5 ( morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) Gets the 5D data pointer. Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension morapi_Tensor_get6() void * morapi_Tensor_get6 ( morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) Gets the 6D data pointer. Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension morapi_Tensor_get7() void * morapi_Tensor_get7 ( morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) Gets the 7D data pointer. Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension morapi_Tensor_get8() void * morapi_Tensor_get8 ( morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Gets the 8D data pointer. Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension i_7 : index for the eigth dimension morapi_Tensor_getFloat16() morapi_Float16 * morapi_Tensor_getFloat16 (const morapi_Tensor * self) Gets the head of data pointer (morapi_Float16). Parameters self : the tensor morapi_Tensor_get1Float16() morapi_Float16 * morapi_Tensor_get1Float16 (const morapi_Tensor * self, morapi_Int32 i_0) Gets the 1D data pointer (morapi_Float16). Parameters self : the tensor i_0 : index for the first dimension morapi_Tensor_get2Float16() morapi_Float16 * morapi_Tensor_get2Float16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1) Gets the 2D data pointer (morapi_Float16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension morapi_Tensor_get3Float16() morapi_Float16 * morapi_Tensor_get3Float16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) Gets the 3D data pointer (morapi_Float16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension morapi_Tensor_get4Float16() morapi_Float16 * morapi_Tensor_get4Float16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) Gets the 4D data pointer (morapi_Float16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension morapi_Tensor_get5Float16() morapi_Float16 * morapi_Tensor_get5Float16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) Gets the 5D data pointer (morapi_Float16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension morapi_Tensor_get6Float16() morapi_Float16 * morapi_Tensor_get6Float16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) Gets the 6D data pointer (morapi_Float16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension morapi_Tensor_get7Float16() morapi_Float16 * morapi_Tensor_get7Float16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) Gets the 7D data pointer (morapi_Float16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension morapi_Tensor_get8Float16() morapi_Float16 * morapi_Tensor_get8Float16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Gets the 8D data pointer (morapi_Float16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension i_7 : index for the eigth dimension morapi_Tensor_getFloat32() morapi_Float32 * morapi_Tensor_getFloat32 (const morapi_Tensor * self) Gets the head of data pointer (morapi_Float32). Parameters self : the tensor test_dnn_api.c . morapi_Tensor_get1Float32() morapi_Float32 * morapi_Tensor_get1Float32 (const morapi_Tensor * self, morapi_Int32 i_0) Gets the 1D data pointer (morapi_Float32). Parameters self : the tensor i_0 : index for the first dimension morapi_Tensor_get2Float32() morapi_Float32 * morapi_Tensor_get2Float32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1) Gets the 2D data pointer (morapi_Float32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension morapi_Tensor_get3Float32() morapi_Float32 * morapi_Tensor_get3Float32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) Gets the 3D data pointer (morapi_Float32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension morapi_Tensor_get4Float32() morapi_Float32 * morapi_Tensor_get4Float32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) Gets the 4D data pointer (morapi_Float32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension morapi_Tensor_get5Float32() morapi_Float32 * morapi_Tensor_get5Float32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) Gets the 5D data pointer (morapi_Float32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension morapi_Tensor_get6Float32() morapi_Float32 * morapi_Tensor_get6Float32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) Gets the 6D data pointer (morapi_Float32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension morapi_Tensor_get7Float32() morapi_Float32 * morapi_Tensor_get7Float32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) Gets the 7D data pointer (morapi_Float32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension morapi_Tensor_get8Float32() morapi_Float32 * morapi_Tensor_get8Float32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Gets the 8D data pointer (morapi_Float32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension i_7 : index for the eigth dimension morapi_Tensor_getFloat64() morapi_Float64 * morapi_Tensor_getFloat64 (const morapi_Tensor * self) Gets the head of data pointer (morapi_Float64). Parameters self : the tensor morapi_Tensor_get1Float64() morapi_Float64 * morapi_Tensor_get1Float64 (const morapi_Tensor * self, morapi_Int32 i_0) Gets the 1D data pointer. Parameters self : the tensor i_0 : index for the first dimension morapi_Tensor_get2Float64() morapi_Float64 * morapi_Tensor_get2Float64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1) Gets the 2D data pointer (morapi_Float64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension morapi_Tensor_get3Float64() morapi_Float64 * morapi_Tensor_get3Float64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) Gets the 3D data pointer (morapi_Float64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension morapi_Tensor_get4Float64() morapi_Float64 * morapi_Tensor_get4Float64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) Gets the 4D data pointer (morapi_Float64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension morapi_Tensor_get5Float64() morapi_Float64 * morapi_Tensor_get5Float64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) Gets the 5D data pointer (morapi_Float64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension morapi_Tensor_get6Float64() morapi_Float64 * morapi_Tensor_get6Float64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) Gets the 6D data pointer (morapi_Float64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension morapi_Tensor_get7Float64() morapi_Float64 * morapi_Tensor_get7Float64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) Gets the 7D data pointer (morapi_Float64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension morapi_Tensor_get8Float64() morapi_Float64 * morapi_Tensor_get8Float64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Gets the 8D data pointer (morapi_Float64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension i_7 : index for the eigth dimension morapi_Tensor_getUint8() morapi_Uint8 * morapi_Tensor_getUint8 (const morapi_Tensor * self) Gets the head of data pointer (morapi_Uint8). Parameters self : the tensor morapi_Tensor_get1Uint8() morapi_Uint8 * morapi_Tensor_get1Uint8 (const morapi_Tensor * self, morapi_Int32 i_0) Gets the 1D data pointer (morapi_Uint8). Parameters self : the tensor i_0 : index for the first dimension morapi_Tensor_get2Uint8() morapi_Uint8 * morapi_Tensor_get2Uint8 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1) Gets the 2D data pointer (morapi_Uint8). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension morapi_Tensor_get3Uint8() morapi_Uint8 * morapi_Tensor_get3Uint8 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) Gets the 3D data pointer (morapi_Uint8). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension morapi_Tensor_get4Uint8() morapi_Uint8 * morapi_Tensor_get4Uint8 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) Gets the 4D data pointer (morapi_Uint8). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension morapi_Tensor_get5Uint8() morapi_Uint8 * morapi_Tensor_get5Uint8 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) Gets the 5D data pointer (morapi_Uint8). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension morapi_Tensor_get6Uint8() morapi_Uint8 * morapi_Tensor_get6Uint8 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) Gets the 6D data pointer (morapi_Uint8). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension morapi_Tensor_get7Uint8() morapi_Uint8 * morapi_Tensor_get7Uint8 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) Gets the 7D data pointer (morapi_Uint8). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension morapi_Tensor_get8Uint8() morapi_Uint8 * morapi_Tensor_get8Uint8 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Gets the 8D data pointer (morapi_Uint8). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension i_7 : index for the eigth dimension morapi_Tensor_getUint16() morapi_Uint16 * morapi_Tensor_getUint16 (const morapi_Tensor * self) Gets the head of data pointer (morapi_Uint16). Parameters self : the tensor morapi_Tensor_get1Uint16() morapi_Uint16 * morapi_Tensor_get1Uint16 (const morapi_Tensor * self, morapi_Int32 i_0) Gets the 1D data pointer (morapi_Uint16). Parameters self : the tensor i_0 : index for the first dimension morapi_Tensor_get2Uint16() morapi_Uint16 * morapi_Tensor_get2Uint16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1) Gets the 2D data pointer (morapi_Uint16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension morapi_Tensor_get3Uint16() morapi_Uint16 * morapi_Tensor_get3Uint16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) Gets the 3D data pointer (morapi_Uint16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension morapi_Tensor_get4Uint16() morapi_Uint16 * morapi_Tensor_get4Uint16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) Gets the 4D data pointer (morapi_Uint16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension morapi_Tensor_get5Uint16() morapi_Uint16 * morapi_Tensor_get5Uint16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) Gets the 5D data pointer (morapi_Uint16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension morapi_Tensor_get6Uint16() morapi_Uint16 * morapi_Tensor_get6Uint16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) Gets the 6D data pointer (morapi_Uint16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension morapi_Tensor_get7Uint16() morapi_Uint16 * morapi_Tensor_get7Uint16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) Gets the 7D data pointer (morapi_Uint16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension morapi_Tensor_get8Uint16() morapi_Uint16 * morapi_Tensor_get8Uint16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Gets the 8D data pointer (morapi_Uint16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension i_7 : index for the eigth dimension morapi_Tensor_getUint32() morapi_Uint32 * morapi_Tensor_getUint32 (const morapi_Tensor * self) Gets the head of data pointer (morapi_Uint32). Parameters self : the tensor morapi_Tensor_get1Uint32() morapi_Uint32 * morapi_Tensor_get1Uint32 (const morapi_Tensor * self, morapi_Int32 i_0) Gets the 1D data pointer (morapi_Uint32). Parameters self : the tensor i_0 : index for the first dimension morapi_Tensor_get2Uint32() morapi_Uint32 * morapi_Tensor_get2Uint32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1) Gets the 2D data pointer (morapi_Uint32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension morapi_Tensor_get3Uint32() morapi_Uint32 * morapi_Tensor_get3Uint32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) Gets the 3D data pointer (morapi_Uint32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension morapi_Tensor_get4Uint32() morapi_Uint32 * morapi_Tensor_get4Uint32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) Gets the 4D data pointer (morapi_Uint32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension morapi_Tensor_get5Uint32() morapi_Uint32 * morapi_Tensor_get5Uint32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) Gets the 5D data pointer (morapi_Uint32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension morapi_Tensor_get6Uint32() morapi_Uint32 * morapi_Tensor_get6Uint32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) Gets the 6D data pointer (morapi_Uint32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension morapi_Tensor_get7Uint32() morapi_Uint32 * morapi_Tensor_get7Uint32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) Gets the 7D data pointer (morapi_Uint32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension morapi_Tensor_get8Uint32() morapi_Uint32 * morapi_Tensor_get8Uint32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Gets the 8D data pointer (morapi_Uint32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension i_7 : index for the eigth dimension morapi_Tensor_getUint64() morapi_Uint64 * morapi_Tensor_getUint64 (const morapi_Tensor * self) Gets the head of data pointer (morapi_Uint64). Parameters self : the tensor morapi_Tensor_get1Uint64() morapi_Uint64 * morapi_Tensor_get1Uint64 (const morapi_Tensor * self, morapi_Int32 i_0) Gets the 1D data pointer (morapi_Uint64). Parameters self : the tensor i_0 : index for the first dimension morapi_Tensor_get2Uint64() morapi_Uint64 * morapi_Tensor_get2Uint64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1) Gets the 2D data pointer (morapi_Uint64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension morapi_Tensor_get3Uint64() morapi_Uint64 * morapi_Tensor_get3Uint64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) Gets the 3D data pointer (morapi_Uint64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension morapi_Tensor_get4Uint64() morapi_Uint64 * morapi_Tensor_get4Uint64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) Gets the 4D data pointer (morapi_Uint64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension morapi_Tensor_get5Uint64() morapi_Uint64 * morapi_Tensor_get5Uint64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) Gets the 5D data pointer (morapi_Uint64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension morapi_Tensor_get6Uint64() morapi_Uint64 * morapi_Tensor_get6Uint64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) Gets the 6D data pointer (morapi_Uint64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension morapi_Tensor_get7Uint64() morapi_Uint64 * morapi_Tensor_get7Uint64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) Gets the 7D data pointer (morapi_Uint64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension morapi_Tensor_get8Uint64() morapi_Uint64 * morapi_Tensor_get8Uint64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Gets the 8D data pointer (morapi_Uint64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension i_7 : index for the eigth dimension morapi_Tensor_getInt8() morapi_Int8 * morapi_Tensor_getInt8 (const morapi_Tensor * self) Gets the head of data pointer (morapi_Int8). Parameters self : the tensor morapi_Tensor_get1Int8() morapi_Int8 * morapi_Tensor_get1Int8 (const morapi_Tensor * self, morapi_Int32 i_0) Gets the 1D data pointer (morapi_Int8). Parameters self : the tensor i_0 : index for the first dimension morapi_Tensor_get2Int8() morapi_Int8 * morapi_Tensor_get2Int8 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1) Gets the 2D data pointer (morapi_Int8). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension morapi_Tensor_get3Int8() morapi_Int8 * morapi_Tensor_get3Int8 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) Gets the 3D data pointer (morapi_Int8). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension morapi_Tensor_get4Int8() morapi_Int8 * morapi_Tensor_get4Int8 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) Gets the 4D data pointer (morapi_Int8). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension morapi_Tensor_get5Int8() morapi_Int8 * morapi_Tensor_get5Int8 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) Gets the 5D data pointer (morapi_Int8). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension morapi_Tensor_get6Int8() morapi_Int8 * morapi_Tensor_get6Int8 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) Gets the 6D data pointer (morapi_Int8). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension morapi_Tensor_get7Int8() morapi_Int8 * morapi_Tensor_get7Int8 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) Gets the 7D data pointer (morapi_Int8). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension morapi_Tensor_get8Int8() morapi_Int8 * morapi_Tensor_get8Int8 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Gets the 8D data pointer (morapi_Int8). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension i_7 : index for the eigth dimension morapi_Tensor_getInt16() morapi_Int16 * morapi_Tensor_getInt16 (const morapi_Tensor * self) Gets the head of data pointer (morapi_Int16). Parameters self : the tensor morapi_Tensor_get1Int16() morapi_Int16 * morapi_Tensor_get1Int16 (const morapi_Tensor * self, morapi_Int32 i_0) Gets the 1D data pointer (morapi_Int16). Parameters self : the tensor i_0 : index for the first dimension morapi_Tensor_get2Int16() morapi_Int16 * morapi_Tensor_get2Int16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1) Gets the 2D data pointer (morapi_Int16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension morapi_Tensor_get3Int16() morapi_Int16 * morapi_Tensor_get3Int16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) Gets the 3D data pointer (morapi_Int16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension morapi_Tensor_get4Int16() morapi_Int16 * morapi_Tensor_get4Int16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) Gets the 4D data pointer (morapi_Int16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension morapi_Tensor_get5Int16() morapi_Int16 * morapi_Tensor_get5Int16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) Gets the 5D data pointer (morapi_Int16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension morapi_Tensor_get6Int16() morapi_Int16 * morapi_Tensor_get6Int16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) Gets the 6D data pointer (morapi_Int16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension morapi_Tensor_get7Int16() morapi_Int16 * morapi_Tensor_get7Int16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) Gets the 7D data pointer (morapi_Int16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension morapi_Tensor_get8Int16() morapi_Int16 * morapi_Tensor_get8Int16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Gets the 8D data pointer (morapi_Int16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension i_7 : index for the eigth dimension morapi_Tensor_getInt32() morapi_Int32 * morapi_Tensor_getInt32 (const morapi_Tensor * self) Gets the head of data pointer (morapi_Int32). Parameters self : the tensor morapi_Tensor_get1Int32() morapi_Int32 * morapi_Tensor_get1Int32 (const morapi_Tensor * self, morapi_Int32 i_0) Gets the 1D data pointer (morapi_Int32). Parameters self : the tensor i_0 : index for the first dimension morapi_Tensor_get2Int32() morapi_Int32 * morapi_Tensor_get2Int32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1) Gets the 2D data pointer (morapi_Int32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension morapi_Tensor_get3Int32() morapi_Int32 * morapi_Tensor_get3Int32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) Gets the 3D data pointer (morapi_Int32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension morapi_Tensor_get4Int32() morapi_Int32 * morapi_Tensor_get4Int32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) Gets the 4D data pointer (morapi_Int32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension morapi_Tensor_get5Int32() morapi_Int32 * morapi_Tensor_get5Int32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) Gets the 5D data pointer (morapi_Int32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension morapi_Tensor_get6Int32() morapi_Int32 * morapi_Tensor_get6Int32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) Gets the 6D data pointer (morapi_Int32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension morapi_Tensor_get7Int32() morapi_Int32 * morapi_Tensor_get7Int32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) Gets the 7D data pointer (morapi_Int32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension morapi_Tensor_get8Int32() morapi_Int32 * morapi_Tensor_get8Int32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Gets the 8D data pointer (morapi_Int32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension i_7 : index for the eigth dimension morapi_Tensor_getInt64() morapi_Int64 * morapi_Tensor_getInt64 (const morapi_Tensor * self) Gets the head of data pointer (morapi_Int64). Parameters self : the tensor morapi_Tensor_get1Int64() morapi_Int64 * morapi_Tensor_get1Int64 (const morapi_Tensor * self, morapi_Int32 i_0) Gets the 1D data pointer (morapi_Int64). Parameters self : the tensor i_0 : index for the first dimension morapi_Tensor_get2Int64() morapi_Int64 * morapi_Tensor_get2Int64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1) Gets the 2D data pointer (morapi_Int64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension morapi_Tensor_get3Int64() morapi_Int64 * morapi_Tensor_get3Int64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) Gets the 3D data pointer (morapi_Int64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension morapi_Tensor_get4Int64() morapi_Int64 * morapi_Tensor_get4Int64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) Gets the 4D data pointer (morapi_Int64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension morapi_Tensor_get5Int64() morapi_Int64 * morapi_Tensor_get5Int64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) Gets the 5D data pointer (morapi_Int64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension morapi_Tensor_get6Int64() morapi_Int64 * morapi_Tensor_get6Int64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) Gets the 6D data pointer (morapi_Int64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension morapi_Tensor_get7Int64() morapi_Int64 * morapi_Tensor_get7Int64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) Gets the 7D data pointer (morapi_Int64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension morapi_Tensor_get8Int64() morapi_Int64 * morapi_Tensor_get8Int64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Gets the 8D data pointer (morapi_Int64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension i_7 : index for the eigth dimension morapi_Tensor_saveNumpy() morapi_Result morapi_Tensor_saveNumpy (const morapi_Tensor * self, const morapi_Char * i_filename) Writes the tensor to file with a numpy format. morapi_Tensor_loadNumpy() morapi_Result morapi_Tensor_loadNumpy ( morapi_Tensor * self, const morapi_Char * i_filename) Reads the tensor from file with a numpy format. morapi_Tensor_clearMinv() morapi_Result morapi_Tensor_clearMinv ( morapi_Tensor * self) Clears the min value. Parameters self : the tensor morapi_Tensor_clearMaxv() morapi_Result morapi_Tensor_clearMaxv ( morapi_Tensor * self) Clears the max value. Parameters self : the tensor morapi_Tensor_setMinv() morapi_Result morapi_Tensor_setMinv ( morapi_Tensor * self, morapi_Float32 i_minv) Set the min value. Parameters self : the tensor i_minv : minimum value morapi_Tensor_setMaxv() morapi_Result morapi_Tensor_setMaxv ( morapi_Tensor * self, morapi_Float32 i_maxv) Set the max value. Parameters self : the tensor i_maxv : maximum value morapi_Tensor_hasMinv() morapi_Bool morapi_Tensor_hasMinv (const morapi_Tensor * self) Whether self has the min value or not. Parameters self : the tensor morapi_Tensor_hasMaxv() morapi_Bool morapi_Tensor_hasMaxv (const morapi_Tensor * self) Whether self has the max value or not. Parameters self : the tensor morapi_Tensor_getMinv() morapi_Float32 morapi_Tensor_getMinv (const morapi_Tensor * self) Get the min value. Parameters self : the tensor morapi_Tensor_getMaxv() morapi_Float32 morapi_Tensor_getMaxv (const morapi_Tensor * self) Get the max value. Parameters self : the tensor morapi_Tensor_isFinite() morapi_Bool morapi_Tensor_isFinite (const morapi_Tensor * self) Whether self has the min value and the max value. Parameters self : the tensor morapi_Tensor_hasRange() morapi_Bool morapi_Tensor_hasRange (const morapi_Tensor * self) Whether self has a range (the min and max values). Parameters self : the tensor morapi_Tensor_initQuant() morapi_Result morapi_Tensor_initQuant ( morapi_Tensor * self, morapi_QMode i_qmode, morapi_Int32 i_qaxis) Initialize the quantizers with i_qmode. If the dtype isn't QINT8 or QINT32, it returns MORAPI_ERROR_STATE. Parameters self : the tensor i_qmode : quantization mode i_qaxis : quantization axis. It may be that 0 <= i_qaxis even when per-tensor mode for dithering. morapi_Tensor_getQMode() morapi_QMode morapi_Tensor_getQMode (const morapi_Tensor * self) Gets the quantization type. morapi_Tensor_getQAxis() morapi_Int32 morapi_Tensor_getQAxis (const morapi_Tensor * self) Gets the quantization axis. Parameters self : the tensor morapi_Tensor_calcQuant() morapi_Result morapi_Tensor_calcQuant ( morapi_Tensor * self, const morapi_Tensor * i_src) Calculates quants from i_src. The data type of i_src must be float32 or qint32. morapi_Tensor_calcQuantFromMinvMaxv() morapi_Result morapi_Tensor_calcQuantFromMinvMaxv ( morapi_Tensor * self) Calculates quants from the min and max values. morapi_Tensor_copyQuant() morapi_Result morapi_Tensor_copyQuant ( morapi_Tensor * self, const morapi_Tensor * i_src) Copies the quantization parameters. That is, minv, maxv and quantization coefficients. morapi_Tensor_getQuantNum() morapi_Int32 morapi_Tensor_getQuantNum (const morapi_Tensor * self) Gets the number of quants. Parameters self : the tensor morapi_Tensor_getQuants() morapi_Quant * morapi_Tensor_getQuants ( morapi_Tensor * self) Gets the quants. Parameters self : the tensor morapi_Tensor_getQuant() morapi_Quant * morapi_Tensor_getQuant (const morapi_Tensor * self, morapi_Int32 i_index) Gets the i_index-th quant. Parameters self : the tensor i_index : quant index","title":"morapi_Tensor"},{"location":"structmorapi__Tensor.html#morapi_tensor-struct-reference","text":"dnn \u00bb tensor Tensor. More... #include <morapi_softneuro.h>","title":"morapi_Tensor Struct Reference"},{"location":"structmorapi__Tensor.html#public-member-functions","text":"","title":"Public Member Functions"},{"location":"structmorapi__Tensor.html#tensor-functions","text":"const morapi_Char * morapi_Tensor_getName (const morapi_Tensor *self) morapi_Result morapi_Tensor_format ( morapi_Tensor *self, morapi_DType i_dtype, morapi_Int32 i_rank, const morapi_Int32 *i_shape) morapi_DType morapi_Tensor_getDType (const morapi_Tensor *self) morapi_Int32 morapi_Tensor_getRank (const morapi_Tensor *self) const morapi_Int32 * morapi_Tensor_getShape (const morapi_Tensor *self) morapi_Int32 morapi_Tensor_getNumAt (const morapi_Tensor *self, morapi_Int32 i_dim) morapi_Size morapi_Tensor_getNum (const morapi_Tensor *self) morapi_Size morapi_Tensor_getSize (const morapi_Tensor *self)","title":"Tensor functions"},{"location":"structmorapi__Tensor.html#tensor-operations","text":"morapi_Result morapi_Tensor_cast ( morapi_Tensor *self, morapi_DType i_dtype, const morapi_Tensor *i_src) morapi_Result morapi_Tensor_normalize ( morapi_Tensor *self, morapi_Bool *o_is_normalized)","title":"Tensor operations"},{"location":"structmorapi__Tensor.html#device-buffer","text":"morapi_DeviceBuf * morapi_Tensor_findDeviceBuf (const morapi_Tensor *self, const morapi_Device *i_device) morapi_Result morapi_Tensor_allocCpuBuf ( morapi_Tensor *self) morapi_Result morapi_Tensor_deallocCpuBuf ( morapi_Tensor *self) morapi_Result morapi_Tensor_syncTo ( morapi_Tensor *self, const morapi_Device *i_dst_device) morapi_Result morapi_Tensor_syncFrom ( morapi_Tensor *self, const morapi_Device *i_src_device)","title":"Device Buffer"},{"location":"structmorapi__Tensor.html#generic-getters","text":"void * morapi_Tensor_get (const morapi_Tensor *self) void * morapi_Tensor_get1 ( morapi_Tensor *self, morapi_Int32 i_0) void * morapi_Tensor_get2 ( morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1) void * morapi_Tensor_get3 ( morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) void * morapi_Tensor_get4 ( morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) void * morapi_Tensor_get5 ( morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) void * morapi_Tensor_get6 ( morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) void * morapi_Tensor_get7 ( morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) void * morapi_Tensor_get8 ( morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7)","title":"Generic getters"},{"location":"structmorapi__Tensor.html#float16-getters","text":"morapi_Float16 * morapi_Tensor_getFloat16 (const morapi_Tensor *self) morapi_Float16 * morapi_Tensor_get1Float16 (const morapi_Tensor *self, morapi_Int32 i_0) morapi_Float16 * morapi_Tensor_get2Float16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1) morapi_Float16 * morapi_Tensor_get3Float16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) morapi_Float16 * morapi_Tensor_get4Float16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) morapi_Float16 * morapi_Tensor_get5Float16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) morapi_Float16 * morapi_Tensor_get6Float16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) morapi_Float16 * morapi_Tensor_get7Float16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) morapi_Float16 * morapi_Tensor_get8Float16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7)","title":"Float16 getters"},{"location":"structmorapi__Tensor.html#float32-getters","text":"morapi_Float32 * morapi_Tensor_getFloat32 (const morapi_Tensor *self) morapi_Float32 * morapi_Tensor_get1Float32 (const morapi_Tensor *self, morapi_Int32 i_0) morapi_Float32 * morapi_Tensor_get2Float32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1) morapi_Float32 * morapi_Tensor_get3Float32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) morapi_Float32 * morapi_Tensor_get4Float32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) morapi_Float32 * morapi_Tensor_get5Float32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) morapi_Float32 * morapi_Tensor_get6Float32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) morapi_Float32 * morapi_Tensor_get7Float32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) morapi_Float32 * morapi_Tensor_get8Float32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7)","title":"Float32 getters"},{"location":"structmorapi__Tensor.html#float64-getters","text":"morapi_Float64 * morapi_Tensor_getFloat64 (const morapi_Tensor *self) morapi_Float64 * morapi_Tensor_get1Float64 (const morapi_Tensor *self, morapi_Int32 i_0) morapi_Float64 * morapi_Tensor_get2Float64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1) morapi_Float64 * morapi_Tensor_get3Float64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) morapi_Float64 * morapi_Tensor_get4Float64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) morapi_Float64 * morapi_Tensor_get5Float64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) morapi_Float64 * morapi_Tensor_get6Float64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) morapi_Float64 * morapi_Tensor_get7Float64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) morapi_Float64 * morapi_Tensor_get8Float64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7)","title":"Float64 getters"},{"location":"structmorapi__Tensor.html#uint8-getters","text":"morapi_Uint8 * morapi_Tensor_getUint8 (const morapi_Tensor *self) morapi_Uint8 * morapi_Tensor_get1Uint8 (const morapi_Tensor *self, morapi_Int32 i_0) morapi_Uint8 * morapi_Tensor_get2Uint8 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1) morapi_Uint8 * morapi_Tensor_get3Uint8 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) morapi_Uint8 * morapi_Tensor_get4Uint8 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) morapi_Uint8 * morapi_Tensor_get5Uint8 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) morapi_Uint8 * morapi_Tensor_get6Uint8 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) morapi_Uint8 * morapi_Tensor_get7Uint8 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) morapi_Uint8 * morapi_Tensor_get8Uint8 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7)","title":"Uint8 getters"},{"location":"structmorapi__Tensor.html#uint16-getters","text":"morapi_Uint16 * morapi_Tensor_getUint16 (const morapi_Tensor *self) morapi_Uint16 * morapi_Tensor_get1Uint16 (const morapi_Tensor *self, morapi_Int32 i_0) morapi_Uint16 * morapi_Tensor_get2Uint16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1) morapi_Uint16 * morapi_Tensor_get3Uint16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) morapi_Uint16 * morapi_Tensor_get4Uint16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) morapi_Uint16 * morapi_Tensor_get5Uint16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) morapi_Uint16 * morapi_Tensor_get6Uint16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) morapi_Uint16 * morapi_Tensor_get7Uint16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) morapi_Uint16 * morapi_Tensor_get8Uint16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7)","title":"Uint16 getters"},{"location":"structmorapi__Tensor.html#uint32-getters","text":"morapi_Uint32 * morapi_Tensor_getUint32 (const morapi_Tensor *self) morapi_Uint32 * morapi_Tensor_get1Uint32 (const morapi_Tensor *self, morapi_Int32 i_0) morapi_Uint32 * morapi_Tensor_get2Uint32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1) morapi_Uint32 * morapi_Tensor_get3Uint32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) morapi_Uint32 * morapi_Tensor_get4Uint32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) morapi_Uint32 * morapi_Tensor_get5Uint32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) morapi_Uint32 * morapi_Tensor_get6Uint32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) morapi_Uint32 * morapi_Tensor_get7Uint32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) morapi_Uint32 * morapi_Tensor_get8Uint32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7)","title":"Uint32 getters"},{"location":"structmorapi__Tensor.html#uint64-getters","text":"morapi_Uint64 * morapi_Tensor_getUint64 (const morapi_Tensor *self) morapi_Uint64 * morapi_Tensor_get1Uint64 (const morapi_Tensor *self, morapi_Int32 i_0) morapi_Uint64 * morapi_Tensor_get2Uint64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1) morapi_Uint64 * morapi_Tensor_get3Uint64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) morapi_Uint64 * morapi_Tensor_get4Uint64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) morapi_Uint64 * morapi_Tensor_get5Uint64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) morapi_Uint64 * morapi_Tensor_get6Uint64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) morapi_Uint64 * morapi_Tensor_get7Uint64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) morapi_Uint64 * morapi_Tensor_get8Uint64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7)","title":"Uint64 getters"},{"location":"structmorapi__Tensor.html#int8-getters","text":"morapi_Int8 * morapi_Tensor_getInt8 (const morapi_Tensor *self) morapi_Int8 * morapi_Tensor_get1Int8 (const morapi_Tensor *self, morapi_Int32 i_0) morapi_Int8 * morapi_Tensor_get2Int8 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1) morapi_Int8 * morapi_Tensor_get3Int8 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) morapi_Int8 * morapi_Tensor_get4Int8 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) morapi_Int8 * morapi_Tensor_get5Int8 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) morapi_Int8 * morapi_Tensor_get6Int8 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) morapi_Int8 * morapi_Tensor_get7Int8 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) morapi_Int8 * morapi_Tensor_get8Int8 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7)","title":"Int8 getters"},{"location":"structmorapi__Tensor.html#int16-getters","text":"morapi_Int16 * morapi_Tensor_getInt16 (const morapi_Tensor *self) morapi_Int16 * morapi_Tensor_get1Int16 (const morapi_Tensor *self, morapi_Int32 i_0) morapi_Int16 * morapi_Tensor_get2Int16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1) morapi_Int16 * morapi_Tensor_get3Int16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) morapi_Int16 * morapi_Tensor_get4Int16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) morapi_Int16 * morapi_Tensor_get5Int16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) morapi_Int16 * morapi_Tensor_get6Int16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) morapi_Int16 * morapi_Tensor_get7Int16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) morapi_Int16 * morapi_Tensor_get8Int16 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) morapi_Int32 * morapi_Tensor_getInt32 (const morapi_Tensor *self)","title":"Int16 getters"},{"location":"structmorapi__Tensor.html#int32-getters","text":"morapi_Int32 * morapi_Tensor_get1Int32 (const morapi_Tensor *self, morapi_Int32 i_0) morapi_Int32 * morapi_Tensor_get2Int32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1) morapi_Int32 * morapi_Tensor_get3Int32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) morapi_Int32 * morapi_Tensor_get4Int32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) morapi_Int32 * morapi_Tensor_get5Int32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) morapi_Int32 * morapi_Tensor_get6Int32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) morapi_Int32 * morapi_Tensor_get7Int32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) morapi_Int32 * morapi_Tensor_get8Int32 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7)","title":"Int32 getters"},{"location":"structmorapi__Tensor.html#int64-getters","text":"morapi_Int64 * morapi_Tensor_getInt64 (const morapi_Tensor *self) morapi_Int64 * morapi_Tensor_get1Int64 (const morapi_Tensor *self, morapi_Int32 i_0) morapi_Int64 * morapi_Tensor_get2Int64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1) morapi_Int64 * morapi_Tensor_get3Int64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) morapi_Int64 * morapi_Tensor_get4Int64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) morapi_Int64 * morapi_Tensor_get5Int64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) morapi_Int64 * morapi_Tensor_get6Int64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) morapi_Int64 * morapi_Tensor_get7Int64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) morapi_Int64 * morapi_Tensor_get8Int64 (const morapi_Tensor *self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7)","title":"Int64 getters"},{"location":"structmorapi__Tensor.html#serialization","text":"morapi_Result morapi_Tensor_saveNumpy (const morapi_Tensor *self, const morapi_Char *i_filename) morapi_Result morapi_Tensor_loadNumpy ( morapi_Tensor *self, const morapi_Char *i_filename)","title":"Serialization"},{"location":"structmorapi__Tensor.html#quantization","text":"morapi_Result morapi_Tensor_clearMinv ( morapi_Tensor *self) morapi_Result morapi_Tensor_clearMaxv ( morapi_Tensor *self) morapi_Result morapi_Tensor_setMinv ( morapi_Tensor *self, morapi_Float32 i_minv) morapi_Result morapi_Tensor_setMaxv ( morapi_Tensor *self, morapi_Float32 i_maxv) morapi_Bool morapi_Tensor_hasMinv (const morapi_Tensor *self) morapi_Bool morapi_Tensor_hasMaxv (const morapi_Tensor *self) morapi_Float32 morapi_Tensor_getMinv (const morapi_Tensor *self) morapi_Float32 morapi_Tensor_getMaxv (const morapi_Tensor *self) morapi_Bool morapi_Tensor_isFinite (const morapi_Tensor *self) morapi_Bool morapi_Tensor_hasRange (const morapi_Tensor *self) morapi_Result morapi_Tensor_initQuant ( morapi_Tensor *self, morapi_QMode i_qmode, morapi_Int32 i_qaxis) morapi_QMode morapi_Tensor_getQMode (const morapi_Tensor *self) morapi_Int32 morapi_Tensor_getQAxis (const morapi_Tensor *self) morapi_Result morapi_Tensor_calcQuant ( morapi_Tensor *self, const morapi_Tensor *i_src) morapi_Result morapi_Tensor_calcQuantFromMinvMaxv ( morapi_Tensor *self) morapi_Result morapi_Tensor_copyQuant ( morapi_Tensor *self, const morapi_Tensor *i_src) morapi_Int32 morapi_Tensor_getQuantNum (const morapi_Tensor *self) morapi_Quant * morapi_Tensor_getQuants ( morapi_Tensor *self) morapi_Quant * morapi_Tensor_getQuant (const morapi_Tensor *self, morapi_Int32 i_index)","title":"Quantization"},{"location":"structmorapi__Tensor.html#detailed-description","text":"Tensor. test_dnn_api.c .","title":"Detailed Description"},{"location":"structmorapi__Tensor.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__Tensor.html#morapi_tensor_getname","text":"const morapi_Char * morapi_Tensor_getName (const morapi_Tensor * self) Gets the name. Parameters self : tensor object","title":"morapi_Tensor_getName()"},{"location":"structmorapi__Tensor.html#morapi_tensor_format","text":"morapi_Result morapi_Tensor_format ( morapi_Tensor * self, morapi_DType i_dtype, morapi_Int32 i_rank, const morapi_Int32 * i_shape) Initializes and allocates the CPU buffer. Parameters self : the tensor i_dtype : data type. i_rank : rank. i_shape : shape ( integer array).","title":"morapi_Tensor_format()"},{"location":"structmorapi__Tensor.html#morapi_tensor_getdtype","text":"morapi_DType morapi_Tensor_getDType (const morapi_Tensor * self) Gets the data type. Parameters self : tensor object","title":"morapi_Tensor_getDType()"},{"location":"structmorapi__Tensor.html#morapi_tensor_getrank","text":"morapi_Int32 morapi_Tensor_getRank (const morapi_Tensor * self) Gets the rank (the number of dimensions). Parameters self : tensor object","title":"morapi_Tensor_getRank()"},{"location":"structmorapi__Tensor.html#morapi_tensor_getshape","text":"const morapi_Int32 * morapi_Tensor_getShape (const morapi_Tensor * self) Gets the shape. Parameters self : tensor object","title":"morapi_Tensor_getShape()"},{"location":"structmorapi__Tensor.html#morapi_tensor_getnumat","text":"morapi_Int32 morapi_Tensor_getNumAt (const morapi_Tensor * self, morapi_Int32 i_dim) Gets the number of elements in the i_dim-th dimension. Parameters self : tensor object i_dim : dimension index","title":"morapi_Tensor_getNumAt()"},{"location":"structmorapi__Tensor.html#morapi_tensor_getnum","text":"morapi_Size morapi_Tensor_getNum (const morapi_Tensor * self) Gets the number of elements. Parameters self : tensor object test_dnn_api.c .","title":"morapi_Tensor_getNum()"},{"location":"structmorapi__Tensor.html#morapi_tensor_getsize","text":"morapi_Size morapi_Tensor_getSize (const morapi_Tensor * self) Gets the data size. Parameters self : tensor object","title":"morapi_Tensor_getSize()"},{"location":"structmorapi__Tensor.html#morapi_tensor_cast","text":"morapi_Result morapi_Tensor_cast ( morapi_Tensor * self, morapi_DType i_dtype, const morapi_Tensor * i_src) Cast & copy the tensor.","title":"morapi_Tensor_cast()"},{"location":"structmorapi__Tensor.html#morapi_tensor_finddevicebuf","text":"morapi_DeviceBuf * morapi_Tensor_findDeviceBuf (const morapi_Tensor * self, const morapi_Device * i_device) Finds the device buffer. Parameters self : tensor object i_device : device buffer","title":"morapi_Tensor_findDeviceBuf()"},{"location":"structmorapi__Tensor.html#morapi_tensor_alloccpubuf","text":"morapi_Result morapi_Tensor_allocCpuBuf ( morapi_Tensor * self) Adds and allocates the cpu device buffers. Parameters self : tensor object","title":"morapi_Tensor_allocCpuBuf()"},{"location":"structmorapi__Tensor.html#morapi_tensor_dealloccpubuf","text":"morapi_Result morapi_Tensor_deallocCpuBuf ( morapi_Tensor * self) Deallocates the cpu device buffers. Parameters self : tensor object","title":"morapi_Tensor_deallocCpuBuf()"},{"location":"structmorapi__Tensor.html#morapi_tensor_syncto","text":"morapi_Result morapi_Tensor_syncTo ( morapi_Tensor * self, const morapi_Device * i_dst_device) Synchronizes the data from cpu to i_dst_device. Parameters self : tensor object i_dst_device : destination device","title":"morapi_Tensor_syncTo()"},{"location":"structmorapi__Tensor.html#morapi_tensor_syncfrom","text":"morapi_Result morapi_Tensor_syncFrom ( morapi_Tensor * self, const morapi_Device * i_src_device) Synchronizes the data from i_src_device to all device buffers. If NULL == i_src, it syncs from cpu. Parameters self : tensor object i_src_device : source device","title":"morapi_Tensor_syncFrom()"},{"location":"structmorapi__Tensor.html#morapi_tensor_normalize","text":"morapi_Result morapi_Tensor_normalize ( morapi_Tensor * self, morapi_Bool * o_is_normalized) Normalize the values.","title":"morapi_Tensor_normalize()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get","text":"void * morapi_Tensor_get (const morapi_Tensor * self) Gets the head pointer of the CPU buffer. Parameters self : the tensor","title":"morapi_Tensor_get()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get1","text":"void * morapi_Tensor_get1 ( morapi_Tensor * self, morapi_Int32 i_0) Gets the 1D data pointer. Parameters self : the tensor i_0 : index for the first dimension","title":"morapi_Tensor_get1()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get2","text":"void * morapi_Tensor_get2 ( morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1) Gets the 2D data pointer. Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension","title":"morapi_Tensor_get2()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get3","text":"void * morapi_Tensor_get3 ( morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) Gets the 3D data pointer. Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension","title":"morapi_Tensor_get3()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get4","text":"void * morapi_Tensor_get4 ( morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) Gets the 4D data pointer. Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension","title":"morapi_Tensor_get4()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get5","text":"void * morapi_Tensor_get5 ( morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) Gets the 5D data pointer. Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension","title":"morapi_Tensor_get5()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get6","text":"void * morapi_Tensor_get6 ( morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) Gets the 6D data pointer. Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension","title":"morapi_Tensor_get6()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get7","text":"void * morapi_Tensor_get7 ( morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) Gets the 7D data pointer. Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension","title":"morapi_Tensor_get7()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get8","text":"void * morapi_Tensor_get8 ( morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Gets the 8D data pointer. Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension i_7 : index for the eigth dimension","title":"morapi_Tensor_get8()"},{"location":"structmorapi__Tensor.html#morapi_tensor_getfloat16","text":"morapi_Float16 * morapi_Tensor_getFloat16 (const morapi_Tensor * self) Gets the head of data pointer (morapi_Float16). Parameters self : the tensor","title":"morapi_Tensor_getFloat16()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get1float16","text":"morapi_Float16 * morapi_Tensor_get1Float16 (const morapi_Tensor * self, morapi_Int32 i_0) Gets the 1D data pointer (morapi_Float16). Parameters self : the tensor i_0 : index for the first dimension","title":"morapi_Tensor_get1Float16()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get2float16","text":"morapi_Float16 * morapi_Tensor_get2Float16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1) Gets the 2D data pointer (morapi_Float16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension","title":"morapi_Tensor_get2Float16()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get3float16","text":"morapi_Float16 * morapi_Tensor_get3Float16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) Gets the 3D data pointer (morapi_Float16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension","title":"morapi_Tensor_get3Float16()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get4float16","text":"morapi_Float16 * morapi_Tensor_get4Float16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) Gets the 4D data pointer (morapi_Float16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension","title":"morapi_Tensor_get4Float16()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get5float16","text":"morapi_Float16 * morapi_Tensor_get5Float16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) Gets the 5D data pointer (morapi_Float16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension","title":"morapi_Tensor_get5Float16()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get6float16","text":"morapi_Float16 * morapi_Tensor_get6Float16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) Gets the 6D data pointer (morapi_Float16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension","title":"morapi_Tensor_get6Float16()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get7float16","text":"morapi_Float16 * morapi_Tensor_get7Float16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) Gets the 7D data pointer (morapi_Float16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension","title":"morapi_Tensor_get7Float16()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get8float16","text":"morapi_Float16 * morapi_Tensor_get8Float16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Gets the 8D data pointer (morapi_Float16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension i_7 : index for the eigth dimension","title":"morapi_Tensor_get8Float16()"},{"location":"structmorapi__Tensor.html#morapi_tensor_getfloat32","text":"morapi_Float32 * morapi_Tensor_getFloat32 (const morapi_Tensor * self) Gets the head of data pointer (morapi_Float32). Parameters self : the tensor test_dnn_api.c .","title":"morapi_Tensor_getFloat32()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get1float32","text":"morapi_Float32 * morapi_Tensor_get1Float32 (const morapi_Tensor * self, morapi_Int32 i_0) Gets the 1D data pointer (morapi_Float32). Parameters self : the tensor i_0 : index for the first dimension","title":"morapi_Tensor_get1Float32()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get2float32","text":"morapi_Float32 * morapi_Tensor_get2Float32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1) Gets the 2D data pointer (morapi_Float32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension","title":"morapi_Tensor_get2Float32()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get3float32","text":"morapi_Float32 * morapi_Tensor_get3Float32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) Gets the 3D data pointer (morapi_Float32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension","title":"morapi_Tensor_get3Float32()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get4float32","text":"morapi_Float32 * morapi_Tensor_get4Float32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) Gets the 4D data pointer (morapi_Float32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension","title":"morapi_Tensor_get4Float32()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get5float32","text":"morapi_Float32 * morapi_Tensor_get5Float32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) Gets the 5D data pointer (morapi_Float32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension","title":"morapi_Tensor_get5Float32()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get6float32","text":"morapi_Float32 * morapi_Tensor_get6Float32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) Gets the 6D data pointer (morapi_Float32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension","title":"morapi_Tensor_get6Float32()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get7float32","text":"morapi_Float32 * morapi_Tensor_get7Float32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) Gets the 7D data pointer (morapi_Float32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension","title":"morapi_Tensor_get7Float32()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get8float32","text":"morapi_Float32 * morapi_Tensor_get8Float32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Gets the 8D data pointer (morapi_Float32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension i_7 : index for the eigth dimension","title":"morapi_Tensor_get8Float32()"},{"location":"structmorapi__Tensor.html#morapi_tensor_getfloat64","text":"morapi_Float64 * morapi_Tensor_getFloat64 (const morapi_Tensor * self) Gets the head of data pointer (morapi_Float64). Parameters self : the tensor","title":"morapi_Tensor_getFloat64()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get1float64","text":"morapi_Float64 * morapi_Tensor_get1Float64 (const morapi_Tensor * self, morapi_Int32 i_0) Gets the 1D data pointer. Parameters self : the tensor i_0 : index for the first dimension","title":"morapi_Tensor_get1Float64()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get2float64","text":"morapi_Float64 * morapi_Tensor_get2Float64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1) Gets the 2D data pointer (morapi_Float64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension","title":"morapi_Tensor_get2Float64()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get3float64","text":"morapi_Float64 * morapi_Tensor_get3Float64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) Gets the 3D data pointer (morapi_Float64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension","title":"morapi_Tensor_get3Float64()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get4float64","text":"morapi_Float64 * morapi_Tensor_get4Float64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) Gets the 4D data pointer (morapi_Float64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension","title":"morapi_Tensor_get4Float64()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get5float64","text":"morapi_Float64 * morapi_Tensor_get5Float64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) Gets the 5D data pointer (morapi_Float64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension","title":"morapi_Tensor_get5Float64()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get6float64","text":"morapi_Float64 * morapi_Tensor_get6Float64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) Gets the 6D data pointer (morapi_Float64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension","title":"morapi_Tensor_get6Float64()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get7float64","text":"morapi_Float64 * morapi_Tensor_get7Float64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) Gets the 7D data pointer (morapi_Float64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension","title":"morapi_Tensor_get7Float64()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get8float64","text":"morapi_Float64 * morapi_Tensor_get8Float64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Gets the 8D data pointer (morapi_Float64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension i_7 : index for the eigth dimension","title":"morapi_Tensor_get8Float64()"},{"location":"structmorapi__Tensor.html#morapi_tensor_getuint8","text":"morapi_Uint8 * morapi_Tensor_getUint8 (const morapi_Tensor * self) Gets the head of data pointer (morapi_Uint8). Parameters self : the tensor","title":"morapi_Tensor_getUint8()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get1uint8","text":"morapi_Uint8 * morapi_Tensor_get1Uint8 (const morapi_Tensor * self, morapi_Int32 i_0) Gets the 1D data pointer (morapi_Uint8). Parameters self : the tensor i_0 : index for the first dimension","title":"morapi_Tensor_get1Uint8()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get2uint8","text":"morapi_Uint8 * morapi_Tensor_get2Uint8 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1) Gets the 2D data pointer (morapi_Uint8). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension","title":"morapi_Tensor_get2Uint8()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get3uint8","text":"morapi_Uint8 * morapi_Tensor_get3Uint8 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) Gets the 3D data pointer (morapi_Uint8). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension","title":"morapi_Tensor_get3Uint8()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get4uint8","text":"morapi_Uint8 * morapi_Tensor_get4Uint8 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) Gets the 4D data pointer (morapi_Uint8). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension","title":"morapi_Tensor_get4Uint8()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get5uint8","text":"morapi_Uint8 * morapi_Tensor_get5Uint8 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) Gets the 5D data pointer (morapi_Uint8). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension","title":"morapi_Tensor_get5Uint8()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get6uint8","text":"morapi_Uint8 * morapi_Tensor_get6Uint8 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) Gets the 6D data pointer (morapi_Uint8). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension","title":"morapi_Tensor_get6Uint8()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get7uint8","text":"morapi_Uint8 * morapi_Tensor_get7Uint8 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) Gets the 7D data pointer (morapi_Uint8). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension","title":"morapi_Tensor_get7Uint8()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get8uint8","text":"morapi_Uint8 * morapi_Tensor_get8Uint8 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Gets the 8D data pointer (morapi_Uint8). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension i_7 : index for the eigth dimension","title":"morapi_Tensor_get8Uint8()"},{"location":"structmorapi__Tensor.html#morapi_tensor_getuint16","text":"morapi_Uint16 * morapi_Tensor_getUint16 (const morapi_Tensor * self) Gets the head of data pointer (morapi_Uint16). Parameters self : the tensor","title":"morapi_Tensor_getUint16()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get1uint16","text":"morapi_Uint16 * morapi_Tensor_get1Uint16 (const morapi_Tensor * self, morapi_Int32 i_0) Gets the 1D data pointer (morapi_Uint16). Parameters self : the tensor i_0 : index for the first dimension","title":"morapi_Tensor_get1Uint16()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get2uint16","text":"morapi_Uint16 * morapi_Tensor_get2Uint16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1) Gets the 2D data pointer (morapi_Uint16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension","title":"morapi_Tensor_get2Uint16()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get3uint16","text":"morapi_Uint16 * morapi_Tensor_get3Uint16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) Gets the 3D data pointer (morapi_Uint16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension","title":"morapi_Tensor_get3Uint16()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get4uint16","text":"morapi_Uint16 * morapi_Tensor_get4Uint16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) Gets the 4D data pointer (morapi_Uint16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension","title":"morapi_Tensor_get4Uint16()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get5uint16","text":"morapi_Uint16 * morapi_Tensor_get5Uint16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) Gets the 5D data pointer (morapi_Uint16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension","title":"morapi_Tensor_get5Uint16()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get6uint16","text":"morapi_Uint16 * morapi_Tensor_get6Uint16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) Gets the 6D data pointer (morapi_Uint16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension","title":"morapi_Tensor_get6Uint16()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get7uint16","text":"morapi_Uint16 * morapi_Tensor_get7Uint16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) Gets the 7D data pointer (morapi_Uint16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension","title":"morapi_Tensor_get7Uint16()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get8uint16","text":"morapi_Uint16 * morapi_Tensor_get8Uint16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Gets the 8D data pointer (morapi_Uint16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension i_7 : index for the eigth dimension","title":"morapi_Tensor_get8Uint16()"},{"location":"structmorapi__Tensor.html#morapi_tensor_getuint32","text":"morapi_Uint32 * morapi_Tensor_getUint32 (const morapi_Tensor * self) Gets the head of data pointer (morapi_Uint32). Parameters self : the tensor","title":"morapi_Tensor_getUint32()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get1uint32","text":"morapi_Uint32 * morapi_Tensor_get1Uint32 (const morapi_Tensor * self, morapi_Int32 i_0) Gets the 1D data pointer (morapi_Uint32). Parameters self : the tensor i_0 : index for the first dimension","title":"morapi_Tensor_get1Uint32()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get2uint32","text":"morapi_Uint32 * morapi_Tensor_get2Uint32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1) Gets the 2D data pointer (morapi_Uint32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension","title":"morapi_Tensor_get2Uint32()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get3uint32","text":"morapi_Uint32 * morapi_Tensor_get3Uint32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) Gets the 3D data pointer (morapi_Uint32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension","title":"morapi_Tensor_get3Uint32()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get4uint32","text":"morapi_Uint32 * morapi_Tensor_get4Uint32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) Gets the 4D data pointer (morapi_Uint32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension","title":"morapi_Tensor_get4Uint32()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get5uint32","text":"morapi_Uint32 * morapi_Tensor_get5Uint32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) Gets the 5D data pointer (morapi_Uint32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension","title":"morapi_Tensor_get5Uint32()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get6uint32","text":"morapi_Uint32 * morapi_Tensor_get6Uint32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) Gets the 6D data pointer (morapi_Uint32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension","title":"morapi_Tensor_get6Uint32()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get7uint32","text":"morapi_Uint32 * morapi_Tensor_get7Uint32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) Gets the 7D data pointer (morapi_Uint32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension","title":"morapi_Tensor_get7Uint32()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get8uint32","text":"morapi_Uint32 * morapi_Tensor_get8Uint32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Gets the 8D data pointer (morapi_Uint32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension i_7 : index for the eigth dimension","title":"morapi_Tensor_get8Uint32()"},{"location":"structmorapi__Tensor.html#morapi_tensor_getuint64","text":"morapi_Uint64 * morapi_Tensor_getUint64 (const morapi_Tensor * self) Gets the head of data pointer (morapi_Uint64). Parameters self : the tensor","title":"morapi_Tensor_getUint64()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get1uint64","text":"morapi_Uint64 * morapi_Tensor_get1Uint64 (const morapi_Tensor * self, morapi_Int32 i_0) Gets the 1D data pointer (morapi_Uint64). Parameters self : the tensor i_0 : index for the first dimension","title":"morapi_Tensor_get1Uint64()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get2uint64","text":"morapi_Uint64 * morapi_Tensor_get2Uint64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1) Gets the 2D data pointer (morapi_Uint64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension","title":"morapi_Tensor_get2Uint64()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get3uint64","text":"morapi_Uint64 * morapi_Tensor_get3Uint64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) Gets the 3D data pointer (morapi_Uint64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension","title":"morapi_Tensor_get3Uint64()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get4uint64","text":"morapi_Uint64 * morapi_Tensor_get4Uint64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) Gets the 4D data pointer (morapi_Uint64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension","title":"morapi_Tensor_get4Uint64()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get5uint64","text":"morapi_Uint64 * morapi_Tensor_get5Uint64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) Gets the 5D data pointer (morapi_Uint64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension","title":"morapi_Tensor_get5Uint64()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get6uint64","text":"morapi_Uint64 * morapi_Tensor_get6Uint64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) Gets the 6D data pointer (morapi_Uint64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension","title":"morapi_Tensor_get6Uint64()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get7uint64","text":"morapi_Uint64 * morapi_Tensor_get7Uint64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) Gets the 7D data pointer (morapi_Uint64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension","title":"morapi_Tensor_get7Uint64()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get8uint64","text":"morapi_Uint64 * morapi_Tensor_get8Uint64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Gets the 8D data pointer (morapi_Uint64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension i_7 : index for the eigth dimension","title":"morapi_Tensor_get8Uint64()"},{"location":"structmorapi__Tensor.html#morapi_tensor_getint8","text":"morapi_Int8 * morapi_Tensor_getInt8 (const morapi_Tensor * self) Gets the head of data pointer (morapi_Int8). Parameters self : the tensor","title":"morapi_Tensor_getInt8()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get1int8","text":"morapi_Int8 * morapi_Tensor_get1Int8 (const morapi_Tensor * self, morapi_Int32 i_0) Gets the 1D data pointer (morapi_Int8). Parameters self : the tensor i_0 : index for the first dimension","title":"morapi_Tensor_get1Int8()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get2int8","text":"morapi_Int8 * morapi_Tensor_get2Int8 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1) Gets the 2D data pointer (morapi_Int8). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension","title":"morapi_Tensor_get2Int8()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get3int8","text":"morapi_Int8 * morapi_Tensor_get3Int8 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) Gets the 3D data pointer (morapi_Int8). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension","title":"morapi_Tensor_get3Int8()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get4int8","text":"morapi_Int8 * morapi_Tensor_get4Int8 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) Gets the 4D data pointer (morapi_Int8). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension","title":"morapi_Tensor_get4Int8()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get5int8","text":"morapi_Int8 * morapi_Tensor_get5Int8 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) Gets the 5D data pointer (morapi_Int8). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension","title":"morapi_Tensor_get5Int8()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get6int8","text":"morapi_Int8 * morapi_Tensor_get6Int8 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) Gets the 6D data pointer (morapi_Int8). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension","title":"morapi_Tensor_get6Int8()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get7int8","text":"morapi_Int8 * morapi_Tensor_get7Int8 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) Gets the 7D data pointer (morapi_Int8). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension","title":"morapi_Tensor_get7Int8()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get8int8","text":"morapi_Int8 * morapi_Tensor_get8Int8 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Gets the 8D data pointer (morapi_Int8). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension i_7 : index for the eigth dimension","title":"morapi_Tensor_get8Int8()"},{"location":"structmorapi__Tensor.html#morapi_tensor_getint16","text":"morapi_Int16 * morapi_Tensor_getInt16 (const morapi_Tensor * self) Gets the head of data pointer (morapi_Int16). Parameters self : the tensor","title":"morapi_Tensor_getInt16()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get1int16","text":"morapi_Int16 * morapi_Tensor_get1Int16 (const morapi_Tensor * self, morapi_Int32 i_0) Gets the 1D data pointer (morapi_Int16). Parameters self : the tensor i_0 : index for the first dimension","title":"morapi_Tensor_get1Int16()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get2int16","text":"morapi_Int16 * morapi_Tensor_get2Int16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1) Gets the 2D data pointer (morapi_Int16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension","title":"morapi_Tensor_get2Int16()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get3int16","text":"morapi_Int16 * morapi_Tensor_get3Int16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) Gets the 3D data pointer (morapi_Int16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension","title":"morapi_Tensor_get3Int16()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get4int16","text":"morapi_Int16 * morapi_Tensor_get4Int16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) Gets the 4D data pointer (morapi_Int16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension","title":"morapi_Tensor_get4Int16()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get5int16","text":"morapi_Int16 * morapi_Tensor_get5Int16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) Gets the 5D data pointer (morapi_Int16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension","title":"morapi_Tensor_get5Int16()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get6int16","text":"morapi_Int16 * morapi_Tensor_get6Int16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) Gets the 6D data pointer (morapi_Int16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension","title":"morapi_Tensor_get6Int16()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get7int16","text":"morapi_Int16 * morapi_Tensor_get7Int16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) Gets the 7D data pointer (morapi_Int16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension","title":"morapi_Tensor_get7Int16()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get8int16","text":"morapi_Int16 * morapi_Tensor_get8Int16 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Gets the 8D data pointer (morapi_Int16). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension i_7 : index for the eigth dimension","title":"morapi_Tensor_get8Int16()"},{"location":"structmorapi__Tensor.html#morapi_tensor_getint32","text":"morapi_Int32 * morapi_Tensor_getInt32 (const morapi_Tensor * self) Gets the head of data pointer (morapi_Int32). Parameters self : the tensor","title":"morapi_Tensor_getInt32()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get1int32","text":"morapi_Int32 * morapi_Tensor_get1Int32 (const morapi_Tensor * self, morapi_Int32 i_0) Gets the 1D data pointer (morapi_Int32). Parameters self : the tensor i_0 : index for the first dimension","title":"morapi_Tensor_get1Int32()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get2int32","text":"morapi_Int32 * morapi_Tensor_get2Int32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1) Gets the 2D data pointer (morapi_Int32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension","title":"morapi_Tensor_get2Int32()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get3int32","text":"morapi_Int32 * morapi_Tensor_get3Int32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) Gets the 3D data pointer (morapi_Int32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension","title":"morapi_Tensor_get3Int32()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get4int32","text":"morapi_Int32 * morapi_Tensor_get4Int32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) Gets the 4D data pointer (morapi_Int32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension","title":"morapi_Tensor_get4Int32()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get5int32","text":"morapi_Int32 * morapi_Tensor_get5Int32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) Gets the 5D data pointer (morapi_Int32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension","title":"morapi_Tensor_get5Int32()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get6int32","text":"morapi_Int32 * morapi_Tensor_get6Int32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) Gets the 6D data pointer (morapi_Int32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension","title":"morapi_Tensor_get6Int32()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get7int32","text":"morapi_Int32 * morapi_Tensor_get7Int32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) Gets the 7D data pointer (morapi_Int32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension","title":"morapi_Tensor_get7Int32()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get8int32","text":"morapi_Int32 * morapi_Tensor_get8Int32 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Gets the 8D data pointer (morapi_Int32). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension i_7 : index for the eigth dimension","title":"morapi_Tensor_get8Int32()"},{"location":"structmorapi__Tensor.html#morapi_tensor_getint64","text":"morapi_Int64 * morapi_Tensor_getInt64 (const morapi_Tensor * self) Gets the head of data pointer (morapi_Int64). Parameters self : the tensor","title":"morapi_Tensor_getInt64()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get1int64","text":"morapi_Int64 * morapi_Tensor_get1Int64 (const morapi_Tensor * self, morapi_Int32 i_0) Gets the 1D data pointer (morapi_Int64). Parameters self : the tensor i_0 : index for the first dimension","title":"morapi_Tensor_get1Int64()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get2int64","text":"morapi_Int64 * morapi_Tensor_get2Int64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1) Gets the 2D data pointer (morapi_Int64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension","title":"morapi_Tensor_get2Int64()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get3int64","text":"morapi_Int64 * morapi_Tensor_get3Int64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2) Gets the 3D data pointer (morapi_Int64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension","title":"morapi_Tensor_get3Int64()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get4int64","text":"morapi_Int64 * morapi_Tensor_get4Int64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3) Gets the 4D data pointer (morapi_Int64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension","title":"morapi_Tensor_get4Int64()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get5int64","text":"morapi_Int64 * morapi_Tensor_get5Int64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4) Gets the 5D data pointer (morapi_Int64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension","title":"morapi_Tensor_get5Int64()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get6int64","text":"morapi_Int64 * morapi_Tensor_get6Int64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5) Gets the 6D data pointer (morapi_Int64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension","title":"morapi_Tensor_get6Int64()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get7int64","text":"morapi_Int64 * morapi_Tensor_get7Int64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6) Gets the 7D data pointer (morapi_Int64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension","title":"morapi_Tensor_get7Int64()"},{"location":"structmorapi__Tensor.html#morapi_tensor_get8int64","text":"morapi_Int64 * morapi_Tensor_get8Int64 (const morapi_Tensor * self, morapi_Int32 i_0, morapi_Int32 i_1, morapi_Int32 i_2, morapi_Int32 i_3, morapi_Int32 i_4, morapi_Int32 i_5, morapi_Int32 i_6, morapi_Int32 i_7) Gets the 8D data pointer (morapi_Int64). Parameters self : the tensor i_0 : index for the first dimension i_1 : index for the second dimension i_2 : index for the third dimension i_3 : index for the fourth dimension i_4 : index for the fifth dimension i_5 : index for the sixth dimension i_6 : index for the seventh dimension i_7 : index for the eigth dimension","title":"morapi_Tensor_get8Int64()"},{"location":"structmorapi__Tensor.html#morapi_tensor_savenumpy","text":"morapi_Result morapi_Tensor_saveNumpy (const morapi_Tensor * self, const morapi_Char * i_filename) Writes the tensor to file with a numpy format.","title":"morapi_Tensor_saveNumpy()"},{"location":"structmorapi__Tensor.html#morapi_tensor_loadnumpy","text":"morapi_Result morapi_Tensor_loadNumpy ( morapi_Tensor * self, const morapi_Char * i_filename) Reads the tensor from file with a numpy format.","title":"morapi_Tensor_loadNumpy()"},{"location":"structmorapi__Tensor.html#morapi_tensor_clearminv","text":"morapi_Result morapi_Tensor_clearMinv ( morapi_Tensor * self) Clears the min value. Parameters self : the tensor","title":"morapi_Tensor_clearMinv()"},{"location":"structmorapi__Tensor.html#morapi_tensor_clearmaxv","text":"morapi_Result morapi_Tensor_clearMaxv ( morapi_Tensor * self) Clears the max value. Parameters self : the tensor","title":"morapi_Tensor_clearMaxv()"},{"location":"structmorapi__Tensor.html#morapi_tensor_setminv","text":"morapi_Result morapi_Tensor_setMinv ( morapi_Tensor * self, morapi_Float32 i_minv) Set the min value. Parameters self : the tensor i_minv : minimum value","title":"morapi_Tensor_setMinv()"},{"location":"structmorapi__Tensor.html#morapi_tensor_setmaxv","text":"morapi_Result morapi_Tensor_setMaxv ( morapi_Tensor * self, morapi_Float32 i_maxv) Set the max value. Parameters self : the tensor i_maxv : maximum value","title":"morapi_Tensor_setMaxv()"},{"location":"structmorapi__Tensor.html#morapi_tensor_hasminv","text":"morapi_Bool morapi_Tensor_hasMinv (const morapi_Tensor * self) Whether self has the min value or not. Parameters self : the tensor","title":"morapi_Tensor_hasMinv()"},{"location":"structmorapi__Tensor.html#morapi_tensor_hasmaxv","text":"morapi_Bool morapi_Tensor_hasMaxv (const morapi_Tensor * self) Whether self has the max value or not. Parameters self : the tensor","title":"morapi_Tensor_hasMaxv()"},{"location":"structmorapi__Tensor.html#morapi_tensor_getminv","text":"morapi_Float32 morapi_Tensor_getMinv (const morapi_Tensor * self) Get the min value. Parameters self : the tensor","title":"morapi_Tensor_getMinv()"},{"location":"structmorapi__Tensor.html#morapi_tensor_getmaxv","text":"morapi_Float32 morapi_Tensor_getMaxv (const morapi_Tensor * self) Get the max value. Parameters self : the tensor","title":"morapi_Tensor_getMaxv()"},{"location":"structmorapi__Tensor.html#morapi_tensor_isfinite","text":"morapi_Bool morapi_Tensor_isFinite (const morapi_Tensor * self) Whether self has the min value and the max value. Parameters self : the tensor","title":"morapi_Tensor_isFinite()"},{"location":"structmorapi__Tensor.html#morapi_tensor_hasrange","text":"morapi_Bool morapi_Tensor_hasRange (const morapi_Tensor * self) Whether self has a range (the min and max values). Parameters self : the tensor","title":"morapi_Tensor_hasRange()"},{"location":"structmorapi__Tensor.html#morapi_tensor_initquant","text":"morapi_Result morapi_Tensor_initQuant ( morapi_Tensor * self, morapi_QMode i_qmode, morapi_Int32 i_qaxis) Initialize the quantizers with i_qmode. If the dtype isn't QINT8 or QINT32, it returns MORAPI_ERROR_STATE. Parameters self : the tensor i_qmode : quantization mode i_qaxis : quantization axis. It may be that 0 <= i_qaxis even when per-tensor mode for dithering.","title":"morapi_Tensor_initQuant()"},{"location":"structmorapi__Tensor.html#morapi_tensor_getqmode","text":"morapi_QMode morapi_Tensor_getQMode (const morapi_Tensor * self) Gets the quantization type.","title":"morapi_Tensor_getQMode()"},{"location":"structmorapi__Tensor.html#morapi_tensor_getqaxis","text":"morapi_Int32 morapi_Tensor_getQAxis (const morapi_Tensor * self) Gets the quantization axis. Parameters self : the tensor","title":"morapi_Tensor_getQAxis()"},{"location":"structmorapi__Tensor.html#morapi_tensor_calcquant","text":"morapi_Result morapi_Tensor_calcQuant ( morapi_Tensor * self, const morapi_Tensor * i_src) Calculates quants from i_src. The data type of i_src must be float32 or qint32.","title":"morapi_Tensor_calcQuant()"},{"location":"structmorapi__Tensor.html#morapi_tensor_calcquantfromminvmaxv","text":"morapi_Result morapi_Tensor_calcQuantFromMinvMaxv ( morapi_Tensor * self) Calculates quants from the min and max values.","title":"morapi_Tensor_calcQuantFromMinvMaxv()"},{"location":"structmorapi__Tensor.html#morapi_tensor_copyquant","text":"morapi_Result morapi_Tensor_copyQuant ( morapi_Tensor * self, const morapi_Tensor * i_src) Copies the quantization parameters. That is, minv, maxv and quantization coefficients.","title":"morapi_Tensor_copyQuant()"},{"location":"structmorapi__Tensor.html#morapi_tensor_getquantnum","text":"morapi_Int32 morapi_Tensor_getQuantNum (const morapi_Tensor * self) Gets the number of quants. Parameters self : the tensor","title":"morapi_Tensor_getQuantNum()"},{"location":"structmorapi__Tensor.html#morapi_tensor_getquants","text":"morapi_Quant * morapi_Tensor_getQuants ( morapi_Tensor * self) Gets the quants. Parameters self : the tensor","title":"morapi_Tensor_getQuants()"},{"location":"structmorapi__Tensor.html#morapi_tensor_getquant","text":"morapi_Quant * morapi_Tensor_getQuant (const morapi_Tensor * self, morapi_Int32 i_index) Gets the i_index-th quant. Parameters self : the tensor i_index : quant index","title":"morapi_Tensor_getQuant()"},{"location":"structmorapi__Tensors.html","text":"morapi_Tensors Struct Reference dnn \u00bb tensor Tensor array. More... #include <morapi_softneuro.h> Public Member Functions morapi_Result morapi_Tensors_clear ( morapi_Tensors *self) morapi_Tensor * morapi_Tensors_add ( morapi_Tensors *self) morapi_Result morapi_Tensors_erase ( morapi_Tensors *self, morapi_Int32 i_index) morapi_Result morapi_Tensors_copyTensor ( morapi_Tensors *self, const morapi_Tensor *i_tensor) morapi_Int32 morapi_Tensors_getNum (const morapi_Tensors *self) morapi_Tensor * morapi_Tensors_get (const morapi_Tensors *self, morapi_Int32 i_index) morapi_Result morapi_Tensors_cast ( morapi_Tensors *self, morapi_DType i_dtype, const morapi_Tensors *i_src) Detailed Description Tensor array. Member Function Documentation morapi_Tensors_clear() morapi_Result morapi_Tensors_clear ( morapi_Tensors * self) Clears. Parameters self : tensors object morapi_Tensors_add() morapi_Tensor * morapi_Tensors_add ( morapi_Tensors * self) Adds a tensor. Parameters self : tensors object morapi_Tensors_erase() morapi_Result morapi_Tensors_erase ( morapi_Tensors * self, morapi_Int32 i_index) Erases the tensor. Parameters self : tensors object i_index : index of the tensor to be erased morapi_Tensors_copyTensor() morapi_Result morapi_Tensors_copyTensor ( morapi_Tensors * self, const morapi_Tensor * i_tensor) Copy a tensor (shallow copy). morapi_Tensors_getNum() morapi_Int32 morapi_Tensors_getNum (const morapi_Tensors * self) Gets the number of tensors. Parameters self : tensors object morapi_Tensors_get() morapi_Tensor * morapi_Tensors_get (const morapi_Tensors * self, morapi_Int32 i_index) Gets the i_index-th tensor. Parameters self : tensors object i_index : index of the tensor to be gotten morapi_Tensors_cast() morapi_Result morapi_Tensors_cast ( morapi_Tensors * self, morapi_DType i_dtype, const morapi_Tensors * i_src) Casts.","title":"morapi_Tensors"},{"location":"structmorapi__Tensors.html#morapi_tensors-struct-reference","text":"dnn \u00bb tensor Tensor array. More... #include <morapi_softneuro.h>","title":"morapi_Tensors Struct Reference"},{"location":"structmorapi__Tensors.html#public-member-functions","text":"morapi_Result morapi_Tensors_clear ( morapi_Tensors *self) morapi_Tensor * morapi_Tensors_add ( morapi_Tensors *self) morapi_Result morapi_Tensors_erase ( morapi_Tensors *self, morapi_Int32 i_index) morapi_Result morapi_Tensors_copyTensor ( morapi_Tensors *self, const morapi_Tensor *i_tensor) morapi_Int32 morapi_Tensors_getNum (const morapi_Tensors *self) morapi_Tensor * morapi_Tensors_get (const morapi_Tensors *self, morapi_Int32 i_index) morapi_Result morapi_Tensors_cast ( morapi_Tensors *self, morapi_DType i_dtype, const morapi_Tensors *i_src)","title":"Public Member Functions"},{"location":"structmorapi__Tensors.html#detailed-description","text":"Tensor array.","title":"Detailed Description"},{"location":"structmorapi__Tensors.html#member-function-documentation","text":"","title":"Member Function Documentation"},{"location":"structmorapi__Tensors.html#morapi_tensors_clear","text":"morapi_Result morapi_Tensors_clear ( morapi_Tensors * self) Clears. Parameters self : tensors object","title":"morapi_Tensors_clear()"},{"location":"structmorapi__Tensors.html#morapi_tensors_add","text":"morapi_Tensor * morapi_Tensors_add ( morapi_Tensors * self) Adds a tensor. Parameters self : tensors object","title":"morapi_Tensors_add()"},{"location":"structmorapi__Tensors.html#morapi_tensors_erase","text":"morapi_Result morapi_Tensors_erase ( morapi_Tensors * self, morapi_Int32 i_index) Erases the tensor. Parameters self : tensors object i_index : index of the tensor to be erased","title":"morapi_Tensors_erase()"},{"location":"structmorapi__Tensors.html#morapi_tensors_copytensor","text":"morapi_Result morapi_Tensors_copyTensor ( morapi_Tensors * self, const morapi_Tensor * i_tensor) Copy a tensor (shallow copy).","title":"morapi_Tensors_copyTensor()"},{"location":"structmorapi__Tensors.html#morapi_tensors_getnum","text":"morapi_Int32 morapi_Tensors_getNum (const morapi_Tensors * self) Gets the number of tensors. Parameters self : tensors object","title":"morapi_Tensors_getNum()"},{"location":"structmorapi__Tensors.html#morapi_tensors_get","text":"morapi_Tensor * morapi_Tensors_get (const morapi_Tensors * self, morapi_Int32 i_index) Gets the i_index-th tensor. Parameters self : tensors object i_index : index of the tensor to be gotten","title":"morapi_Tensors_get()"},{"location":"structmorapi__Tensors.html#morapi_tensors_cast","text":"morapi_Result morapi_Tensors_cast ( morapi_Tensors * self, morapi_DType i_dtype, const morapi_Tensors * i_src) Casts.","title":"morapi_Tensors_cast()"},{"location":"structmorapi__VF__IStream.html","text":"morapi_VF_IStream Struct Reference core \u00bb stream \u00bb istream Virtual functions for morapi_IStream . More... #include <morapi_core_old.h> Public Types typedef morapi_Int32 (* morapi_VF_IStream_Fill ) (void *derived, void *o_dst, morapi_Pos i_pos, morapi_Int32 i_data_size) Public Member Functions #define morapi_VF_IStream_clear (self) ((self)->fill=NULL,(self)->is_thread_safe=NULL,MORAPI_OK) Detailed Description Virtual functions for morapi_IStream . Member Typedef Documentation morapi_VF_IStream_Fill typedef morapi_Int32 (* morapi_VF_IStream_Fill) (void *derived, void *o_dst, morapi_Pos i_pos, morapi_Int32 i_data_size) Reads data at i_pos on the stream. Parameters obj : a derived object. o_dst : an output buffer. i_pos : position on the stream. i_data_size : data size to be read (bytes). Returns non-negative: size that was read successfully. -1: fails in moving to i_pos.","title":"morapi_VF_IStream Struct Reference"},{"location":"structmorapi__VF__IStream.html#morapi_vf_istream-struct-reference","text":"core \u00bb stream \u00bb istream Virtual functions for morapi_IStream . More... #include <morapi_core_old.h>","title":"morapi_VF_IStream Struct Reference"},{"location":"structmorapi__VF__IStream.html#public-types","text":"typedef morapi_Int32 (* morapi_VF_IStream_Fill ) (void *derived, void *o_dst, morapi_Pos i_pos, morapi_Int32 i_data_size)","title":"Public Types"},{"location":"structmorapi__VF__IStream.html#public-member-functions","text":"#define morapi_VF_IStream_clear (self) ((self)->fill=NULL,(self)->is_thread_safe=NULL,MORAPI_OK)","title":"Public Member Functions"},{"location":"structmorapi__VF__IStream.html#detailed-description","text":"Virtual functions for morapi_IStream .","title":"Detailed Description"},{"location":"structmorapi__VF__IStream.html#member-typedef-documentation","text":"","title":"Member Typedef Documentation"},{"location":"structmorapi__VF__IStream.html#morapi_vf_istream_fill","text":"typedef morapi_Int32 (* morapi_VF_IStream_Fill) (void *derived, void *o_dst, morapi_Pos i_pos, morapi_Int32 i_data_size) Reads data at i_pos on the stream. Parameters obj : a derived object. o_dst : an output buffer. i_pos : position on the stream. i_data_size : data size to be read (bytes). Returns non-negative: size that was read successfully. -1: fails in moving to i_pos.","title":"morapi_VF_IStream_Fill"},{"location":"sub.html","text":"sub Element-wise subtraction. This layer subtracts the second input from the first input in the same shape or broadcastable shapes. The number of inputs must 2.","title":"sub"},{"location":"sub.html#sub","text":"Element-wise subtraction. This layer subtracts the second input from the first input in the same shape or broadcastable shapes. The number of inputs must 2.","title":"sub"},{"location":"sum.html","text":"sum Summation. This layer computes the summations of input along the specified axes. Parameter axes : Integers, axes along which summation is computed. The default is [-1] (the last dimension). keepdims : Boolean, whether the tensor rank is saved. The default is false","title":"sum"},{"location":"sum.html#sum","text":"Summation. This layer computes the summations of input along the specified axes.","title":"sum"},{"location":"sum.html#parameter","text":"axes : Integers, axes along which summation is computed. The default is [-1] (the last dimension). keepdims : Boolean, whether the tensor rank is saved. The default is false","title":"Parameter"},{"location":"sync.html","text":"sync Memory sync between devices. This layer transfers blob data from the source device to the destination device. Parameters from : source device. to : destination device.","title":"sync"},{"location":"sync.html#sync","text":"Memory sync between devices. This layer transfers blob data from the source device to the destination device.","title":"sync"},{"location":"sync.html#parameters","text":"from : source device. to : destination device.","title":"Parameters"},{"location":"tan.html","text":"tan Tan function. This layer applies tan function to an input, element-wise.","title":"tan"},{"location":"tan.html#tan","text":"Tan function. This layer applies tan function to an input, element-wise.","title":"tan"},{"location":"tanh.html","text":"tanh Tanh function. This layer applies tanh function to an input.","title":"tanh"},{"location":"tanh.html#tanh","text":"Tanh function. This layer applies tanh function to an input.","title":"tanh"},{"location":"tensor_to_scalar.html","text":"tensor_to_scalar tensor to scalar. This layer changes input with size of 1 to rank 0 output (scalar).","title":"tensor_to_scalar"},{"location":"tensor_to_scalar.html#tensor_to_scalar","text":"tensor to scalar. This layer changes input with size of 1 to rank 0 output (scalar).","title":"tensor_to_scalar"},{"location":"test_decompose_api_8c-example.html","text":"test_decompose_api.c This is an example code of DNN decomposing and squashing. Usage $ test_decompose_api IDNN ODNN LAYER#0 [LAYER#k] Arguments IDNN: The input DNN model file (*.dnn) to be decomposed and squashed. ODNN: The output DNN file (*.dnn). LAYER#k: The layer names of the split position. The input DNN is decomposed at the split position specified by LAYER#k. If LAYER#0 and LAYER#1 are given, the net is decomposed to three subnets, i.e. source - LAYER#0, LAYER#0 - LAYER#1, and LAYER#1 - sink. Then the main net (the most computationally expensive subnet is regarded as main net) is squashed to pseudo single layer of type complex. The main purpose of decomposing and squashing is to make the complex layer be calculated by different inference engine. Example Result $ ls mobilenet.dnn test_decompose_api $ test_decompose_api mobilenet.dnn mobilenet_decomposed.dnn conv_pw_13 reshape_1 add interval input_1 - conv_pw_13s add interval conv_pw_13 - reshape_1 add interval reshape_1 - sink_0 write to mobilenet_decomposed.dnn $ ls mobilenet.dnn mobilenet_decomposed.dnn test_decompose_api Sample Code #include \"morapi_softneuro.h\" #include <stdio.h> #include <stdlib.h> /* Command usage. */ void usage( void ) { printf( \"test_decompose_api IDNN ODNN LAYER#0 [LAYER#k]\\n\" \"\\n\" \"decompose, squash a dnn.\\n\" \"\\n\" \"positional arguments:\\n\" \" IDNN the input dnn.\\n\" \" ODN the output dnn.\\n\" \" LAYER#k the split layers (One or more need to be specified).\\n\" ); } int main( int argc, char **argv) { morapi_Result ret = MORAPI_OK; morapi_Env *env = NULL; morapi_Dnn *dnn = NULL; morapi_DnnNet *net = NULL; morapi_DnnNetPartition *part = NULL; morapi_Bool use_squash = MORAPI_TRUE; if (argc <= 3) { usage(); return 0; } /* create env. */ env = morapi_create_Env (NULL, 0); ret |= morapi_Env_setLogFunc (env, ( morapi_LogFunc )&fprintf, stderr); ret |= morapi_Env_setMsgFunc (env, ( morapi_LogFunc )&fprintf, ( morapi_FlushFunc )&fflush, stdout); /* create objects. */ dnn = morapi_create_Dnn (env); /* load dnn. */ if (MORAPI_OK != (ret |= morapi_Dnn_load (dnn, argv[1], NULL, 0, MORAPI_TRUE))) { printf( \"load fail\\n\" ); goto EXIT; } net = morapi_Dnn_findMainNet (dnn); { int l, l_num = (argc - 3) + 2; char **layers = malloc( sizeof ( char *) * l_num); layers[0] = morapi_DnnLayer_getName (morapi_DnnNet_getInputLayer(net, 0)); for (l = 1; l < (l_num - 1); l += 1){ layers[l] = argv[3+l-1]; } layers[l_num-1] = morapi_DnnLayer_getName (morapi_DnnNet_getOutputLayer(net, 0)); part = morapi_create_DnnNetPartition (env); for (l = 0; l < (l_num-1); l += 1){ morapi_DnnLayer *layer = morapi_DnnNet_findLayer (net, layers[l]); morapi_DnnLayer *next_layer = morapi_DnnNet_findLayer (net, layers[l+1]); if (NULL == layer || NULL == next_layer){ printf( \"layer not found\\n\" ); free(layers); goto EXIT; } ret |= morapi_DnnNetPartition_addInterval (part, layers[l], layers[l+1]); printf( \"add interval %s - %s\\n\" , layers[l], layers[l+1]); } free(layers); } if (MORAPI_OK != (ret |= morapi_Dnn_decompose (dnn, net, part))) { printf( \"decompose fail\\n\" ); goto EXIT; } if (MORAPI_OK != (ret |= morapi_Dnn_removeNet (dnn, net))) { printf( \"remove fail\\n\" ); goto EXIT; } if (use_squash){ net = morapi_Dnn_findMainNet (dnn); ret |= morapi_Dnn_squashNet (dnn, net, \"squashed\" ); if (MORAPI_OK != ret){ printf( \"squash fail\\n\" ); } } if (MORAPI_OK != (ret |= morapi_Dnn_save (dnn, argv[2], NULL, 0, MORAPI_FALSE))) { printf( \"write fail\\n\" ); goto EXIT; } else { printf( \"write to %s\\n\" , argv[2]); } EXIT: /* destroy objects. */ ret |= morapi_destroy_DnnNetPartition (env, part); ret |= morapi_destroy_Dnn (env, dnn); ret |= morapi_destroy_Env (env); return ( int )ret; }","title":"test_decompose_api.c"},{"location":"test_decompose_api_8c-example.html#test_decompose_apic","text":"This is an example code of DNN decomposing and squashing. Usage $ test_decompose_api IDNN ODNN LAYER#0 [LAYER#k] Arguments IDNN: The input DNN model file (*.dnn) to be decomposed and squashed. ODNN: The output DNN file (*.dnn). LAYER#k: The layer names of the split position. The input DNN is decomposed at the split position specified by LAYER#k. If LAYER#0 and LAYER#1 are given, the net is decomposed to three subnets, i.e. source - LAYER#0, LAYER#0 - LAYER#1, and LAYER#1 - sink. Then the main net (the most computationally expensive subnet is regarded as main net) is squashed to pseudo single layer of type complex. The main purpose of decomposing and squashing is to make the complex layer be calculated by different inference engine. Example Result $ ls mobilenet.dnn test_decompose_api $ test_decompose_api mobilenet.dnn mobilenet_decomposed.dnn conv_pw_13 reshape_1 add interval input_1 - conv_pw_13s add interval conv_pw_13 - reshape_1 add interval reshape_1 - sink_0 write to mobilenet_decomposed.dnn $ ls mobilenet.dnn mobilenet_decomposed.dnn test_decompose_api Sample Code #include \"morapi_softneuro.h\" #include <stdio.h> #include <stdlib.h> /* Command usage. */ void usage( void ) { printf( \"test_decompose_api IDNN ODNN LAYER#0 [LAYER#k]\\n\" \"\\n\" \"decompose, squash a dnn.\\n\" \"\\n\" \"positional arguments:\\n\" \" IDNN the input dnn.\\n\" \" ODN the output dnn.\\n\" \" LAYER#k the split layers (One or more need to be specified).\\n\" ); } int main( int argc, char **argv) { morapi_Result ret = MORAPI_OK; morapi_Env *env = NULL; morapi_Dnn *dnn = NULL; morapi_DnnNet *net = NULL; morapi_DnnNetPartition *part = NULL; morapi_Bool use_squash = MORAPI_TRUE; if (argc <= 3) { usage(); return 0; } /* create env. */ env = morapi_create_Env (NULL, 0); ret |= morapi_Env_setLogFunc (env, ( morapi_LogFunc )&fprintf, stderr); ret |= morapi_Env_setMsgFunc (env, ( morapi_LogFunc )&fprintf, ( morapi_FlushFunc )&fflush, stdout); /* create objects. */ dnn = morapi_create_Dnn (env); /* load dnn. */ if (MORAPI_OK != (ret |= morapi_Dnn_load (dnn, argv[1], NULL, 0, MORAPI_TRUE))) { printf( \"load fail\\n\" ); goto EXIT; } net = morapi_Dnn_findMainNet (dnn); { int l, l_num = (argc - 3) + 2; char **layers = malloc( sizeof ( char *) * l_num); layers[0] = morapi_DnnLayer_getName (morapi_DnnNet_getInputLayer(net, 0)); for (l = 1; l < (l_num - 1); l += 1){ layers[l] = argv[3+l-1]; } layers[l_num-1] = morapi_DnnLayer_getName (morapi_DnnNet_getOutputLayer(net, 0)); part = morapi_create_DnnNetPartition (env); for (l = 0; l < (l_num-1); l += 1){ morapi_DnnLayer *layer = morapi_DnnNet_findLayer (net, layers[l]); morapi_DnnLayer *next_layer = morapi_DnnNet_findLayer (net, layers[l+1]); if (NULL == layer || NULL == next_layer){ printf( \"layer not found\\n\" ); free(layers); goto EXIT; } ret |= morapi_DnnNetPartition_addInterval (part, layers[l], layers[l+1]); printf( \"add interval %s - %s\\n\" , layers[l], layers[l+1]); } free(layers); } if (MORAPI_OK != (ret |= morapi_Dnn_decompose (dnn, net, part))) { printf( \"decompose fail\\n\" ); goto EXIT; } if (MORAPI_OK != (ret |= morapi_Dnn_removeNet (dnn, net))) { printf( \"remove fail\\n\" ); goto EXIT; } if (use_squash){ net = morapi_Dnn_findMainNet (dnn); ret |= morapi_Dnn_squashNet (dnn, net, \"squashed\" ); if (MORAPI_OK != ret){ printf( \"squash fail\\n\" ); } } if (MORAPI_OK != (ret |= morapi_Dnn_save (dnn, argv[2], NULL, 0, MORAPI_FALSE))) { printf( \"write fail\\n\" ); goto EXIT; } else { printf( \"write to %s\\n\" , argv[2]); } EXIT: /* destroy objects. */ ret |= morapi_destroy_DnnNetPartition (env, part); ret |= morapi_destroy_Dnn (env, dnn); ret |= morapi_destroy_Env (env); return ( int )ret; }","title":"test_decompose_api.c"},{"location":"test_dnn_api_8c-example.html","text":"test_dnn_api.c This is an example code of classification task using DNN. Usage $ test_dnn_api MODEL IMAGE Arguments MODEL: A DNN model file (*.dnn). IMAGE: An image file (*.jpg). If the DNN is classification model and has appropriate labels, this sample shows the probability the input image matches each label. Example Result $ test_dnn_api mobilenet.dnn church224.jpg SoftNeuro 5.0.45104d9 compile done image load done forward done 0000: 0.00000 tench 0001: 0.00000 goldfish ... 0496: 0.00000 Christmas_stocking 0497: 0.41759 church 0498: 0.00002 cinema ... Sample Code #include \"morapi_core.h\" #include \"morapi_image.h\" #include \"morapi_image_io.h\" #include \"morapi_softneuro.h\" #include <stdio.h> #include <stdlib.h> void usage() { printf( \"test_dnn_api MODEL IMAGE\\n\" \" [Arguments]\\n\" \" MODEL: a model data.\\n\" \" IMAGE: an image data.\\n\" ); } int main( int argc, char **argv) { morapi_Result ret = MORAPI_OK; morapi_Int32 i, j; morapi_Int32 batch_size = 1; morapi_Env *env; morapi_Dnn *dnn; morapi_Tensor *sink_tensor; morapi_Image *image; morapi_Bool has_label = MORAPI_FALSE; morapi_Param *labels; const morapi_Char *routine = \"cpu/naive\" ; const morapi_Char *password = NULL; //const morapi_Char *password = \"password\"; // for password locked dnn file if (3 != argc) { usage(); return 0; } printf( \"%s\\n\\n\" , morapi_Dnn_static_getVersion ()); env = morapi_create_Env (NULL, 0); dnn = morapi_create_Dnn (env); ret |= morapi_Dnn_initialize (dnn); ret |= morapi_Dnn_load (dnn, argv[1], password, 0, MORAPI_TRUE); if (MORAPI_OK != ret) { printf( \"read model error.\\n\" ); goto ERROR; } ret |= morapi_Dnn_setThreadNum (dnn, 8); for (i = 0; i < morapi_Dnn_getNetNum (dnn); ++i) { morapi_DnnNet *net = morapi_Dnn_getNet (dnn, i); for (j = 0; j < morapi_DnnNet_getLayerNum (net); ++j) { morapi_DnnLayer *layer = morapi_DnnNet_getLayer (net, j); ret |= morapi_DnnLayer_setRoutineDesc (layer, routine); } } ret |= morapi_Dnn_setBatchSize (dnn, batch_size); /* compile */ ret |= morapi_Dnn_compile (dnn); if (MORAPI_OK != ret) { printf( \"compile error.\\n\" ); goto ERROR; } printf( \"compile done\\n\" ); /* load image */ image = morapi_create_Image (env); ret |= morapi_ImageIO__load (image, MORAPI_IMAGE_FORMAT_RGB8 , argv[2]); ret |= morapi_Dnn_setInputImage (dnn, image, 0, 0); ret |= morapi_destroy_Image (env, image); if (MORAPI_OK != ret) { printf( \"image load error.\\n\" ); goto ERROR; } printf( \"image load done\\n\" ); /* predict. */ ret |= morapi_Dnn_forward (dnn); if (MORAPI_OK != ret) { printf( \"forward error.\\n\" ); goto ERROR; } printf( \"forward done\\n\\n\" ); if ((labels = morapi_Params_find ( morapi_Dnn_getOutputAttrs (dnn, 0), \"labels\" ))) { has_label = MORAPI_TRUE; } sink_tensor = morapi_Dnn_getOutputBlob (dnn, 0); for (i = 0; i < morapi_Tensor_getNum (sink_tensor); ++i) { if (has_label) { printf( \"%04d: %7.5f %s\\n\" , i, morapi_Tensor_getFloat32 (sink_tensor)[i], labels-> texts [i]); } else { printf( \"%04d: %7.5f\\n\" , i, morapi_Tensor_getFloat32 (sink_tensor)[i]); } } ERROR: ret |= morapi_destroy_Dnn (env, dnn); ret |= morapi_destroy_Env (env); return ret; }","title":"test_dnn_api.c"},{"location":"test_dnn_api_8c-example.html#test_dnn_apic","text":"This is an example code of classification task using DNN. Usage $ test_dnn_api MODEL IMAGE Arguments MODEL: A DNN model file (*.dnn). IMAGE: An image file (*.jpg). If the DNN is classification model and has appropriate labels, this sample shows the probability the input image matches each label. Example Result $ test_dnn_api mobilenet.dnn church224.jpg SoftNeuro 5.0.45104d9 compile done image load done forward done 0000: 0.00000 tench 0001: 0.00000 goldfish ... 0496: 0.00000 Christmas_stocking 0497: 0.41759 church 0498: 0.00002 cinema ... Sample Code #include \"morapi_core.h\" #include \"morapi_image.h\" #include \"morapi_image_io.h\" #include \"morapi_softneuro.h\" #include <stdio.h> #include <stdlib.h> void usage() { printf( \"test_dnn_api MODEL IMAGE\\n\" \" [Arguments]\\n\" \" MODEL: a model data.\\n\" \" IMAGE: an image data.\\n\" ); } int main( int argc, char **argv) { morapi_Result ret = MORAPI_OK; morapi_Int32 i, j; morapi_Int32 batch_size = 1; morapi_Env *env; morapi_Dnn *dnn; morapi_Tensor *sink_tensor; morapi_Image *image; morapi_Bool has_label = MORAPI_FALSE; morapi_Param *labels; const morapi_Char *routine = \"cpu/naive\" ; const morapi_Char *password = NULL; //const morapi_Char *password = \"password\"; // for password locked dnn file if (3 != argc) { usage(); return 0; } printf( \"%s\\n\\n\" , morapi_Dnn_static_getVersion ()); env = morapi_create_Env (NULL, 0); dnn = morapi_create_Dnn (env); ret |= morapi_Dnn_initialize (dnn); ret |= morapi_Dnn_load (dnn, argv[1], password, 0, MORAPI_TRUE); if (MORAPI_OK != ret) { printf( \"read model error.\\n\" ); goto ERROR; } ret |= morapi_Dnn_setThreadNum (dnn, 8); for (i = 0; i < morapi_Dnn_getNetNum (dnn); ++i) { morapi_DnnNet *net = morapi_Dnn_getNet (dnn, i); for (j = 0; j < morapi_DnnNet_getLayerNum (net); ++j) { morapi_DnnLayer *layer = morapi_DnnNet_getLayer (net, j); ret |= morapi_DnnLayer_setRoutineDesc (layer, routine); } } ret |= morapi_Dnn_setBatchSize (dnn, batch_size); /* compile */ ret |= morapi_Dnn_compile (dnn); if (MORAPI_OK != ret) { printf( \"compile error.\\n\" ); goto ERROR; } printf( \"compile done\\n\" ); /* load image */ image = morapi_create_Image (env); ret |= morapi_ImageIO__load (image, MORAPI_IMAGE_FORMAT_RGB8 , argv[2]); ret |= morapi_Dnn_setInputImage (dnn, image, 0, 0); ret |= morapi_destroy_Image (env, image); if (MORAPI_OK != ret) { printf( \"image load error.\\n\" ); goto ERROR; } printf( \"image load done\\n\" ); /* predict. */ ret |= morapi_Dnn_forward (dnn); if (MORAPI_OK != ret) { printf( \"forward error.\\n\" ); goto ERROR; } printf( \"forward done\\n\\n\" ); if ((labels = morapi_Params_find ( morapi_Dnn_getOutputAttrs (dnn, 0), \"labels\" ))) { has_label = MORAPI_TRUE; } sink_tensor = morapi_Dnn_getOutputBlob (dnn, 0); for (i = 0; i < morapi_Tensor_getNum (sink_tensor); ++i) { if (has_label) { printf( \"%04d: %7.5f %s\\n\" , i, morapi_Tensor_getFloat32 (sink_tensor)[i], labels-> texts [i]); } else { printf( \"%04d: %7.5f\\n\" , i, morapi_Tensor_getFloat32 (sink_tensor)[i]); } } ERROR: ret |= morapi_destroy_Dnn (env, dnn); ret |= morapi_destroy_Env (env); return ret; }","title":"test_dnn_api.c"},{"location":"test_prof_api_8c-example.html","text":"test_prof_api.c This is an example code of DNN profiling and tuning. Usage $ test_prof_api DNN RECIPE [TUNED] Arguments DNN: The input DNN model file (*.dnn) to be profiled and tuned. RECIPE: The output tuning recipe. TUNED: The output tuned DNN file (*.dnn). If the profiling and tuning succeeds, the recipe file and tuned DNN file will be generated. The tuned DNN file runs faster than the original DNN file. Example Result $ ls mobilenet.dnn test_prof_api $ test_prof_api mobilenet.dnn recipe mobilenet_tuned.dnn Profiling.. 0.0% ... Profiling..100.0% $ls mobilenet.dnn mobilenet_tuned.dnn recipe test_prof_api Sample Code #include \"morapi_softneuro.h\" #include <stdio.h> /* Command usage. */ void usage( void ) { printf( \"test_prof_api DNN RECIPE [TUNED]\\n\" \"\\n\" \"profile, optimize and tune a dnn with 'cpu' and 'cpu:qint8' routines.\\n\" \"\\n\" \"positional arguments:\\n\" \" DNN the input dnn.\\n\" \" RECIPE the output recipe.\\n\" \" TUNED the tuned dnn.\\n\" ); } /* Progress function for profiling. */ void profProgress( void *obj, morapi_DnnProf *i_prof) { morapi_Real progress = morapi_DnnProf_getProgress (i_prof); printf( \"\\rProfiling..%5.1f%%\" , progress*100); fflush(stdout); if (1.0 <= progress) { printf( \"\\n\" ); } } int main( int argc, char **argv) { morapi_Result ret = MORAPI_OK; morapi_Env *env = NULL; morapi_Dnn *dnn = NULL; morapi_DnnProf *prof = NULL; morapi_DnnOptimizer *optimizer = NULL; morapi_DnnRecipe *recipe = NULL; const morapi_Char *routines[] = { \"cpu\" , \"cpu:qint8\" }; /*< routines to be profiled. */ morapi_Int32 i; if (argc != 3 && argc != 4) { usage(); return 0; } /* create env. */ env = morapi_create_Env (NULL, 0); ret |= morapi_Env_setLogFunc (env, ( morapi_LogFunc )&fprintf, stderr); ret |= morapi_Env_setMsgFunc (env, ( morapi_LogFunc )&fprintf, ( morapi_FlushFunc )&fflush, stdout); /* create objects. */ dnn = morapi_create_Dnn (env); prof = morapi_create_DnnProf (env); optimizer = morapi_create_DnnOptimizer (env); recipe = morapi_create_DnnRecipe (env); /* load dnn. */ if (MORAPI_OK != (ret |= morapi_Dnn_load (dnn, argv[1], NULL, 0, MORAPI_TRUE))) { goto EXIT; } /* set up profiler. */ ret |= morapi_DnnProf_init (prof, dnn); for (i = 0; i < sizeof (routines)/ sizeof ( char *); ++i) { ret |= morapi_DnnProf_add (prof, routines[i], NULL); } /* profile. */ ret |= morapi_DnnProf_profile (prof, &profProgress, NULL); /* optimize. */ ret |= morapi_DnnOptimizer_init (optimizer, prof); ret |= morapi_DnnOptimizer_optimize (optimizer); /* make and save recipe. */ ret |= morapi_DnnRecipe_init (recipe, morapi_DnnOptimizer_getPlan (optimizer)); ret |= morapi_DnnRecipe_strip (recipe); ret |= morapi_DnnRecipe_save (recipe, argv[2]); /* tune and save dnn if needed. */ if (4 <= argc) { ret |= morapi_Dnn_tune (dnn, recipe); ret |= morapi_Dnn_save (dnn, argv[3], NULL, 0, MORAPI_FALSE); } EXIT: /* destroy objects. */ ret |= morapi_destroy_DnnRecipe (env, recipe); ret |= morapi_destroy_DnnOptimizer (env, optimizer); ret |= morapi_destroy_DnnProf (env, prof); ret |= morapi_destroy_Dnn (env, dnn); ret |= morapi_destroy_Env (env); return ( int )ret; }","title":"test_prof_api.c"},{"location":"test_prof_api_8c-example.html#test_prof_apic","text":"This is an example code of DNN profiling and tuning. Usage $ test_prof_api DNN RECIPE [TUNED] Arguments DNN: The input DNN model file (*.dnn) to be profiled and tuned. RECIPE: The output tuning recipe. TUNED: The output tuned DNN file (*.dnn). If the profiling and tuning succeeds, the recipe file and tuned DNN file will be generated. The tuned DNN file runs faster than the original DNN file. Example Result $ ls mobilenet.dnn test_prof_api $ test_prof_api mobilenet.dnn recipe mobilenet_tuned.dnn Profiling.. 0.0% ... Profiling..100.0% $ls mobilenet.dnn mobilenet_tuned.dnn recipe test_prof_api Sample Code #include \"morapi_softneuro.h\" #include <stdio.h> /* Command usage. */ void usage( void ) { printf( \"test_prof_api DNN RECIPE [TUNED]\\n\" \"\\n\" \"profile, optimize and tune a dnn with 'cpu' and 'cpu:qint8' routines.\\n\" \"\\n\" \"positional arguments:\\n\" \" DNN the input dnn.\\n\" \" RECIPE the output recipe.\\n\" \" TUNED the tuned dnn.\\n\" ); } /* Progress function for profiling. */ void profProgress( void *obj, morapi_DnnProf *i_prof) { morapi_Real progress = morapi_DnnProf_getProgress (i_prof); printf( \"\\rProfiling..%5.1f%%\" , progress*100); fflush(stdout); if (1.0 <= progress) { printf( \"\\n\" ); } } int main( int argc, char **argv) { morapi_Result ret = MORAPI_OK; morapi_Env *env = NULL; morapi_Dnn *dnn = NULL; morapi_DnnProf *prof = NULL; morapi_DnnOptimizer *optimizer = NULL; morapi_DnnRecipe *recipe = NULL; const morapi_Char *routines[] = { \"cpu\" , \"cpu:qint8\" }; /*< routines to be profiled. */ morapi_Int32 i; if (argc != 3 && argc != 4) { usage(); return 0; } /* create env. */ env = morapi_create_Env (NULL, 0); ret |= morapi_Env_setLogFunc (env, ( morapi_LogFunc )&fprintf, stderr); ret |= morapi_Env_setMsgFunc (env, ( morapi_LogFunc )&fprintf, ( morapi_FlushFunc )&fflush, stdout); /* create objects. */ dnn = morapi_create_Dnn (env); prof = morapi_create_DnnProf (env); optimizer = morapi_create_DnnOptimizer (env); recipe = morapi_create_DnnRecipe (env); /* load dnn. */ if (MORAPI_OK != (ret |= morapi_Dnn_load (dnn, argv[1], NULL, 0, MORAPI_TRUE))) { goto EXIT; } /* set up profiler. */ ret |= morapi_DnnProf_init (prof, dnn); for (i = 0; i < sizeof (routines)/ sizeof ( char *); ++i) { ret |= morapi_DnnProf_add (prof, routines[i], NULL); } /* profile. */ ret |= morapi_DnnProf_profile (prof, &profProgress, NULL); /* optimize. */ ret |= morapi_DnnOptimizer_init (optimizer, prof); ret |= morapi_DnnOptimizer_optimize (optimizer); /* make and save recipe. */ ret |= morapi_DnnRecipe_init (recipe, morapi_DnnOptimizer_getPlan (optimizer)); ret |= morapi_DnnRecipe_strip (recipe); ret |= morapi_DnnRecipe_save (recipe, argv[2]); /* tune and save dnn if needed. */ if (4 <= argc) { ret |= morapi_Dnn_tune (dnn, recipe); ret |= morapi_Dnn_save (dnn, argv[3], NULL, 0, MORAPI_FALSE); } EXIT: /* destroy objects. */ ret |= morapi_destroy_DnnRecipe (env, recipe); ret |= morapi_destroy_DnnOptimizer (env, optimizer); ret |= morapi_destroy_DnnProf (env, prof); ret |= morapi_destroy_Dnn (env, dnn); ret |= morapi_destroy_Env (env); return ( int )ret; }","title":"test_prof_api.c"},{"location":"tile.html","text":"A tile activation layer Parameters repeats : Integers, numbers of repeat.","title":"tile"},{"location":"tile.html#parameters","text":"repeats : Integers, numbers of repeat.","title":"Parameters"},{"location":"transpose.html","text":"transpose Transposition. This layer transposes an input tensor. Parameter axes : Tuple of integers, a tensor index order array. It is compatible with numpy.transpose().","title":"transpose"},{"location":"transpose.html#transpose","text":"Transposition. This layer transposes an input tensor.","title":"transpose"},{"location":"transpose.html#parameter","text":"axes : Tuple of integers, a tensor index order array. It is compatible with numpy.transpose().","title":"Parameter"},{"location":"unionmorapi__JsonData.html","text":"morapi_JsonData Union Reference core \u00bb json A union of Json data. More... #include <morapi_core_old.h> Data Fields morapi_JsonArray * array morapi_JsonObject * object morapi_Char * text morapi_Real number morapi_Bool boolean Detailed Description A union of Json data. Field Documentation array morapi_JsonArray * morapi_JsonData::array array. object morapi_JsonObject * morapi_JsonData::object object. text morapi_Char * morapi_JsonData::text text. number morapi_Real morapi_JsonData::number number. boolean morapi_Bool morapi_JsonData::boolean boolean.","title":"morapi_JsonData Union Reference"},{"location":"unionmorapi__JsonData.html#morapi_jsondata-union-reference","text":"core \u00bb json A union of Json data. More... #include <morapi_core_old.h>","title":"morapi_JsonData Union Reference"},{"location":"unionmorapi__JsonData.html#data-fields","text":"morapi_JsonArray * array morapi_JsonObject * object morapi_Char * text morapi_Real number morapi_Bool boolean","title":"Data Fields"},{"location":"unionmorapi__JsonData.html#detailed-description","text":"A union of Json data.","title":"Detailed Description"},{"location":"unionmorapi__JsonData.html#field-documentation","text":"","title":"Field Documentation"},{"location":"unionmorapi__JsonData.html#array","text":"morapi_JsonArray * morapi_JsonData::array array.","title":"array"},{"location":"unionmorapi__JsonData.html#object","text":"morapi_JsonObject * morapi_JsonData::object object.","title":"object"},{"location":"unionmorapi__JsonData.html#text","text":"morapi_Char * morapi_JsonData::text text.","title":"text"},{"location":"unionmorapi__JsonData.html#number","text":"morapi_Real morapi_JsonData::number number.","title":"number"},{"location":"unionmorapi__JsonData.html#boolean","text":"morapi_Bool morapi_JsonData::boolean boolean.","title":"boolean"},{"location":"unpool2.html","text":"unpool2 2D un-pooling (upsampling). This layer upsamples spatial data of the first input according to the mask (the second input). Parameters strides : Integer or 2 integers, stride values. If there is no mask, use this values. Two integers mean [stride_y, stride_x]. One integer means stride_y and stride_x have the same value. The default is [0, 0].","title":"unpool2"},{"location":"unpool2.html#unpool2","text":"2D un-pooling (upsampling). This layer upsamples spatial data of the first input according to the mask (the second input).","title":"unpool2"},{"location":"unpool2.html#parameters","text":"strides : Integer or 2 integers, stride values. If there is no mask, use this values. Two integers mean [stride_y, stride_x]. One integer means stride_y and stride_x have the same value. The default is [0, 0].","title":"Parameters"},{"location":"unsqueeze.html","text":"unsqueeze Unsqueezing. This layer unsqueezes an input by inserting 1D axes. For example, the input shape is [14, 14, 256] and axes is [0, 2, 3], then the output shape becomes [1, 14, 1, 1, 14, 256]. Parameters axes : axis indices where the 1 is inserted in output blob shape.","title":"unsqueeze"},{"location":"unsqueeze.html#unsqueeze","text":"Unsqueezing. This layer unsqueezes an input by inserting 1D axes. For example, the input shape is [14, 14, 256] and axes is [0, 2, 3], then the output shape becomes [1, 14, 1, 1, 14, 256].","title":"unsqueeze"},{"location":"unsqueeze.html#parameters","text":"axes : axis indices where the 1 is inserted in output blob shape.","title":"Parameters"},{"location":"zero_padding2.html","text":"zero_padding2 2D zero padding. This layer pads zeros to an input. Parameter pads : Integer, 2 integers, or 4 integers, padding values. If integer, the height and width are symmmetrically padded with the same value. If 2 integers, the height and weight are symetrically padded with [pad_h, pad_w]. If 4 integers, the height and weight are padded with [pad_top, pad_left, pad_bottom, pad_right]. The default is 0. padding_color : Floats, padding color. The default is [0.0, 0.0, 0.0].","title":"zero_padding2"},{"location":"zero_padding2.html#zero_padding2","text":"2D zero padding. This layer pads zeros to an input.","title":"zero_padding2"},{"location":"zero_padding2.html#parameter","text":"pads : Integer, 2 integers, or 4 integers, padding values. If integer, the height and width are symmmetrically padded with the same value. If 2 integers, the height and weight are symetrically padded with [pad_h, pad_w]. If 4 integers, the height and weight are padded with [pad_top, pad_left, pad_bottom, pad_right]. The default is 0. padding_color : Floats, padding color. The default is [0.0, 0.0, 0.0].","title":"Parameter"}]}